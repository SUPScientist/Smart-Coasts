
d:/CLASSES_2021_2022/Fall_2022/OCN_479/Seaport_Tide-SLR/Firmware/SLR_Boron_Maxbotix_Analog_v2/target/4.0.0/boron/SLR_Boron_Maxbotix_Analog_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005eb0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b9ed0  000b9ed0  00009ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b9ef4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e0c4  000b9ef8  0001e0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000006c0  2003e130  2003e130  0002e130  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b9f64  000b9f64  00029f64  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b9f8c  000b9f8c  00029f8c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00180911  00000000  00000000  00029f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001aac8  00000000  00000000  001aa8a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00049c42  00000000  00000000  001c5369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000032f0  00000000  00000000  0020efab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000be70  00000000  00000000  0021229b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004a390  00000000  00000000  0021e10b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0005f8d6  00000000  00000000  0026849b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013b57f  00000000  00000000  002c7d71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00009734  00000000  00000000  004032f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f004 ff5b 	bl	b8eec <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f004 ff63 	bl	b8f08 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e0c4 	.word	0x2003e0c4
   b404c:	000b9ef8 	.word	0x000b9ef8
   b4050:	2003e130 	.word	0x2003e130
   b4054:	2003e130 	.word	0x2003e130
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f003 fdff 	bl	b7c64 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b9eac 	.word	0x000b9eac
   b4080:	000b9ed0 	.word	0x000b9ed0

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b8b0 	b.w	b41e8 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f8d5 	bl	b4238 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f003 bd9f 	b.w	b7bd4 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f003 b9b3 	b.w	b7400 <malloc>

000b409a <_Znaj>:
   b409a:	f003 b9b1 	b.w	b7400 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f003 b9b7 	b.w	b7410 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f003 f8d2 	bl	b7254 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b6f75 	.word	0x000b6f75
   b40b8:	000b9064 	.word	0x000b9064

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40cc:	4770      	bx	lr

000b40ce <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40ce:	7c03      	ldrb	r3, [r0, #16]
   b40d0:	f013 0308 	ands.w	r3, r3, #8
   b40d4:	bf1e      	ittt	ne
   b40d6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40d8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40da:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40dc:	2b00      	cmp	r3, #0
  }
   b40de:	bfac      	ite	ge
   b40e0:	4618      	movge	r0, r3
   b40e2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40e6:	4770      	bx	lr

000b40e8 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40e8:	4770      	bx	lr

000b40ea <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b40ea:	3010      	adds	r0, #16
   b40ec:	f001 bca8 	b.w	b5a40 <_ZN7FatFile4syncEv>

000b40f0 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b40f0:	3010      	adds	r0, #16
   b40f2:	f001 bbc6 	b.w	b5882 <_ZN7FatFile4peekEv>

000b40f6 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b40f6:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b40f8:	2201      	movs	r2, #1
   b40fa:	f10d 0107 	add.w	r1, sp, #7
   b40fe:	3010      	adds	r0, #16
   b4100:	f001 fb11 	bl	b5726 <_ZN7FatFile4readEPvj>
   b4104:	2801      	cmp	r0, #1
   b4106:	bf0c      	ite	eq
   b4108:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b410c:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   b4110:	b003      	add	sp, #12
   b4112:	f85d fb04 	ldr.w	pc, [sp], #4

000b4116 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b4116:	3010      	adds	r0, #16
   b4118:	f001 bd1c 	b.w	b5b54 <_ZN7FatFile5writeEPKvj>

000b411c <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b411c:	b510      	push	{r4, lr}
  }
   b411e:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4120:	4604      	mov	r4, r0
  }
   b4122:	f7ff ffbc 	bl	b409e <_ZdlPvj>
   b4126:	4620      	mov	r0, r4
   b4128:	bd10      	pop	{r4, pc}

000b412a <_ZN4FileD0Ev>:
class File : public FatFile, public Stream {
   b412a:	b510      	push	{r4, lr}
   b412c:	2134      	movs	r1, #52	; 0x34
   b412e:	4604      	mov	r4, r0
   b4130:	f7ff ffb5 	bl	b409e <_ZdlPvj>
   b4134:	4620      	mov	r0, r4
   b4136:	bd10      	pop	{r4, pc}

000b4138 <_ZN5Print5printIlLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b4138:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b413a:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b413c:	4606      	mov	r6, r0
   b413e:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b4140:	da0b      	bge.n	b415a <_ZN5Print5printIlLi0EEEjT_i.part.0.isra.0+0x22>
   b4142:	2a0a      	cmp	r2, #10
   b4144:	d109      	bne.n	b415a <_ZN5Print5printIlLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b4146:	212d      	movs	r1, #45	; 0x2d
   b4148:	f003 fb58 	bl	b77fc <_ZN5Print5printEc>
            val = -n;
   b414c:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b414e:	b2ea      	uxtb	r2, r5
   b4150:	4630      	mov	r0, r6
    }
}
   b4152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b4156:	f003 bb6a 	b.w	b782e <_ZN5Print11printNumberEmh>
            val = n;
   b415a:	4621      	mov	r1, r4
   b415c:	e7f7      	b.n	b414e <_ZN5Print5printIlLi0EEEjT_i.part.0.isra.0+0x16>

000b415e <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b415e:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b4160:	2201      	movs	r2, #1
   b4162:	f88d 1007 	strb.w	r1, [sp, #7]
   b4166:	3010      	adds	r0, #16
   b4168:	f10d 0107 	add.w	r1, sp, #7
   b416c:	f001 fcf2 	bl	b5b54 <_ZN7FatFile5writeEPKvj>
  }
   b4170:	b003      	add	sp, #12
   b4172:	f85d fb04 	ldr.w	pc, [sp], #4

000b4176 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4176:	b40e      	push	{r1, r2, r3}
   b4178:	b503      	push	{r0, r1, lr}
   b417a:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b417c:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b417e:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4182:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4184:	f003 fc63 	bl	b7a4e <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4188:	b002      	add	sp, #8
   b418a:	f85d eb04 	ldr.w	lr, [sp], #4
   b418e:	b003      	add	sp, #12
   b4190:	4770      	bx	lr
	...

000b4194 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4194:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4196:	4604      	mov	r4, r0
   b4198:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b419a:	7922      	ldrb	r2, [r4, #4]
   b419c:	68a3      	ldr	r3, [r4, #8]
   b419e:	b132      	cbz	r2, b41ae <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b41a0:	b9a3      	cbnz	r3, b41cc <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b41a2:	490b      	ldr	r1, [pc, #44]	; (b41d0 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b41a4:	b002      	add	sp, #8
   b41a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b41aa:	f003 bb23 	b.w	b77f4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b41ae:	4a09      	ldr	r2, [pc, #36]	; (b41d4 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b41b0:	7b26      	ldrb	r6, [r4, #12]
   b41b2:	4d09      	ldr	r5, [pc, #36]	; (b41d8 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b41b4:	4909      	ldr	r1, [pc, #36]	; (b41dc <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b41b6:	7b64      	ldrb	r4, [r4, #13]
   b41b8:	2e01      	cmp	r6, #1
   b41ba:	bf18      	it	ne
   b41bc:	4629      	movne	r1, r5
   b41be:	e9cd 1400 	strd	r1, r4, [sp]
   b41c2:	4907      	ldr	r1, [pc, #28]	; (b41e0 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b41c4:	f7ff ffd7 	bl	b4176 <_ZN5Print6printfEPKcz>
  }
   b41c8:	b002      	add	sp, #8
   b41ca:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b41cc:	4a05      	ldr	r2, [pc, #20]	; (b41e4 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b41ce:	e7ef      	b.n	b41b0 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b41d0:	000b908a 	.word	0x000b908a
   b41d4:	000b90e0 	.word	0x000b90e0
   b41d8:	000b9086 	.word	0x000b9086
   b41dc:	000b9082 	.word	0x000b9082
   b41e0:	000b90a0 	.word	0x000b90a0
   b41e4:	000b9079 	.word	0x000b9079

000b41e8 <setup>:
// Various timing constants
const unsigned long MAX_TIME_TO_PUBLISH_MS = 60000; // Only stay awake for 60 seconds trying to connect to the cloud and publish
const unsigned long TIME_AFTER_PUBLISH_MS = 4000; // After publish, wait 4 seconds for data to go out

void setup(void)
{
   b41e8:	b508      	push	{r3, lr}
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   b41ea:	4810      	ldr	r0, [pc, #64]	; (b422c <setup+0x44>)
   b41ec:	2300      	movs	r3, #0
   b41ee:	4619      	mov	r1, r3
   b41f0:	461a      	mov	r2, r3
   b41f2:	6840      	ldr	r0, [r0, #4]
   b41f4:	f003 f8ac 	bl	b7350 <network_off>
  // Particle.connect();
  Cellular.off(); // turn off cellular for prelim testing (uncomment)

  delay(5000); // to see response from begin command
   b41f8:	f241 3088 	movw	r0, #5000	; 0x1388
   b41fc:	f003 fca4 	bl	b7b48 <delay>

  Serial.begin(9600);
   b4200:	f003 fe38 	bl	b7e74 <_Z16_fetch_usbserialv>
   b4204:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4208:	f003 fe28 	bl	b7e5c <_ZN9USBSerial5beginEl>
  Serial.println("Maxbotix Test");
   b420c:	f003 fe32 	bl	b7e74 <_Z16_fetch_usbserialv>
   b4210:	4907      	ldr	r1, [pc, #28]	; (b4230 <setup+0x48>)
   b4212:	f003 fb02 	bl	b781a <_ZN5Print7printlnEPKc>

  display.setup();
   b4216:	4807      	ldr	r0, [pc, #28]	; (b4234 <setup+0x4c>)
   b4218:	f000 fe64 	bl	b4ee4 <_ZN16OledWingAdafruit5setupEv>

  display.clearDisplay();
   b421c:	4805      	ldr	r0, [pc, #20]	; (b4234 <setup+0x4c>)
   b421e:	f002 fb59 	bl	b68d4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();

}
   b4222:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  display.display();
   b4226:	4803      	ldr	r0, [pc, #12]	; (b4234 <setup+0x4c>)
   b4228:	f002 bdc2 	b.w	b6db0 <_ZN16Adafruit_SSD13067displayEv>
   b422c:	2003e6d8 	.word	0x2003e6d8
   b4230:	000b90bd 	.word	0x000b90bd
   b4234:	2003e168 	.word	0x2003e168

000b4238 <loop>:

void loop(void)
{
   b4238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b423c:	ed2d 8b02 	vpush	{d8}

  // Request time synchronization from the Particle Device Cloud
  //Particle.syncTime();
 
  // Enter state machine
  switch(state) {
   b4240:	4ead      	ldr	r6, [pc, #692]	; (b44f8 <loop+0x2c0>)
   b4242:	7833      	ldrb	r3, [r6, #0]
{
   b4244:	b093      	sub	sp, #76	; 0x4c
  switch(state) {
   b4246:	b13b      	cbz	r3, b4258 <loop+0x20>
   b4248:	2b01      	cmp	r3, #1
   b424a:	f000 8109 	beq.w	b4460 <loop+0x228>
  }
  break;

  }

   b424e:	b013      	add	sp, #76	; 0x4c
   b4250:	ecbd 8b02 	vpop	{d8}
   b4254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dist_in_sum = 0; 
   b4258:	4da8      	ldr	r5, [pc, #672]	; (b44fc <loop+0x2c4>)
    for(j=0; j<100; j++){
   b425a:	4ea9      	ldr	r6, [pc, #676]	; (b4500 <loop+0x2c8>)
class SPISettings : public Printable {
   b425c:	f8df b2ec 	ldr.w	fp, [pc, #748]	; b454c <loop+0x314>
   b4260:	6033      	str	r3, [r6, #0]
      float range_in = range_V*(512/3.3); // V*(in/V) = in (NB: in/V conversion factor comes from datasheet)
   b4262:	f20f 2984 	addw	r9, pc, #644	; 0x284
   b4266:	e9d9 8900 	ldrd	r8, r9, [r9]
    dist_in_sum = 0; 
   b426a:	2200      	movs	r2, #0
   b426c:	602a      	str	r2, [r5, #0]
    for(j=0; j<100; j++){
   b426e:	6833      	ldr	r3, [r6, #0]
   b4270:	2b63      	cmp	r3, #99	; 0x63
   b4272:	f300 80c7 	bgt.w	b4404 <loop+0x1cc>
      int range_cts = analogRead(A1);    //read signal on pin A1 and assign to variable: range_cts
   b4276:	2012      	movs	r0, #18
   b4278:	f004 f84d 	bl	b8316 <analogRead>
      float range_V = (float)range_cts*(3.3/4096); // counts*(V/counts) = V (NB: SAMD21's ADC is configured to 10-bit resolution)
   b427c:	ee07 0a90 	vmov	s15, r0
   b4280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      display.loop();
   b4284:	4c9f      	ldr	r4, [pc, #636]	; (b4504 <loop+0x2cc>)
      float range_V = (float)range_cts*(3.3/4096); // counts*(V/counts) = V (NB: SAMD21's ADC is configured to 10-bit resolution)
   b4286:	ee17 0a90 	vmov	r0, s15
   b428a:	f004 fa79 	bl	b8780 <__aeabi_f2d>
   b428e:	a398      	add	r3, pc, #608	; (adr r3, b44f0 <loop+0x2b8>)
   b4290:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4294:	f004 facc 	bl	b8830 <__aeabi_dmul>
   b4298:	f004 fdc2 	bl	b8e20 <__aeabi_d2f>
      float range_in = range_V*(512/3.3); // V*(in/V) = in (NB: in/V conversion factor comes from datasheet)
   b429c:	f004 fa70 	bl	b8780 <__aeabi_f2d>
   b42a0:	4642      	mov	r2, r8
   b42a2:	464b      	mov	r3, r9
   b42a4:	f004 fac4 	bl	b8830 <__aeabi_dmul>
   b42a8:	f004 fdba 	bl	b8e20 <__aeabi_d2f>
      dist_in_sum += range_in;
   b42ac:	edd5 7a00 	vldr	s15, [r5]
      float range_in = range_V*(512/3.3); // V*(in/V) = in (NB: in/V conversion factor comes from datasheet)
   b42b0:	ee08 0a10 	vmov	s16, r0
      dist_in_sum += range_in;
   b42b4:	ee77 7a88 	vadd.f32	s15, s15, s16
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b42b8:	2700      	movs	r7, #0
   b42ba:	edc5 7a00 	vstr	s15, [r5]
      Serial.println(range_in);
   b42be:	f003 fdd9 	bl	b7e74 <_Z16_fetch_usbserialv>
   b42c2:	eeb0 0a48 	vmov.f32	s0, s16
   b42c6:	2102      	movs	r1, #2
   b42c8:	f003 fbb2 	bl	b7a30 <_ZN5Print7printlnEfi>
      display.loop();
   b42cc:	4620      	mov	r0, r4
   b42ce:	f000 fe32 	bl	b4f36 <_ZN16OledWingAdafruit4loopEv>
      display.clearDisplay();
   b42d2:	4620      	mov	r0, r4
   b42d4:	f002 fafe 	bl	b68d4 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display.setTextSize(1);
   b42d8:	4620      	mov	r0, r4
   b42da:	2101      	movs	r1, #1
   b42dc:	f000 fdb3 	bl	b4e46 <_ZN12Adafruit_GFX11setTextSizeEh>
   b42e0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b42e4:	e9c4 7304 	strd	r7, r3, [r4, #16]
      display.println("Time: ");
   b42e8:	4987      	ldr	r1, [pc, #540]	; (b4508 <loop+0x2d0>)
   b42ea:	4620      	mov	r0, r4
   b42ec:	f003 fa95 	bl	b781a <_ZN5Print7printlnEPKc>
      display.println(Time.now()); // Time (seconds since 1/1/1970)
   b42f0:	f003 fc10 	bl	b7b14 <_ZN9TimeClass3nowEv>
   b42f4:	220a      	movs	r2, #10
   b42f6:	4601      	mov	r1, r0
size_t Print::print(T n, int base)
   b42f8:	4620      	mov	r0, r4
   b42fa:	f7ff ff1d 	bl	b4138 <_ZN5Print5printIlLi0EEEjT_i.part.0.isra.0>
        n += println();
   b42fe:	4620      	mov	r0, r4
   b4300:	f003 fa7f 	bl	b7802 <_ZN5Print7printlnEv>
      display.println("Distance(in): ");
   b4304:	4981      	ldr	r1, [pc, #516]	; (b450c <loop+0x2d4>)
   b4306:	4620      	mov	r0, r4
   b4308:	f003 fa87 	bl	b781a <_ZN5Print7printlnEPKc>
      display.println(range_in); // Distance (in)
   b430c:	2102      	movs	r1, #2
   b430e:	eeb0 0a48 	vmov.f32	s0, s16
   b4312:	4620      	mov	r0, r4
   b4314:	f003 fb8c 	bl	b7a30 <_ZN5Print7printlnEfi>
      display.display();
   b4318:	4620      	mov	r0, r4
   b431a:	f002 fd49 	bl	b6db0 <_ZN16Adafruit_SSD13067displayEv>
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b431e:	4c7c      	ldr	r4, [pc, #496]	; (b4510 <loop+0x2d8>)
    Print() : write_error(0) {}
   b4320:	9706      	str	r7, [sp, #24]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4326:	9307      	str	r3, [sp, #28]
  File() {}
   b4328:	4b7a      	ldr	r3, [pc, #488]	; (b4514 <loop+0x2dc>)
   b432a:	9305      	str	r3, [sp, #20]
   b432c:	f504 6a8c 	add.w	sl, r4, #1120	; 0x460
   b4330:	4b79      	ldr	r3, [pc, #484]	; (b4518 <loop+0x2e0>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4332:	9709      	str	r7, [sp, #36]	; 0x24
   b4334:	9301      	str	r3, [sp, #4]
   b4336:	f88d 7008 	strb.w	r7, [sp, #8]
   b433a:	ab01      	add	r3, sp, #4
   b433c:	2701      	movs	r7, #1
   b433e:	2205      	movs	r2, #5
   b4340:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   b4344:	4650      	mov	r0, sl
   b4346:	f8cd b00c 	str.w	fp, [sp, #12]
   b434a:	f8ad 7010 	strh.w	r7, [sp, #16]
   b434e:	f001 ff3d 	bl	b61cc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b4352:	b358      	cbz	r0, b43ac <loop+0x174>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   b4354:	f8c4 a000 	str.w	sl, [r4]
    vwd()->close();
   b4358:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   b435c:	f001 fba6 	bl	b5aac <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b4360:	4639      	mov	r1, r7
   b4362:	4620      	mov	r0, r4
   b4364:	f001 fddc 	bl	b5f20 <_ZN9FatVolume4initEh>
   b4368:	f204 473c 	addw	r7, r4, #1084	; 0x43c
   b436c:	4601      	mov	r1, r0
   b436e:	b1c0      	cbz	r0, b43a2 <loop+0x16a>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b4370:	4967      	ldr	r1, [pc, #412]	; (b4510 <loop+0x2d8>)
   b4372:	f201 403c 	addw	r0, r1, #1084	; 0x43c
   b4376:	f001 f9d0 	bl	b571a <_ZN7FatFile8openRootEP9FatVolume>
   b437a:	b1b8      	cbz	r0, b43ac <loop+0x174>
    if (!dir->isDir()) {
   b437c:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b4380:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4384:	d012      	beq.n	b43ac <loop+0x174>
    m_cwd = dir;
   b4386:	4b65      	ldr	r3, [pc, #404]	; (b451c <loop+0x2e4>)
    return open(m_cwd, path, oflag);
   b4388:	4a65      	ldr	r2, [pc, #404]	; (b4520 <loop+0x2e8>)
    m_cwd = dir;
   b438a:	601f      	str	r7, [r3, #0]
    return open(m_cwd, path, oflag);
   b438c:	4965      	ldr	r1, [pc, #404]	; (b4524 <loop+0x2ec>)
   b438e:	f244 2302 	movw	r3, #16898	; 0x4202
   b4392:	a809      	add	r0, sp, #36	; 0x24
   b4394:	f001 fb91 	bl	b5aba <_ZN7FatFile4openEPS_PKci>
      if (!myFile.open("distance.txt", O_RDWR | O_CREAT | O_AT_END)) {
   b4398:	b970      	cbnz	r0, b43b8 <loop+0x180>
        Serial.println("opening test.txt for write failed");
   b439a:	f003 fd6b 	bl	b7e74 <_Z16_fetch_usbserialv>
   b439e:	4962      	ldr	r1, [pc, #392]	; (b4528 <loop+0x2f0>)
   b43a0:	e007      	b.n	b43b2 <loop+0x17a>
    return (part ? init(part) : init(1) || init(0))
   b43a2:	4620      	mov	r0, r4
   b43a4:	f001 fdbc 	bl	b5f20 <_ZN9FatVolume4initEh>
   b43a8:	2800      	cmp	r0, #0
   b43aa:	d1e1      	bne.n	b4370 <loop+0x138>
        Serial.println("failed to open card");
   b43ac:	f003 fd62 	bl	b7e74 <_Z16_fetch_usbserialv>
   b43b0:	495e      	ldr	r1, [pc, #376]	; (b452c <loop+0x2f4>)
        Serial.println("opening test.txt for write failed");
   b43b2:	f003 fa32 	bl	b781a <_ZN5Print7printlnEPKc>
        return;
   b43b6:	e74a      	b.n	b424e <loop+0x16>
      myFile.print(Time.now());
   b43b8:	f003 fbac 	bl	b7b14 <_ZN9TimeClass3nowEv>
   b43bc:	220a      	movs	r2, #10
   b43be:	4601      	mov	r1, r0
size_t Print::print(T n, int base)
   b43c0:	a805      	add	r0, sp, #20
   b43c2:	f7ff feb9 	bl	b4138 <_ZN5Print5printIlLi0EEEjT_i.part.0.isra.0>
      myFile.print(",");
   b43c6:	495a      	ldr	r1, [pc, #360]	; (b4530 <loop+0x2f8>)
   b43c8:	a805      	add	r0, sp, #20
   b43ca:	f003 fa13 	bl	b77f4 <_ZN5Print5printEPKc>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b43ce:	f002 fde1 	bl	b6f94 <HAL_Timer_Get_Milli_Seconds>
        return printNumber(val, base) + t;
   b43d2:	220a      	movs	r2, #10
   b43d4:	4601      	mov	r1, r0
   b43d6:	a805      	add	r0, sp, #20
   b43d8:	f003 fa29 	bl	b782e <_ZN5Print11printNumberEmh>
      myFile.print(",");
   b43dc:	4954      	ldr	r1, [pc, #336]	; (b4530 <loop+0x2f8>)
   b43de:	a805      	add	r0, sp, #20
   b43e0:	f003 fa08 	bl	b77f4 <_ZN5Print5printEPKc>
      myFile.println(range_in);
   b43e4:	2102      	movs	r1, #2
   b43e6:	eeb0 0a48 	vmov.f32	s0, s16
   b43ea:	a805      	add	r0, sp, #20
   b43ec:	f003 fb20 	bl	b7a30 <_ZN5Print7printlnEfi>
      myFile.close();
   b43f0:	a809      	add	r0, sp, #36	; 0x24
   b43f2:	f001 fb5b 	bl	b5aac <_ZN7FatFile5closeEv>
      delay(100);
   b43f6:	2064      	movs	r0, #100	; 0x64
   b43f8:	f003 fba6 	bl	b7b48 <delay>
    for(j=0; j<100; j++){
   b43fc:	6833      	ldr	r3, [r6, #0]
   b43fe:	3301      	adds	r3, #1
   b4400:	6033      	str	r3, [r6, #0]
   b4402:	e734      	b.n	b426e <loop+0x36>
    dist_in_avg = dist_in_sum/j;
   b4404:	ee07 3a90 	vmov	s15, r3
   b4408:	edd5 6a00 	vldr	s13, [r5]
   b440c:	4c49      	ldr	r4, [pc, #292]	; (b4534 <loop+0x2fc>)
   b440e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   b4416:	ed84 7a00 	vstr	s14, [r4]
    Serial.print(j);
   b441a:	f003 fd2b 	bl	b7e74 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   b441e:	220a      	movs	r2, #10
   b4420:	6831      	ldr	r1, [r6, #0]
   b4422:	f7ff fe89 	bl	b4138 <_ZN5Print5printIlLi0EEEjT_i.part.0.isra.0>
    Serial.print(",");
   b4426:	f003 fd25 	bl	b7e74 <_Z16_fetch_usbserialv>
   b442a:	4941      	ldr	r1, [pc, #260]	; (b4530 <loop+0x2f8>)
   b442c:	f003 f9e2 	bl	b77f4 <_ZN5Print5printEPKc>
    Serial.print(dist_in_sum);
   b4430:	f003 fd20 	bl	b7e74 <_Z16_fetch_usbserialv>
   b4434:	ed95 0a00 	vldr	s0, [r5]
   b4438:	2102      	movs	r1, #2
   b443a:	f003 fadf 	bl	b79fc <_ZN5Print5printEfi>
    Serial.print(",");
   b443e:	f003 fd19 	bl	b7e74 <_Z16_fetch_usbserialv>
   b4442:	493b      	ldr	r1, [pc, #236]	; (b4530 <loop+0x2f8>)
   b4444:	f003 f9d6 	bl	b77f4 <_ZN5Print5printEPKc>
    Serial.println(dist_in_avg);
   b4448:	f003 fd14 	bl	b7e74 <_Z16_fetch_usbserialv>
   b444c:	ed94 0a00 	vldr	s0, [r4]
   b4450:	2102      	movs	r1, #2
   b4452:	f003 faed 	bl	b7a30 <_ZN5Print7printlnEfi>
   b4456:	f002 fd9d 	bl	b6f94 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b445a:	4b37      	ldr	r3, [pc, #220]	; (b4538 <loop+0x300>)
   b445c:	6018      	str	r0, [r3, #0]
  break;
   b445e:	e6f6      	b.n	b424e <loop+0x16>
    Serial.println("going to sleep");
   b4460:	f003 fd08 	bl	b7e74 <_Z16_fetch_usbserialv>
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b4464:	4c35      	ldr	r4, [pc, #212]	; (b453c <loop+0x304>)
   b4466:	4936      	ldr	r1, [pc, #216]	; (b4540 <loop+0x308>)
   b4468:	f003 f9d7 	bl	b781a <_ZN5Print7printlnEPKc>
    delay(500);
   b446c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4470:	f003 fb6a 	bl	b7b48 <delay>
   b4474:	7d23      	ldrb	r3, [r4, #20]
   b4476:	2b00      	cmp	r3, #0
   b4478:	d07d      	beq.n	b4576 <loop+0x33e>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b447a:	2302      	movs	r3, #2
   b447c:	7223      	strb	r3, [r4, #8]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b447e:	6823      	ldr	r3, [r4, #0]
   b4480:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b4482:	b1cb      	cbz	r3, b44b8 <loop+0x280>
            if (start->type == type) {
   b4484:	889a      	ldrh	r2, [r3, #4]
   b4486:	2a01      	cmp	r2, #1
   b4488:	d006      	beq.n	b4498 <loop+0x260>
            start = start->next;
   b448a:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b448c:	e7f9      	b.n	b4482 <loop+0x24a>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b448e:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b4490:	b193      	cbz	r3, b44b8 <loop+0x280>
            if (start->type == type) {
   b4492:	889a      	ldrh	r2, [r3, #4]
   b4494:	2a01      	cmp	r2, #1
   b4496:	d1fa      	bne.n	b448e <loop+0x256>
                if (gpioWakeup->pin == pin) {
   b4498:	899a      	ldrh	r2, [r3, #12]
   b449a:	2a02      	cmp	r2, #2
   b449c:	d1f7      	bne.n	b448e <loop+0x256>
                    gpioWakeup->mode = mode;
   b449e:	739a      	strb	r2, [r3, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b44a0:	7d23      	ldrb	r3, [r4, #20]
   b44a2:	2b00      	cmp	r3, #0
   b44a4:	d067      	beq.n	b4576 <loop+0x33e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b44a6:	6823      	ldr	r3, [r4, #0]
   b44a8:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b44aa:	2b00      	cmp	r3, #0
   b44ac:	d050      	beq.n	b4550 <loop+0x318>
            if (start->type == type) {
   b44ae:	889a      	ldrh	r2, [r3, #4]
   b44b0:	2a04      	cmp	r2, #4
   b44b2:	d074      	beq.n	b459e <loop+0x366>
            start = start->next;
   b44b4:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b44b6:	e7f8      	b.n	b44aa <loop+0x272>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b44b8:	4922      	ldr	r1, [pc, #136]	; (b4544 <loop+0x30c>)
   b44ba:	2010      	movs	r0, #16
   b44bc:	f003 fff8 	bl	b84b0 <_ZnwjRKSt9nothrow_t>
   b44c0:	4605      	mov	r5, r0
   b44c2:	2800      	cmp	r0, #0
   b44c4:	d06e      	beq.n	b45a4 <loop+0x36c>
   b44c6:	2210      	movs	r2, #16
   b44c8:	2100      	movs	r1, #0
   b44ca:	f004 fd1d 	bl	b8f08 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b44ce:	4b1e      	ldr	r3, [pc, #120]	; (b4548 <loop+0x310>)
   b44d0:	602b      	str	r3, [r5, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b44d2:	2301      	movs	r3, #1
   b44d4:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b44d6:	6923      	ldr	r3, [r4, #16]
   b44d8:	60ab      	str	r3, [r5, #8]
            wakeupSource->pin = pin;
   b44da:	2302      	movs	r3, #2
   b44dc:	81ab      	strh	r3, [r5, #12]
            wakeupSource->mode = mode;
   b44de:	73ab      	strb	r3, [r5, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b44e0:	6125      	str	r5, [r4, #16]
   b44e2:	e7dd      	b.n	b44a0 <loop+0x268>
   b44e4:	f3af 8000 	nop.w
   b44e8:	364d9365 	.word	0x364d9365
   b44ec:	406364d9 	.word	0x406364d9
   b44f0:	66666666 	.word	0x66666666
   b44f4:	3f4a6666 	.word	0x3f4a6666
   b44f8:	2003e66c 	.word	0x2003e66c
   b44fc:	2003e1dc 	.word	0x2003e1dc
   b4500:	2003e1e0 	.word	0x2003e1e0
   b4504:	2003e168 	.word	0x2003e168
   b4508:	000b90cb 	.word	0x000b90cb
   b450c:	000b90d2 	.word	0x000b90d2
   b4510:	2003e1e8 	.word	0x2003e1e8
   b4514:	000b9164 	.word	0x000b9164
   b4518:	000b9150 	.word	0x000b9150
   b451c:	2003e678 	.word	0x2003e678
   b4520:	000b90e1 	.word	0x000b90e1
   b4524:	2003e624 	.word	0x2003e624
   b4528:	000b9102 	.word	0x000b9102
   b452c:	000b90ee 	.word	0x000b90ee
   b4530:	000b9124 	.word	0x000b9124
   b4534:	2003e1d8 	.word	0x2003e1d8
   b4538:	2003e670 	.word	0x2003e670
   b453c:	2003e150 	.word	0x2003e150
   b4540:	000b9126 	.word	0x000b9126
   b4544:	000b9e14 	.word	0x000b9e14
   b4548:	00030010 	.word	0x00030010
   b454c:	02faf080 	.word	0x02faf080
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b4550:	4915      	ldr	r1, [pc, #84]	; (b45a8 <loop+0x370>)
   b4552:	2010      	movs	r0, #16
   b4554:	f003 ffac 	bl	b84b0 <_ZnwjRKSt9nothrow_t>
   b4558:	4605      	mov	r5, r0
   b455a:	b318      	cbz	r0, b45a4 <loop+0x36c>
   b455c:	2210      	movs	r2, #16
   b455e:	2100      	movs	r1, #0
   b4560:	f004 fcd2 	bl	b8f08 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b4564:	4b11      	ldr	r3, [pc, #68]	; (b45ac <loop+0x374>)
   b4566:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b4568:	2304      	movs	r3, #4
   b456a:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b456c:	6923      	ldr	r3, [r4, #16]
   b456e:	60ab      	str	r3, [r5, #8]
            wakeupSource->ms = ms;
   b4570:	4b0f      	ldr	r3, [pc, #60]	; (b45b0 <loop+0x378>)
   b4572:	60eb      	str	r3, [r5, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4574:	6125      	str	r5, [r4, #16]
    System.sleep(config);
   b4576:	a805      	add	r0, sp, #20
   b4578:	490e      	ldr	r1, [pc, #56]	; (b45b4 <loop+0x37c>)
   b457a:	f003 f8ab 	bl	b76d4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   b457e:	9805      	ldr	r0, [sp, #20]
   b4580:	b108      	cbz	r0, b4586 <loop+0x34e>
            free(wakeupSource_);
   b4582:	f002 ff45 	bl	b7410 <free>
    Serial.print("Feeling restless");
   b4586:	f003 fc75 	bl	b7e74 <_Z16_fetch_usbserialv>
   b458a:	490b      	ldr	r1, [pc, #44]	; (b45b8 <loop+0x380>)
   b458c:	f003 f932 	bl	b77f4 <_ZN5Print5printEPKc>
   b4590:	f002 fd00 	bl	b6f94 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b4594:	4b09      	ldr	r3, [pc, #36]	; (b45bc <loop+0x384>)
   b4596:	6018      	str	r0, [r3, #0]
    state = PUBLISH_STATE;
   b4598:	2300      	movs	r3, #0
   b459a:	7033      	strb	r3, [r6, #0]
  break;
   b459c:	e657      	b.n	b424e <loop+0x16>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b459e:	4a04      	ldr	r2, [pc, #16]	; (b45b0 <loop+0x378>)
   b45a0:	60da      	str	r2, [r3, #12]
                return *this;
   b45a2:	e7e8      	b.n	b4576 <loop+0x33e>
                valid_ = false;
   b45a4:	7525      	strb	r5, [r4, #20]
                return *this;
   b45a6:	e7e6      	b.n	b4576 <loop+0x33e>
   b45a8:	000b9e14 	.word	0x000b9e14
   b45ac:	00030010 	.word	0x00030010
   b45b0:	00360420 	.word	0x00360420
   b45b4:	2003e150 	.word	0x2003e150
   b45b8:	000b9135 	.word	0x000b9135
   b45bc:	2003e670 	.word	0x2003e670

000b45c0 <_GLOBAL__sub_I_sd>:
   b45c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SdFat() {
   b45c2:	4c27      	ldr	r4, [pc, #156]	; (b4660 <_GLOBAL__sub_I_sd+0xa0>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b45c4:	4d27      	ldr	r5, [pc, #156]	; (b4664 <_GLOBAL__sub_I_sd+0xa4>)
   b45c6:	2264      	movs	r2, #100	; 0x64
   b45c8:	f8c4 2460 	str.w	r2, [r4, #1120]	; 0x460
  {
   b45cc:	4a26      	ldr	r2, [pc, #152]	; (b4668 <_GLOBAL__sub_I_sd+0xa8>)
   b45ce:	f8c4 2470 	str.w	r2, [r4, #1136]	; 0x470
   b45d2:	2300      	movs	r3, #0
   b45d4:	2201      	movs	r2, #1
   b45d6:	6063      	str	r3, [r4, #4]
   b45d8:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
   b45dc:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
   b45e0:	f884 2474 	strb.w	r2, [r4, #1140]	; 0x474
   b45e4:	f8c4 3478 	str.w	r3, [r4, #1144]	; 0x478
   b45e8:	f8a4 347c 	strh.w	r3, [r4, #1148]	; 0x47c
   b45ec:	7829      	ldrb	r1, [r5, #0]
   b45ee:	f3bf 8f5b 	dmb	ish
   b45f2:	4011      	ands	r1, r2
   b45f4:	d10b      	bne.n	b460e <_GLOBAL__sub_I_sd+0x4e>
   b45f6:	4628      	mov	r0, r5
   b45f8:	9101      	str	r1, [sp, #4]
   b45fa:	f7ff fd5f 	bl	b40bc <__cxa_guard_acquire>
   b45fe:	9901      	ldr	r1, [sp, #4]
   b4600:	b128      	cbz	r0, b460e <_GLOBAL__sub_I_sd+0x4e>
   b4602:	481a      	ldr	r0, [pc, #104]	; (b466c <_GLOBAL__sub_I_sd+0xac>)
   b4604:	f002 ff78 	bl	b74f8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4608:	4628      	mov	r0, r5
   b460a:	f7ff fd5c 	bl	b40c6 <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b460e:	4b17      	ldr	r3, [pc, #92]	; (b466c <_GLOBAL__sub_I_sd+0xac>)
   b4610:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
OledWingAdafruit display;
   b4614:	2107      	movs	r1, #7
   b4616:	4816      	ldr	r0, [pc, #88]	; (b4670 <_GLOBAL__sub_I_sd+0xb0>)
   b4618:	f000 fc36 	bl	b4e88 <_ZN16OledWingAdafruitC1Ei>
              error_(SYSTEM_ERROR_NONE) {
   b461c:	4b15      	ldr	r3, [pc, #84]	; (b4674 <_GLOBAL__sub_I_sd+0xb4>)
    SleepResult() {}
   b461e:	4a16      	ldr	r2, [pc, #88]	; (b4678 <_GLOBAL__sub_I_sd+0xb8>)
   b4620:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4622:	2400      	movs	r4, #0
   b4624:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4628:	2002      	movs	r0, #2
   b462a:	f002 fe2b 	bl	b7284 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b462e:	4621      	mov	r1, r4
   b4630:	2001      	movs	r0, #1
   b4632:	f002 fe37 	bl	b72a4 <system_thread_set_state>
FuelGauge batteryMonitor;
   b4636:	4621      	mov	r1, r4
   b4638:	4810      	ldr	r0, [pc, #64]	; (b467c <_GLOBAL__sub_I_sd+0xbc>)
   b463a:	f003 fa9b 	bl	b7b74 <_ZN9FuelGaugeC1Eb>
PMIC pmic;
   b463e:	4621      	mov	r1, r4
   b4640:	480f      	ldr	r0, [pc, #60]	; (b4680 <_GLOBAL__sub_I_sd+0xc0>)
   b4642:	f002 ff0c 	bl	b745e <_ZN4PMICC1Eb>
        : config_(config) {
   b4646:	4b0f      	ldr	r3, [pc, #60]	; (b4684 <_GLOBAL__sub_I_sd+0xc4>)
   b4648:	1d1a      	adds	r2, r3, #4
   b464a:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b464c:	4a0e      	ldr	r2, [pc, #56]	; (b4688 <_GLOBAL__sub_I_sd+0xc8>)
   b464e:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b4650:	2201      	movs	r2, #1
   b4652:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b4656:	611c      	str	r4, [r3, #16]
   b4658:	751a      	strb	r2, [r3, #20]
   b465a:	b003      	add	sp, #12
   b465c:	bd30      	pop	{r4, r5, pc}
   b465e:	bf00      	nop
   b4660:	2003e1e8 	.word	0x2003e1e8
   b4664:	2003e130 	.word	0x2003e130
   b4668:	000b9150 	.word	0x000b9150
   b466c:	2003e134 	.word	0x2003e134
   b4670:	2003e168 	.word	0x2003e168
   b4674:	2003e13c 	.word	0x2003e13c
   b4678:	ffff0000 	.word	0xffff0000
   b467c:	2003e148 	.word	0x2003e148
   b4680:	2003e1e4 	.word	0x2003e1e4
   b4684:	2003e150 	.word	0x2003e150
   b4688:	00030010 	.word	0x00030010

000b468c <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b468c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4690:	b085      	sub	sp, #20
   b4692:	461f      	mov	r7, r3
   b4694:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4698:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b469c:	eba8 0902 	sub.w	r9, r8, r2
   b46a0:	eba7 0a01 	sub.w	sl, r7, r1
   b46a4:	f1b9 0f00 	cmp.w	r9, #0
   b46a8:	bfb8      	it	lt
   b46aa:	f1c9 0900 	rsblt	r9, r9, #0
   b46ae:	f1ba 0f00 	cmp.w	sl, #0
   b46b2:	bfb8      	it	lt
   b46b4:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b46b8:	45d1      	cmp	r9, sl
        uint16_t color) {
   b46ba:	4683      	mov	fp, r0
   b46bc:	460c      	mov	r4, r1
   b46be:	4615      	mov	r5, r2
    if (steep) {
   b46c0:	dd04      	ble.n	b46cc <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b46c2:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b46c4:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b46c6:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b46c8:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b46ca:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b46cc:	42bc      	cmp	r4, r7
   b46ce:	dd05      	ble.n	b46dc <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b46d0:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b46d2:	4645      	mov	r5, r8
   b46d4:	4690      	mov	r8, r2
    if (x0 > x1) {
   b46d6:	4622      	mov	r2, r4
   b46d8:	463c      	mov	r4, r7
   b46da:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b46dc:	1b3e      	subs	r6, r7, r4
   b46de:	b2b2      	uxth	r2, r6
   b46e0:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b46e2:	eba8 0205 	sub.w	r2, r8, r5
   b46e6:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b46ea:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b46ee:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b46f2:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b46f6:	4545      	cmp	r5, r8
   b46f8:	bfb4      	ite	lt
   b46fa:	2201      	movlt	r2, #1
   b46fc:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b4700:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b4702:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b4704:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b4706:	42bc      	cmp	r4, r7
   b4708:	dc1c      	bgt.n	b4744 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b470a:	f8db 2000 	ldr.w	r2, [fp]
   b470e:	9303      	str	r3, [sp, #12]
        if (steep) {
   b4710:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b4712:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b4716:	bfc7      	ittee	gt
   b4718:	4629      	movgt	r1, r5
   b471a:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b471c:	462a      	movle	r2, r5
   b471e:	4621      	movle	r1, r4
   b4720:	4658      	mov	r0, fp
   b4722:	47c0      	blx	r8
        }
        err -= dy;
   b4724:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b4726:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b4728:	1ab6      	subs	r6, r6, r2
   b472a:	b2b1      	uxth	r1, r6
   b472c:	b236      	sxth	r6, r6
        if (err < 0) {
   b472e:	2e00      	cmp	r6, #0
   b4730:	da05      	bge.n	b473e <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b4732:	9a02      	ldr	r2, [sp, #8]
   b4734:	4415      	add	r5, r2
            err += dx;
   b4736:	9a00      	ldr	r2, [sp, #0]
   b4738:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b473a:	b22d      	sxth	r5, r5
            err += dx;
   b473c:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b473e:	3401      	adds	r4, #1
   b4740:	b224      	sxth	r4, r4
   b4742:	e7e0      	b.n	b4706 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b4744:	b005      	add	sp, #20
   b4746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b474a <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b474a:	4770      	bx	lr

000b474c <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b474c:	b410      	push	{r4}
    drawPixel(x, y, color);
   b474e:	6804      	ldr	r4, [r0, #0]
   b4750:	6924      	ldr	r4, [r4, #16]
   b4752:	46a4      	mov	ip, r4
}
   b4754:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b4758:	4760      	bx	ip

000b475a <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b475a:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b475c:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b475e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b4762:	9502      	str	r5, [sp, #8]
   b4764:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b4766:	46a4      	mov	ip, r4
}
   b4768:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b476a:	4760      	bx	ip

000b476c <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b476c:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b476e:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b4770:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b4774:	9502      	str	r5, [sp, #8]
   b4776:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b4778:	46a4      	mov	ip, r4
}
   b477a:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b477c:	4760      	bx	ip

000b477e <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b477e:	b470      	push	{r4, r5, r6}
   b4780:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b4784:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b4788:	6804      	ldr	r4, [r0, #0]
   b478a:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b478e:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b4790:	46a4      	mov	ip, r4
}
   b4792:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b4794:	4760      	bx	ip

000b4796 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4796:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b479a:	461c      	mov	r4, r3
    startWrite();
   b479c:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b479e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b47a2:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b47a4:	4605      	mov	r5, r0
   b47a6:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b47a8:	3c01      	subs	r4, #1
   b47aa:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b47ac:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b47ae:	b224      	sxth	r4, r4
    startWrite();
   b47b0:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b47b2:	682b      	ldr	r3, [r5, #0]
   b47b4:	f8cd 8004 	str.w	r8, [sp, #4]
   b47b8:	9400      	str	r4, [sp, #0]
   b47ba:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b47bc:	4628      	mov	r0, r5
   b47be:	463b      	mov	r3, r7
   b47c0:	4632      	mov	r2, r6
   b47c2:	4639      	mov	r1, r7
   b47c4:	47a0      	blx	r4
    endWrite();
   b47c6:	682b      	ldr	r3, [r5, #0]
   b47c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b47ca:	4628      	mov	r0, r5
}
   b47cc:	b002      	add	sp, #8
   b47ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b47d2:	4718      	bx	r3

000b47d4 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b47d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b47d8:	461d      	mov	r5, r3
    startWrite();
   b47da:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b47dc:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b47e0:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b47e2:	4604      	mov	r4, r0
   b47e4:	4617      	mov	r7, r2
   b47e6:	460e      	mov	r6, r1
    startWrite();
   b47e8:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b47ea:	e9cd 7800 	strd	r7, r8, [sp]
   b47ee:	6822      	ldr	r2, [r4, #0]
   b47f0:	1e6b      	subs	r3, r5, #1
   b47f2:	4433      	add	r3, r6
   b47f4:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b47f6:	4620      	mov	r0, r4
   b47f8:	b21b      	sxth	r3, r3
   b47fa:	463a      	mov	r2, r7
   b47fc:	4631      	mov	r1, r6
   b47fe:	47a8      	blx	r5
    endWrite();
   b4800:	6823      	ldr	r3, [r4, #0]
   b4802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4804:	4620      	mov	r0, r4
}
   b4806:	b002      	add	sp, #8
   b4808:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b480c:	4718      	bx	r3

000b480e <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b480e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4812:	461e      	mov	r6, r3
    startWrite();
   b4814:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4816:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b481a:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b481c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4820:	460c      	mov	r4, r1
   b4822:	4605      	mov	r5, r0
   b4824:	4617      	mov	r7, r2
    startWrite();
   b4826:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b4828:	4426      	add	r6, r4
   b482a:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b482c:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b482e:	da0b      	bge.n	b4848 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b4830:	f8cd 8000 	str.w	r8, [sp]
   b4834:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4838:	4621      	mov	r1, r4
   b483a:	464b      	mov	r3, r9
   b483c:	463a      	mov	r2, r7
   b483e:	4628      	mov	r0, r5
   b4840:	3401      	adds	r4, #1
   b4842:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b4844:	b224      	sxth	r4, r4
   b4846:	e7f0      	b.n	b482a <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b4848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b484a:	4628      	mov	r0, r5
}
   b484c:	b002      	add	sp, #8
   b484e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4852:	4718      	bx	r3

000b4854 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b4854:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b4856:	6802      	ldr	r2, [r0, #0]
   b4858:	9101      	str	r1, [sp, #4]
   b485a:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b485e:	9100      	str	r1, [sp, #0]
   b4860:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b4862:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4866:	2200      	movs	r2, #0
   b4868:	4611      	mov	r1, r2
   b486a:	47a0      	blx	r4
}
   b486c:	b002      	add	sp, #8
   b486e:	bd10      	pop	{r4, pc}

000b4870 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4870:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b4874:	4299      	cmp	r1, r3
        uint16_t color) {
   b4876:	4616      	mov	r6, r2
   b4878:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b487c:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4880:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b4882:	4680      	mov	r8, r0
   b4884:	460d      	mov	r5, r1
   b4886:	461c      	mov	r4, r3
    if(x0 == x1){
   b4888:	d113      	bne.n	b48b2 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b488a:	42be      	cmp	r6, r7
   b488c:	bfc8      	it	gt
   b488e:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4890:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4894:	bfc4      	itt	gt
   b4896:	463e      	movgt	r6, r7
   b4898:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b489a:	1c7b      	adds	r3, r7, #1
   b489c:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b489e:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b48a0:	b21b      	sxth	r3, r3
   b48a2:	4632      	mov	r2, r6
   b48a4:	4629      	mov	r1, r5
   b48a6:	4640      	mov	r0, r8
   b48a8:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b48aa:	b003      	add	sp, #12
   b48ac:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b48b0:	4760      	bx	ip
    } else if(y0 == y1){
   b48b2:	42be      	cmp	r6, r7
   b48b4:	d10a      	bne.n	b48cc <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b48b6:	4299      	cmp	r1, r3
   b48b8:	bfc2      	ittt	gt
   b48ba:	460b      	movgt	r3, r1
   b48bc:	4625      	movgt	r5, r4
   b48be:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b48c0:	1c63      	adds	r3, r4, #1
   b48c2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b48c6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b48c8:	1b5b      	subs	r3, r3, r5
   b48ca:	e7e9      	b.n	b48a0 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b48cc:	6953      	ldr	r3, [r2, #20]
   b48ce:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b48d0:	e9cd 7900 	strd	r7, r9, [sp]
   b48d4:	f8d8 3000 	ldr.w	r3, [r8]
   b48d8:	4640      	mov	r0, r8
   b48da:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b48dc:	4632      	mov	r2, r6
   b48de:	4623      	mov	r3, r4
   b48e0:	4629      	mov	r1, r5
   b48e2:	47b8      	blx	r7
        endWrite();
   b48e4:	f8d8 3000 	ldr.w	r3, [r8]
   b48e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b48ea:	4640      	mov	r0, r8
}
   b48ec:	b003      	add	sp, #12
   b48ee:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b48f2:	4718      	bx	r3

000b48f4 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b48f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b48f8:	461d      	mov	r5, r3
    startWrite();
   b48fa:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b48fc:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b4900:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4902:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b4906:	4604      	mov	r4, r0
   b4908:	460f      	mov	r7, r1
   b490a:	4616      	mov	r6, r2
    startWrite();
   b490c:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b490e:	6823      	ldr	r3, [r4, #0]
   b4910:	f8cd 8000 	str.w	r8, [sp]
   b4914:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4918:	4632      	mov	r2, r6
   b491a:	462b      	mov	r3, r5
   b491c:	4639      	mov	r1, r7
   b491e:	4620      	mov	r0, r4
   b4920:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b4922:	6823      	ldr	r3, [r4, #0]
   b4924:	f8cd 8000 	str.w	r8, [sp]
   b4928:	f109 32ff 	add.w	r2, r9, #4294967295
   b492c:	4432      	add	r2, r6
   b492e:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4932:	4639      	mov	r1, r7
   b4934:	462b      	mov	r3, r5
   b4936:	4620      	mov	r0, r4
   b4938:	b212      	sxth	r2, r2
   b493a:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b493c:	6823      	ldr	r3, [r4, #0]
   b493e:	f8cd 8000 	str.w	r8, [sp]
   b4942:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4946:	4632      	mov	r2, r6
   b4948:	464b      	mov	r3, r9
   b494a:	4639      	mov	r1, r7
   b494c:	4620      	mov	r0, r4
   b494e:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b4950:	1e6b      	subs	r3, r5, #1
   b4952:	19d9      	adds	r1, r3, r7
   b4954:	6823      	ldr	r3, [r4, #0]
   b4956:	f8cd 8000 	str.w	r8, [sp]
   b495a:	6a1d      	ldr	r5, [r3, #32]
   b495c:	4620      	mov	r0, r4
   b495e:	464b      	mov	r3, r9
   b4960:	4632      	mov	r2, r6
   b4962:	b209      	sxth	r1, r1
   b4964:	47a8      	blx	r5
    endWrite();
   b4966:	6823      	ldr	r3, [r4, #0]
   b4968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b496a:	4620      	mov	r0, r4
}
   b496c:	b002      	add	sp, #8
   b496e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4972:	4718      	bx	r3

000b4974 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b4974:	4770      	bx	lr

000b4976 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b4976:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b497a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b497e:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b4980:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b4982:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b4986:	bf59      	ittee	pl
   b4988:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b498a:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b498c:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b498e:	81c3      	strhmi	r3, [r0, #14]
}
   b4990:	4770      	bx	lr
	...

000b4994 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b4994:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b4996:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b4998:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b499a:	4a07      	ldr	r2, [pc, #28]	; (b49b8 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b499c:	4d07      	ldr	r5, [pc, #28]	; (b49bc <_ZN12Adafruit_GFXC1Ess+0x28>)
   b499e:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b49a0:	2400      	movs	r4, #0
    _width    = WIDTH;
   b49a2:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b49a4:	f04f 31ff 	mov.w	r1, #4294967295
   b49a8:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b49ac:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b49ae:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b49b0:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b49b2:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b49b4:	6204      	str	r4, [r0, #32]
}
   b49b6:	bd30      	pop	{r4, r5, pc}
   b49b8:	01000101 	.word	0x01000101
   b49bc:	000b968c 	.word	0x000b968c

000b49c0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b49c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b49c4:	b089      	sub	sp, #36	; 0x24
   b49c6:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b49ca:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b49cc:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b49d0:	9304      	str	r3, [sp, #16]
   b49d2:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b49d6:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b49d8:	9305      	str	r3, [sp, #20]
   b49da:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b49de:	4604      	mov	r4, r0
    startWrite();
   b49e0:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b49e2:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b49e6:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b49ea:	bf48      	it	mi
   b49ec:	f108 020e 	addmi.w	r2, r8, #14
   b49f0:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b49f4:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b49f6:	4635      	mov	r5, r6
   b49f8:	9b03      	ldr	r3, [sp, #12]
   b49fa:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b49fc:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b4a00:	189a      	adds	r2, r3, r2
   b4a02:	9b05      	ldr	r3, [sp, #20]
   b4a04:	428b      	cmp	r3, r1
   b4a06:	b212      	sxth	r2, r2
   b4a08:	dd27      	ble.n	b4a5a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4a0a:	9b04      	ldr	r3, [sp, #16]
   b4a0c:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b4a0e:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4a12:	9306      	str	r3, [sp, #24]
   b4a14:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b4a18:	4580      	cmp	r8, r0
   b4a1a:	fa1f f189 	uxth.w	r1, r9
   b4a1e:	dd17      	ble.n	b4a50 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b4a20:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4a22:	bf05      	ittet	eq
   b4a24:	9b06      	ldreq	r3, [sp, #24]
   b4a26:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b4a28:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4a2a:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b4a2c:	bf18      	it	ne
   b4a2e:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b4a30:	062b      	lsls	r3, r5, #24
   b4a32:	d50a      	bpl.n	b4a4a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b4a34:	9b02      	ldr	r3, [sp, #8]
   b4a36:	6820      	ldr	r0, [r4, #0]
   b4a38:	9207      	str	r2, [sp, #28]
   b4a3a:	4419      	add	r1, r3
   b4a3c:	6983      	ldr	r3, [r0, #24]
   b4a3e:	b209      	sxth	r1, r1
   b4a40:	461f      	mov	r7, r3
   b4a42:	4620      	mov	r0, r4
   b4a44:	4653      	mov	r3, sl
   b4a46:	47b8      	blx	r7
   b4a48:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b4a4a:	f109 0901 	add.w	r9, r9, #1
   b4a4e:	e7e1      	b.n	b4a14 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b4a50:	9b01      	ldr	r3, [sp, #4]
   b4a52:	3301      	adds	r3, #1
   b4a54:	9301      	str	r3, [sp, #4]
   b4a56:	445e      	add	r6, fp
   b4a58:	e7ce      	b.n	b49f8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b4a5a:	6823      	ldr	r3, [r4, #0]
   b4a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4a5e:	4620      	mov	r0, r4
}
   b4a60:	b009      	add	sp, #36	; 0x24
   b4a62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b4a66:	4718      	bx	r3

000b4a68 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b4a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4a6c:	ed2d 8b02 	vpush	{d8}
   b4a70:	b091      	sub	sp, #68	; 0x44
   b4a72:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b4a74:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b4a76:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b4a7a:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b4a7e:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b4a82:	9103      	str	r1, [sp, #12]
   b4a84:	461f      	mov	r7, r3
   b4a86:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b4a8a:	9304      	str	r3, [sp, #16]
   b4a8c:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b4a8e:	2a00      	cmp	r2, #0
   b4a90:	f040 80c5 	bne.w	b4c1e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b4a94:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4a98:	428b      	cmp	r3, r1
   b4a9a:	f340 814c 	ble.w	b4d36 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b4a9e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b4aa2:	42b3      	cmp	r3, r6
   b4aa4:	f340 8147 	ble.w	b4d36 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b4aa8:	2306      	movs	r3, #6
   b4aaa:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b4aae:	2b00      	cmp	r3, #0
   b4ab0:	f340 8141 	ble.w	b4d36 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b4ab4:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b4ab8:	2b00      	cmp	r3, #0
   b4aba:	f340 813c 	ble.w	b4d36 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b4abe:	7f03      	ldrb	r3, [r0, #28]
   b4ac0:	b91b      	cbnz	r3, b4aca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b4ac2:	2faf      	cmp	r7, #175	; 0xaf
   b4ac4:	bf84      	itt	hi
   b4ac6:	3701      	addhi	r7, #1
   b4ac8:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b4aca:	f8db 3000 	ldr.w	r3, [fp]
   b4ace:	4658      	mov	r0, fp
   b4ad0:	695b      	ldr	r3, [r3, #20]
   b4ad2:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b4ad4:	2205      	movs	r2, #5
   b4ad6:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b4ad8:	2200      	movs	r2, #0
   b4ada:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b4adc:	4a98      	ldr	r2, [pc, #608]	; (b4d40 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b4ade:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b4ae2:	18d3      	adds	r3, r2, r3
   b4ae4:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b4ae6:	b2b3      	uxth	r3, r6
   b4ae8:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b4aea:	9a05      	ldr	r2, [sp, #20]
   b4aec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4aee:	5c9b      	ldrb	r3, [r3, r2]
   b4af0:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4af2:	b2ab      	uxth	r3, r5
   b4af4:	930b      	str	r3, [sp, #44]	; 0x2c
   b4af6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b4afa:	9308      	str	r3, [sp, #32]
   b4afc:	9b03      	ldr	r3, [sp, #12]
   b4afe:	fb02 f905 	mul.w	r9, r2, r5
   b4b02:	fa19 f983 	uxtah	r9, r9, r3
   b4b06:	fa0f f389 	sxth.w	r3, r9
   b4b0a:	ee08 3a10 	vmov	s16, r3
   b4b0e:	2308      	movs	r3, #8
   b4b10:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b4b12:	9b03      	ldr	r3, [sp, #12]
   b4b14:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b4b18:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b4b1c:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b4b20:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b4b22:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b4b26:	07d2      	lsls	r2, r2, #31
   b4b28:	d552      	bpl.n	b4bd0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b4b2a:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b4b2c:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b4b30:	d13e      	bne.n	b4bb0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b4b32:	2c01      	cmp	r4, #1
   b4b34:	d13c      	bne.n	b4bb0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b4b36:	699b      	ldr	r3, [r3, #24]
   b4b38:	9906      	ldr	r1, [sp, #24]
   b4b3a:	461f      	mov	r7, r3
   b4b3c:	9b04      	ldr	r3, [sp, #16]
   b4b3e:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b4b40:	b212      	sxth	r2, r2
   b4b42:	4651      	mov	r1, sl
   b4b44:	4658      	mov	r0, fp
   b4b46:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b4b48:	f109 0301 	add.w	r3, r9, #1
   b4b4c:	fa4f f983 	sxtb.w	r9, r3
   b4b50:	9b07      	ldr	r3, [sp, #28]
   b4b52:	085b      	lsrs	r3, r3, #1
   b4b54:	9307      	str	r3, [sp, #28]
   b4b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4b58:	3b01      	subs	r3, #1
   b4b5a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4b5e:	930a      	str	r3, [sp, #40]	; 0x28
   b4b60:	d1de      	bne.n	b4b20 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b4b62:	9f05      	ldr	r7, [sp, #20]
   b4b64:	3701      	adds	r7, #1
   b4b66:	b27b      	sxtb	r3, r7
   b4b68:	9305      	str	r3, [sp, #20]
   b4b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4b6c:	3b01      	subs	r3, #1
   b4b6e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4b72:	9309      	str	r3, [sp, #36]	; 0x24
   b4b74:	d1b9      	bne.n	b4aea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b4b76:	9b04      	ldr	r3, [sp, #16]
   b4b78:	4543      	cmp	r3, r8
   b4b7a:	d00f      	beq.n	b4b9c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b4b7c:	2d01      	cmp	r5, #1
   b4b7e:	f8db 3000 	ldr.w	r3, [fp]
   b4b82:	d13b      	bne.n	b4bfc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b4b84:	2c01      	cmp	r4, #1
   b4b86:	d139      	bne.n	b4bfc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b4b88:	9908      	ldr	r1, [sp, #32]
   b4b8a:	f8cd 8000 	str.w	r8, [sp]
   b4b8e:	3105      	adds	r1, #5
   b4b90:	6a1c      	ldr	r4, [r3, #32]
   b4b92:	4632      	mov	r2, r6
   b4b94:	2308      	movs	r3, #8
   b4b96:	b209      	sxth	r1, r1
   b4b98:	4658      	mov	r0, fp
   b4b9a:	47a0      	blx	r4
        endWrite();
   b4b9c:	f8db 3000 	ldr.w	r3, [fp]
   b4ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4ba2:	4658      	mov	r0, fp
}
   b4ba4:	b011      	add	sp, #68	; 0x44
   b4ba6:	ecbd 8b02 	vpop	{d8}
   b4baa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b4bae:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b4bb0:	9906      	ldr	r1, [sp, #24]
   b4bb2:	fb14 f202 	smulbb	r2, r4, r2
   b4bb6:	440a      	add	r2, r1
   b4bb8:	9904      	ldr	r1, [sp, #16]
   b4bba:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4bbc:	9400      	str	r4, [sp, #0]
   b4bbe:	69db      	ldr	r3, [r3, #28]
   b4bc0:	ee18 1a10 	vmov	r1, s16
   b4bc4:	461f      	mov	r7, r3
   b4bc6:	b212      	sxth	r2, r2
   b4bc8:	462b      	mov	r3, r5
   b4bca:	4658      	mov	r0, fp
   b4bcc:	47b8      	blx	r7
   b4bce:	e7bb      	b.n	b4b48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b4bd0:	9a04      	ldr	r2, [sp, #16]
   b4bd2:	4542      	cmp	r2, r8
   b4bd4:	d0b8      	beq.n	b4b48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b4bd6:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b4bd8:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b4bdc:	d107      	bne.n	b4bee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b4bde:	2c01      	cmp	r4, #1
   b4be0:	d105      	bne.n	b4bee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b4be2:	699b      	ldr	r3, [r3, #24]
   b4be4:	9906      	ldr	r1, [sp, #24]
   b4be6:	461f      	mov	r7, r3
   b4be8:	440a      	add	r2, r1
   b4bea:	4643      	mov	r3, r8
   b4bec:	e7a8      	b.n	b4b40 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4bee:	9906      	ldr	r1, [sp, #24]
   b4bf0:	f8cd 8004 	str.w	r8, [sp, #4]
   b4bf4:	fb14 f202 	smulbb	r2, r4, r2
   b4bf8:	440a      	add	r2, r1
   b4bfa:	e7df      	b.n	b4bbc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b4bfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4bfe:	f8cd 8004 	str.w	r8, [sp, #4]
   b4c02:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b4c06:	9a08      	ldr	r2, [sp, #32]
   b4c08:	00e4      	lsls	r4, r4, #3
   b4c0a:	440a      	add	r2, r1
   b4c0c:	4611      	mov	r1, r2
   b4c0e:	9400      	str	r4, [sp, #0]
   b4c10:	69dc      	ldr	r4, [r3, #28]
   b4c12:	4632      	mov	r2, r6
   b4c14:	462b      	mov	r3, r5
   b4c16:	b209      	sxth	r1, r1
   b4c18:	4658      	mov	r0, fp
   b4c1a:	47a0      	blx	r4
        endWrite();
   b4c1c:	e7be      	b.n	b4b9c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b4c1e:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b4c20:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b4c22:	6812      	ldr	r2, [r2, #0]
   b4c24:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b4c26:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b4c28:	b2ff      	uxtb	r7, r7
   b4c2a:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b4c2e:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b4c32:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b4c34:	789a      	ldrb	r2, [r3, #2]
   b4c36:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b4c38:	78da      	ldrb	r2, [r3, #3]
   b4c3a:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b4c3c:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b4c3e:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b4c42:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b4c46:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b4c48:	d801      	bhi.n	b4c4e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b4c4a:	2c01      	cmp	r4, #1
   b4c4c:	d957      	bls.n	b4cfe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b4c4e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b4c52:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b4c54:	fa0f f38a 	sxth.w	r3, sl
   b4c58:	9307      	str	r3, [sp, #28]
        startWrite();
   b4c5a:	f8db 3000 	ldr.w	r3, [fp]
   b4c5e:	4658      	mov	r0, fp
   b4c60:	695b      	ldr	r3, [r3, #20]
   b4c62:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4c64:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b4c66:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4c6a:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4c6c:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b4c70:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b4c72:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4c74:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b4c76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4c78:	429f      	cmp	r7, r3
   b4c7a:	d28f      	bcs.n	b4b9c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4c7c:	9b07      	ldr	r3, [sp, #28]
   b4c7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b4c80:	443b      	add	r3, r7
   b4c82:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b4c86:	2200      	movs	r2, #0
   b4c88:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4c8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4c8c:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4c8e:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4c92:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4c96:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4c9a:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b4c9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b4c9e:	9905      	ldr	r1, [sp, #20]
   b4ca0:	4291      	cmp	r1, r2
   b4ca2:	d241      	bcs.n	b4d28 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b4ca4:	1c5a      	adds	r2, r3, #1
   b4ca6:	b2d2      	uxtb	r2, r2
   b4ca8:	075b      	lsls	r3, r3, #29
   b4caa:	920d      	str	r2, [sp, #52]	; 0x34
   b4cac:	d107      	bne.n	b4cbe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b4cae:	9b06      	ldr	r3, [sp, #24]
   b4cb0:	9906      	ldr	r1, [sp, #24]
   b4cb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4cb4:	3301      	adds	r3, #1
   b4cb6:	b29b      	uxth	r3, r3
   b4cb8:	f812 9001 	ldrb.w	r9, [r2, r1]
   b4cbc:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b4cbe:	f019 0f80 	tst.w	r9, #128	; 0x80
   b4cc2:	d012      	beq.n	b4cea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b4cc4:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4cc6:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4cca:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b4cce:	d11a      	bne.n	b4d06 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b4cd0:	2c01      	cmp	r4, #1
   b4cd2:	d118      	bne.n	b4d06 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4cd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b4cd6:	699b      	ldr	r3, [r3, #24]
   b4cd8:	4411      	add	r1, r2
   b4cda:	9a05      	ldr	r2, [sp, #20]
   b4cdc:	4411      	add	r1, r2
   b4cde:	461e      	mov	r6, r3
   b4ce0:	4652      	mov	r2, sl
   b4ce2:	9b04      	ldr	r3, [sp, #16]
   b4ce4:	b209      	sxth	r1, r1
   b4ce6:	4658      	mov	r0, fp
   b4ce8:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b4cea:	9e05      	ldr	r6, [sp, #20]
   b4cec:	3601      	adds	r6, #1
   b4cee:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b4cf0:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b4cf4:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b4cf6:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b4cfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b4cfc:	e7ce      	b.n	b4c9c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b4cfe:	2300      	movs	r3, #0
   b4d00:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b4d04:	e7a9      	b.n	b4c5a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4d06:	9805      	ldr	r0, [sp, #20]
   b4d08:	9a08      	ldr	r2, [sp, #32]
   b4d0a:	4402      	add	r2, r0
   b4d0c:	fb02 1105 	mla	r1, r2, r5, r1
   b4d10:	9a04      	ldr	r2, [sp, #16]
   b4d12:	e9cd 4200 	strd	r4, r2, [sp]
   b4d16:	69db      	ldr	r3, [r3, #28]
   b4d18:	ee18 2a10 	vmov	r2, s16
   b4d1c:	461e      	mov	r6, r3
   b4d1e:	b209      	sxth	r1, r1
   b4d20:	462b      	mov	r3, r5
   b4d22:	4658      	mov	r0, fp
   b4d24:	47b0      	blx	r6
   b4d26:	e7e0      	b.n	b4cea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b4d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b4d2a:	3701      	adds	r7, #1
   b4d2c:	4498      	add	r8, r3
   b4d2e:	fa5f f888 	uxtb.w	r8, r8
   b4d32:	b2ff      	uxtb	r7, r7
   b4d34:	e79f      	b.n	b4c76 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b4d36:	b011      	add	sp, #68	; 0x44
   b4d38:	ecbd 8b02 	vpop	{d8}
   b4d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4d40:	000b9184 	.word	0x000b9184

000b4d44 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b4d44:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b4d46:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b4d48:	b085      	sub	sp, #20
   b4d4a:	4604      	mov	r4, r0
   b4d4c:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b4d4e:	2a00      	cmp	r2, #0
   b4d50:	d134      	bne.n	b4dbc <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b4d52:	290a      	cmp	r1, #10
   b4d54:	d108      	bne.n	b4d68 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b4d56:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b4d58:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b4d5a:	7e42      	ldrb	r2, [r0, #25]
   b4d5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b4d60:	8263      	strh	r3, [r4, #18]
}
   b4d62:	2001      	movs	r0, #1
   b4d64:	b005      	add	sp, #20
   b4d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b4d68:	290d      	cmp	r1, #13
   b4d6a:	d0fa      	beq.n	b4d62 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4d6c:	7ee1      	ldrb	r1, [r4, #27]
   b4d6e:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b4d70:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4d72:	b171      	cbz	r1, b4d92 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b4d74:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b4d78:	2106      	movs	r1, #6
   b4d7a:	fb11 6100 	smlabb	r1, r1, r0, r6
   b4d7e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b4d82:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b4d84:	bfc1      	itttt	gt
   b4d86:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b4d8a:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b4d8c:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b4d90:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4d92:	8ae2      	ldrh	r2, [r4, #22]
   b4d94:	9201      	str	r2, [sp, #4]
   b4d96:	8aa2      	ldrh	r2, [r4, #20]
   b4d98:	9200      	str	r2, [sp, #0]
   b4d9a:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b4d9e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b4da2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4da6:	4620      	mov	r0, r4
   b4da8:	f7ff fe5e 	bl	b4a68 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b4dac:	7e23      	ldrb	r3, [r4, #24]
   b4dae:	8a22      	ldrh	r2, [r4, #16]
   b4db0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b4db4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b4db8:	8223      	strh	r3, [r4, #16]
   b4dba:	e7d2      	b.n	b4d62 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b4dbc:	290a      	cmp	r1, #10
   b4dbe:	d107      	bne.n	b4dd0 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b4dc0:	2300      	movs	r3, #0
   b4dc2:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b4dc4:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b4dc6:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b4dc8:	8a43      	ldrh	r3, [r0, #18]
   b4dca:	fb01 3302 	mla	r3, r1, r2, r3
   b4dce:	e7c7      	b.n	b4d60 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b4dd0:	290d      	cmp	r1, #13
   b4dd2:	d0c6      	beq.n	b4d62 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b4dd4:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b4dd6:	42a9      	cmp	r1, r5
   b4dd8:	d3c3      	bcc.n	b4d62 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b4dda:	7a51      	ldrb	r1, [r2, #9]
   b4ddc:	4299      	cmp	r1, r3
   b4dde:	d3c0      	bcc.n	b4d62 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b4de0:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b4de2:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b4de4:	b2ed      	uxtb	r5, r5
   b4de6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b4dea:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b4dec:	b328      	cbz	r0, b4e3a <_ZN12Adafruit_GFX5writeEh+0xf6>
   b4dee:	78e9      	ldrb	r1, [r5, #3]
   b4df0:	b319      	cbz	r1, b4e3a <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b4df2:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4df4:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b4df6:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b4df8:	b191      	cbz	r1, b4e20 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b4dfa:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b4dfe:	4408      	add	r0, r1
   b4e00:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4e04:	fb06 1100 	mla	r1, r6, r0, r1
   b4e08:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b4e0c:	4281      	cmp	r1, r0
   b4e0e:	dd07      	ble.n	b4e20 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b4e10:	2000      	movs	r0, #0
   b4e12:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b4e14:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b4e18:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b4e1a:	fb02 1207 	mla	r2, r2, r7, r1
   b4e1e:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4e20:	8ae2      	ldrh	r2, [r4, #22]
   b4e22:	9201      	str	r2, [sp, #4]
   b4e24:	8aa2      	ldrh	r2, [r4, #20]
   b4e26:	9200      	str	r2, [sp, #0]
   b4e28:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b4e2c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b4e30:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4e34:	4620      	mov	r0, r4
   b4e36:	f7ff fe17 	bl	b4a68 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b4e3a:	7929      	ldrb	r1, [r5, #4]
   b4e3c:	7e22      	ldrb	r2, [r4, #24]
   b4e3e:	8a23      	ldrh	r3, [r4, #16]
   b4e40:	fb01 3302 	mla	r3, r1, r2, r3
   b4e44:	e7b8      	b.n	b4db8 <_ZN12Adafruit_GFX5writeEh+0x74>

000b4e46 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b4e46:	2901      	cmp	r1, #1
   b4e48:	bf38      	it	cc
   b4e4a:	2101      	movcc	r1, #1
   b4e4c:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b4e4e:	7641      	strb	r1, [r0, #25]
}
   b4e50:	4770      	bx	lr
	...

000b4e54 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b4e54:	b510      	push	{r4, lr}
   b4e56:	4b06      	ldr	r3, [pc, #24]	; (b4e70 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b4e58:	6003      	str	r3, [r0, #0]
   b4e5a:	4604      	mov	r4, r0
	if (mutex) {
   b4e5c:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b4e5e:	b108      	cbz	r0, b4e64 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b4e60:	f002 f8b8 	bl	b6fd4 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b4e64:	4620      	mov	r0, r4
   b4e66:	f001 fbc3 	bl	b65f0 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b4e6a:	4620      	mov	r0, r4
   b4e6c:	bd10      	pop	{r4, pc}
   b4e6e:	bf00      	nop
   b4e70:	000b96e4 	.word	0x000b96e4

000b4e74 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b4e74:	b510      	push	{r4, lr}
   b4e76:	4604      	mov	r4, r0
}
   b4e78:	f7ff ffec 	bl	b4e54 <_ZN16OledWingAdafruitD1Ev>
   b4e7c:	4620      	mov	r0, r4
   b4e7e:	2170      	movs	r1, #112	; 0x70
   b4e80:	f7ff f90d 	bl	b409e <_ZdlPvj>
   b4e84:	4620      	mov	r0, r4
   b4e86:	bd10      	pop	{r4, pc}

000b4e88 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b4e88:	b530      	push	{r4, r5, lr}
   b4e8a:	b085      	sub	sp, #20
   b4e8c:	4604      	mov	r4, r0
   b4e8e:	460d      	mov	r5, r1
   b4e90:	f003 fac6 	bl	b8420 <_Z19__fetch_global_Wirev>
   b4e94:	4a10      	ldr	r2, [pc, #64]	; (b4ed8 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b4e96:	4911      	ldr	r1, [pc, #68]	; (b4edc <_ZN16OledWingAdafruitC1Ei+0x54>)
   b4e98:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b4e9c:	f04f 32ff 	mov.w	r2, #4294967295
   b4ea0:	2180      	movs	r1, #128	; 0x80
   b4ea2:	4603      	mov	r3, r0
   b4ea4:	9200      	str	r2, [sp, #0]
   b4ea6:	4620      	mov	r0, r4
   b4ea8:	2220      	movs	r2, #32
   b4eaa:	f001 fc19 	bl	b66e0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b4eae:	4b0c      	ldr	r3, [pc, #48]	; (b4ee0 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b4eb0:	6023      	str	r3, [r4, #0]
   b4eb2:	2300      	movs	r3, #0
   b4eb4:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b4eb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b4ebc:	f000 f854 	bl	b4f68 <_ZN8DebounceC1Ev>
   b4ec0:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b4ec4:	f000 f850 	bl	b4f68 <_ZN8DebounceC1Ev>
   b4ec8:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b4ecc:	f000 f84c 	bl	b4f68 <_ZN8DebounceC1Ev>
}
   b4ed0:	4620      	mov	r0, r4
   b4ed2:	b005      	add	sp, #20
   b4ed4:	bd30      	pop	{r4, r5, pc}
   b4ed6:	bf00      	nop
   b4ed8:	00061a80 	.word	0x00061a80
   b4edc:	000186a0 	.word	0x000186a0
   b4ee0:	000b96e4 	.word	0x000b96e4

000b4ee4 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b4ee4:	b513      	push	{r0, r1, r4, lr}
   b4ee6:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b4ee8:	3050      	adds	r0, #80	; 0x50
   b4eea:	f002 f86b 	bl	b6fc4 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b4eee:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b4ef0:	07d9      	lsls	r1, r3, #31
   b4ef2:	d505      	bpl.n	b4f00 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b4ef4:	2202      	movs	r2, #2
   b4ef6:	2104      	movs	r1, #4
   b4ef8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b4efc:	f000 f848 	bl	b4f90 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b4f00:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b4f02:	079a      	lsls	r2, r3, #30
   b4f04:	d505      	bpl.n	b4f12 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b4f06:	2200      	movs	r2, #0
   b4f08:	2103      	movs	r1, #3
   b4f0a:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b4f0e:	f000 f83f 	bl	b4f90 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b4f12:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b4f14:	075b      	lsls	r3, r3, #29
   b4f16:	d505      	bpl.n	b4f24 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b4f18:	2202      	movs	r2, #2
   b4f1a:	4611      	mov	r1, r2
   b4f1c:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b4f20:	f000 f836 	bl	b4f90 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b4f24:	2301      	movs	r3, #1
   b4f26:	9300      	str	r3, [sp, #0]
   b4f28:	223c      	movs	r2, #60	; 0x3c
   b4f2a:	2102      	movs	r1, #2
   b4f2c:	4620      	mov	r0, r4
   b4f2e:	f001 fcdf 	bl	b68f0 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b4f32:	b002      	add	sp, #8
   b4f34:	bd10      	pop	{r4, pc}

000b4f36 <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b4f36:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b4f38:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b4f3a:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b4f3c:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b4f3e:	d502      	bpl.n	b4f46 <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b4f40:	3058      	adds	r0, #88	; 0x58
   b4f42:	f000 f832 	bl	b4faa <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b4f46:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b4f48:	079a      	lsls	r2, r3, #30
   b4f4a:	d503      	bpl.n	b4f54 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b4f4c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b4f50:	f000 f82b 	bl	b4faa <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b4f54:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b4f56:	075b      	lsls	r3, r3, #29
   b4f58:	d505      	bpl.n	b4f66 <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b4f5a:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b4f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b4f62:	f000 b822 	b.w	b4faa <_ZN8Debounce6updateEv>
}
   b4f66:	bd10      	pop	{r4, pc}

000b4f68 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b4f68:	2100      	movs	r1, #0
   b4f6a:	220a      	movs	r2, #10
   b4f6c:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b4f70:	4770      	bx	lr

000b4f72 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b4f72:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b4f74:	b510      	push	{r4, lr}
   b4f76:	4604      	mov	r4, r0
    this->pin = pin;
   b4f78:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b4f7a:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b4f7c:	b288      	uxth	r0, r1
   b4f7e:	f003 f9b7 	bl	b82f0 <digitalRead>
   b4f82:	b108      	cbz	r0, b4f88 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b4f84:	2303      	movs	r3, #3
   b4f86:	71a3      	strb	r3, [r4, #6]
   b4f88:	f002 f804 	bl	b6f94 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b4f8c:	6020      	str	r0, [r4, #0]
#endif
}
   b4f8e:	bd10      	pop	{r4, pc}

000b4f90 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b4f90:	b538      	push	{r3, r4, r5, lr}
   b4f92:	460c      	mov	r4, r1
   b4f94:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b4f96:	4611      	mov	r1, r2
   b4f98:	b2a0      	uxth	r0, r4
   b4f9a:	f003 f97f 	bl	b829c <pinMode>
  
  this->attach(pin);
   b4f9e:	4621      	mov	r1, r4
   b4fa0:	4628      	mov	r0, r5
}
   b4fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b4fa6:	f7ff bfe4 	b.w	b4f72 <_ZN8Debounce6attachEi>

000b4faa <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b4faa:	b538      	push	{r3, r4, r5, lr}
   b4fac:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b4fae:	79c0      	ldrb	r0, [r0, #7]
   b4fb0:	f003 f99e 	bl	b82f0 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b4fb4:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b4fb6:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b4fb8:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b4fbc:	bf18      	it	ne
   b4fbe:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b4fc0:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b4fc4:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b4fc6:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b4fc8:	d00a      	beq.n	b4fe0 <_ZN8Debounce6updateEv+0x36>
   b4fca:	f001 ffe3 	bl	b6f94 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b4fce:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b4fd0:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b4fd2:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b4fd6:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b4fd8:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b4fda:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b4fde:	bd38      	pop	{r3, r4, r5, pc}
   b4fe0:	f001 ffd8 	bl	b6f94 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b4fe4:	6823      	ldr	r3, [r4, #0]
   b4fe6:	1ac0      	subs	r0, r0, r3
   b4fe8:	88a3      	ldrh	r3, [r4, #4]
   b4fea:	4298      	cmp	r0, r3
   b4fec:	d3f4      	bcc.n	b4fd8 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b4fee:	79a3      	ldrb	r3, [r4, #6]
   b4ff0:	f003 0301 	and.w	r3, r3, #1
   b4ff4:	42ab      	cmp	r3, r5
   b4ff6:	d0ef      	beq.n	b4fd8 <_ZN8Debounce6updateEv+0x2e>
   b4ff8:	f001 ffcc 	bl	b6f94 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b4ffc:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b4ffe:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b5000:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b5004:	f043 0308 	orr.w	r3, r3, #8
   b5008:	e7e5      	b.n	b4fd6 <_ZN8Debounce6updateEv+0x2c>

000b500a <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b500a:	2904      	cmp	r1, #4
   b500c:	d804      	bhi.n	b5018 <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b500e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b5012:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b5016:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b5018:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b501a:	bf9b      	ittet	ls
   b501c:	f101 31ff 	addls.w	r1, r1, #4294967295
   b5020:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b5024:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b5026:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b5028:	bf84      	itt	hi
   b502a:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b502e:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b5030:	4770      	bx	lr

000b5032 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b5032:	b510      	push	{r4, lr}
   b5034:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b5036:	3024      	adds	r0, #36	; 0x24
   b5038:	f000 fe64 	bl	b5d04 <_ZN8FatCache4syncEv>
   b503c:	b128      	cbz	r0, b504a <_ZN9FatVolume9cacheSyncEv+0x18>
   b503e:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b5042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b5046:	f000 be5d 	b.w	b5d04 <_ZN8FatCache4syncEv>
  }
   b504a:	bd10      	pop	{r4, pc}

000b504c <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b504c:	1e41      	subs	r1, r0, #1
   b504e:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b5052:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b5054:	0842      	lsrs	r2, r0, #1
   b5056:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b505a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b505e:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b5062:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b5064:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b5066:	d1f5      	bne.n	b5054 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b5068:	4770      	bx	lr
	...

000b506c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b506c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5070:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b5072:	f810 3b01 	ldrb.w	r3, [r0], #1
   b5076:	2b20      	cmp	r3, #32
   b5078:	d0fa      	beq.n	b5070 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b507a:	4d6a      	ldr	r5, [pc, #424]	; (b5224 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b507c:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b507e:	2400      	movs	r4, #0
    c = path[len];
   b5080:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b5082:	b1c3      	cbz	r3, b50b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b5084:	2b2f      	cmp	r3, #47	; 0x2f
   b5086:	d016      	beq.n	b50b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5088:	2b5c      	cmp	r3, #92	; 0x5c
   b508a:	d102      	bne.n	b5092 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b508c:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b508e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5092:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b5096:	b2c0      	uxtb	r0, r0
   b5098:	281d      	cmp	r0, #29
   b509a:	d803      	bhi.n	b50a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b509c:	fa25 f000 	lsr.w	r0, r5, r0
   b50a0:	07c0      	lsls	r0, r0, #31
   b50a2:	d4f3      	bmi.n	b508c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b50a4:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b50a8:	283c      	cmp	r0, #60	; 0x3c
   b50aa:	d0ef      	beq.n	b508c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b50ac:	3b20      	subs	r3, #32
   b50ae:	2b5e      	cmp	r3, #94	; 0x5e
   b50b0:	d8ec      	bhi.n	b508c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b50b2:	3401      	adds	r4, #1
    c = path[len];
   b50b4:	e7e4      	b.n	b5080 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b50b6:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b50b8:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b50ba:	4607      	mov	r7, r0
   b50bc:	f810 5b01 	ldrb.w	r5, [r0], #1
   b50c0:	2d20      	cmp	r5, #32
   b50c2:	d0fa      	beq.n	b50ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b50c4:	2d2f      	cmp	r5, #47	; 0x2f
   b50c6:	d0f8      	beq.n	b50ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b50c8:	6017      	str	r7, [r2, #0]
  while (len) {
   b50ca:	b14c      	cbz	r4, b50e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b50cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b50d0:	2a2e      	cmp	r2, #46	; 0x2e
   b50d2:	d001      	beq.n	b50d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b50d4:	2a20      	cmp	r2, #32
   b50d6:	d101      	bne.n	b50dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b50d8:	3c01      	subs	r4, #1
  while (len) {
   b50da:	e7f6      	b.n	b50ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b50dc:	2cff      	cmp	r4, #255	; 0xff
   b50de:	dcd5      	bgt.n	b508c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b50e0:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b50e4:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b50e8:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b50ea:	f8c1 300d 	str.w	r3, [r1, #13]
   b50ee:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b50f0:	f04f 0800 	mov.w	r8, #0
   b50f4:	f816 3008 	ldrb.w	r3, [r6, r8]
   b50f8:	2b2e      	cmp	r3, #46	; 0x2e
   b50fa:	d001      	beq.n	b5100 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b50fc:	2b20      	cmp	r3, #32
   b50fe:	d102      	bne.n	b5106 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b5100:	f108 0801 	add.w	r8, r8, #1
   b5104:	e7f6      	b.n	b50f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b5106:	fab8 f088 	clz	r0, r8
   b510a:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b510c:	1e65      	subs	r5, r4, #1
   b510e:	1c6b      	adds	r3, r5, #1
   b5110:	d002      	beq.n	b5118 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b5112:	5d73      	ldrb	r3, [r6, r5]
   b5114:	2b2e      	cmp	r3, #46	; 0x2e
   b5116:	d114      	bne.n	b5142 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b5118:	f04f 0900 	mov.w	r9, #0
   b511c:	2707      	movs	r7, #7
   b511e:	464a      	mov	r2, r9
   b5120:	46ca      	mov	sl, r9
   b5122:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b5126:	45a0      	cmp	r8, r4
   b5128:	da68      	bge.n	b51fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b512a:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b512e:	2b20      	cmp	r3, #32
   b5130:	d003      	beq.n	b513a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b5132:	2b2e      	cmp	r3, #46	; 0x2e
   b5134:	d107      	bne.n	b5146 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b5136:	45a8      	cmp	r8, r5
   b5138:	d012      	beq.n	b5160 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b513a:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b513c:	f108 0801 	add.w	r8, r8, #1
   b5140:	e7f1      	b.n	b5126 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b5142:	3d01      	subs	r5, #1
   b5144:	e7e3      	b.n	b510e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b5146:	2b22      	cmp	r3, #34	; 0x22
   b5148:	d008      	beq.n	b515c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b514a:	2b7c      	cmp	r3, #124	; 0x7c
   b514c:	d006      	beq.n	b515c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b514e:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b5152:	f1bc 0f05 	cmp.w	ip, #5
   b5156:	d80a      	bhi.n	b516e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b5158:	2b2d      	cmp	r3, #45	; 0x2d
   b515a:	d012      	beq.n	b5182 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b515c:	45a8      	cmp	r8, r5
   b515e:	d15b      	bne.n	b5218 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b5160:	2f0a      	cmp	r7, #10
   b5162:	d04a      	beq.n	b51fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b5164:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b5166:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b5168:	f04f 0e10 	mov.w	lr, #16
   b516c:	e7e6      	b.n	b513c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b516e:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b5172:	f1bc 0f05 	cmp.w	ip, #5
   b5176:	d9f1      	bls.n	b515c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b5178:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b517c:	f1bc 0f02 	cmp.w	ip, #2
   b5180:	d9ec      	bls.n	b515c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b5182:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b5186:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b518a:	d8e7      	bhi.n	b515c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b518c:	45a8      	cmp	r8, r5
   b518e:	d0e7      	beq.n	b5160 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b5190:	42ba      	cmp	r2, r7
   b5192:	d830      	bhi.n	b51f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b5194:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b5198:	f1bc 0f19 	cmp.w	ip, #25
   b519c:	d81a      	bhi.n	b51d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b519e:	3b20      	subs	r3, #32
        lc |= bit;
   b51a0:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b51a4:	b2db      	uxtb	r3, r3
        lc |= bit;
   b51a6:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b51aa:	f102 0c01 	add.w	ip, r2, #1
   b51ae:	fa5f fc8c 	uxtb.w	ip, ip
   b51b2:	440a      	add	r2, r1
      if (i < 7) {
   b51b4:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b51b8:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b51ba:	d801      	bhi.n	b51c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b51bc:	f881 c00c 	strb.w	ip, [r1, #12]
   b51c0:	4662      	mov	r2, ip
   b51c2:	e7bb      	b.n	b513c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b51c4:	45a8      	cmp	r8, r5
   b51c6:	dc18      	bgt.n	b51fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b51c8:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b51ca:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b51cc:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b51ce:	f04f 0e10 	mov.w	lr, #16
   b51d2:	e7b2      	b.n	b513a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b51d4:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b51d8:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b51dc:	bf98      	it	ls
   b51de:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b51e2:	e7e2      	b.n	b51aa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b51e4:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b51e6:	2001      	movs	r0, #1
   b51e8:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b51ea:	4419      	add	r1, r3
   b51ec:	237e      	movs	r3, #126	; 0x7e
   b51ee:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b51f0:	2331      	movs	r3, #49	; 0x31
   b51f2:	738b      	strb	r3, [r1, #14]
   b51f4:	e74b      	b.n	b508e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b51f6:	2f0a      	cmp	r7, #10
   b51f8:	d1e4      	bne.n	b51c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b51fa:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b51fc:	7b4b      	ldrb	r3, [r1, #13]
   b51fe:	2b20      	cmp	r3, #32
   b5200:	f43f af44 	beq.w	b508c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b5204:	2800      	cmp	r0, #0
   b5206:	d0ed      	beq.n	b51e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b5208:	ea1a 0f09 	tst.w	sl, r9
   b520c:	bf18      	it	ne
   b520e:	f04f 0902 	movne.w	r9, #2
   b5212:	f881 9000 	strb.w	r9, [r1]
   b5216:	e73a      	b.n	b508e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b5218:	42ba      	cmp	r2, r7
   b521a:	d8ec      	bhi.n	b51f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b521c:	2000      	movs	r0, #0
      c = '_';
   b521e:	235f      	movs	r3, #95	; 0x5f
   b5220:	e7c3      	b.n	b51aa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b5222:	bf00      	nop
   b5224:	31000101 	.word	0x31000101

000b5228 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b5228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b522c:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b5230:	4606      	mov	r6, r0
   b5232:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b5234:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b5236:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b5238:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b523c:	6861      	ldr	r1, [r4, #4]
   b523e:	68a2      	ldr	r2, [r4, #8]
   b5240:	186b      	adds	r3, r5, r1
   b5242:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b5244:	4411      	add	r1, r2
   b5246:	4291      	cmp	r1, r2
   b5248:	d006      	beq.n	b5258 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b524a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b524e:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b5252:	4043      	eors	r3, r0
   b5254:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b5256:	e7f6      	b.n	b5246 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b5258:	f1b9 0f03 	cmp.w	r9, #3
   b525c:	bf28      	it	cs
   b525e:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5262:	f109 0204 	add.w	r2, r9, #4
   b5266:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b5268:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b526c:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b526e:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5270:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5272:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5274:	bf94      	ite	ls
   b5276:	3130      	addls	r1, #48	; 0x30
   b5278:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b527a:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b527c:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b527e:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5282:	d1f1      	bne.n	b5268 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b5284:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b5288:	2100      	movs	r1, #0
   b528a:	735f      	strb	r7, [r3, #13]
   b528c:	4630      	mov	r0, r6
   b528e:	f000 fb2a 	bl	b58e6 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b5292:	2101      	movs	r1, #1
   b5294:	4630      	mov	r0, r6
   b5296:	f000 fb07 	bl	b58a8 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b529a:	4601      	mov	r1, r0
   b529c:	b928      	cbnz	r0, b52aa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b529e:	7870      	ldrb	r0, [r6, #1]
   b52a0:	fab0 f080 	clz	r0, r0
   b52a4:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b52a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b52aa:	7803      	ldrb	r3, [r0, #0]
   b52ac:	b16b      	cbz	r3, b52ca <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b52ae:	7ac3      	ldrb	r3, [r0, #11]
   b52b0:	071b      	lsls	r3, r3, #28
   b52b2:	d4ee      	bmi.n	b5292 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b52b4:	220b      	movs	r2, #11
   b52b6:	4640      	mov	r0, r8
   b52b8:	f003 fe08 	bl	b8ecc <memcmp>
   b52bc:	2800      	cmp	r0, #0
   b52be:	d1e8      	bne.n	b5292 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b52c0:	3501      	adds	r5, #1
   b52c2:	b2ad      	uxth	r5, r5
   b52c4:	2d64      	cmp	r5, #100	; 0x64
   b52c6:	d1b9      	bne.n	b523c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b52c8:	e7ed      	b.n	b52a6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b52ca:	2001      	movs	r0, #1
   b52cc:	e7eb      	b.n	b52a6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b52d0 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b52d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b52d4:	ed2d 8b02 	vpush	{d8}
   b52d8:	b08b      	sub	sp, #44	; 0x2c
   b52da:	460d      	mov	r5, r1
   b52dc:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b52de:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b52e0:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b52e2:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b52e6:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b52e8:	d105      	bne.n	b52f6 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b52ea:	2000      	movs	r0, #0
}
   b52ec:	b00b      	add	sp, #44	; 0x2c
   b52ee:	ecbd 8b02 	vpop	{d8}
   b52f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b52f6:	9b07      	ldr	r3, [sp, #28]
   b52f8:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b52fa:	2b00      	cmp	r3, #0
   b52fc:	d1f5      	bne.n	b52ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b52fe:	6853      	ldr	r3, [r2, #4]
   b5300:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b5302:	7813      	ldrb	r3, [r2, #0]
   b5304:	079c      	lsls	r4, r3, #30
   b5306:	bf1f      	itttt	ne
   b5308:	9b05      	ldrne	r3, [sp, #20]
   b530a:	330c      	addne	r3, #12
   b530c:	220d      	movne	r2, #13
   b530e:	fbb3 f3f2 	udivne	r3, r3, r2
   b5312:	bf1a      	itte	ne
   b5314:	3301      	addne	r3, #1
   b5316:	b2db      	uxtbne	r3, r3
   b5318:	2301      	moveq	r3, #1
    seekSet(0);
   b531a:	2100      	movs	r1, #0
   b531c:	4628      	mov	r0, r5
   b531e:	9303      	str	r3, [sp, #12]
   b5320:	f000 fae1 	bl	b58e6 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b5324:	f107 030d 	add.w	r3, r7, #13
  }
   b5328:	f04f 0b00 	mov.w	fp, #0
   b532c:	ee08 3a10 	vmov	s16, r3
   b5330:	46da      	mov	sl, fp
   b5332:	465c      	mov	r4, fp
   b5334:	465e      	mov	r6, fp
   b5336:	f8cd b010 	str.w	fp, [sp, #16]
   b533a:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b533c:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b533e:	2101      	movs	r1, #1
   b5340:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b5342:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b5346:	f000 faaf 	bl	b58a8 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b534a:	4603      	mov	r3, r0
   b534c:	2800      	cmp	r0, #0
   b534e:	d171      	bne.n	b5434 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b5350:	786b      	ldrb	r3, [r5, #1]
   b5352:	2b00      	cmp	r3, #0
   b5354:	d1c9      	bne.n	b52ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b5356:	9b06      	ldr	r3, [sp, #24]
   b5358:	059a      	lsls	r2, r3, #22
   b535a:	d5c6      	bpl.n	b52ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b535c:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b5360:	3b01      	subs	r3, #1
   b5362:	2b01      	cmp	r3, #1
   b5364:	d8c1      	bhi.n	b52ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b5366:	9b04      	ldr	r3, [sp, #16]
   b5368:	2c00      	cmp	r4, #0
   b536a:	bf08      	it	eq
   b536c:	4643      	moveq	r3, r8
   b536e:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b5370:	9b03      	ldr	r3, [sp, #12]
   b5372:	429c      	cmp	r4, r3
   b5374:	f0c0 80f1 	bcc.w	b555a <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b5378:	f1b9 0f00 	cmp.w	r9, #0
   b537c:	f040 810a 	bne.w	b5594 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b5380:	9b04      	ldr	r3, [sp, #16]
   b5382:	4628      	mov	r0, r5
   b5384:	0159      	lsls	r1, r3, #5
   b5386:	f000 faae 	bl	b58e6 <_ZN7FatFile7seekSetEm>
   b538a:	2800      	cmp	r0, #0
   b538c:	d0ad      	beq.n	b52ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b538e:	9b03      	ldr	r3, [sp, #12]
   b5390:	f103 39ff 	add.w	r9, r3, #4294967295
   b5394:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b5398:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b539a:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b539e:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b53a2:	2e00      	cmp	r6, #0
   b53a4:	f000 810d 	beq.w	b55c2 <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b53a8:	2100      	movs	r1, #0
   b53aa:	4628      	mov	r0, r5
   b53ac:	f000 fa7c 	bl	b58a8 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b53b0:	4604      	mov	r4, r0
   b53b2:	2800      	cmp	r0, #0
   b53b4:	d099      	beq.n	b52ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b53b6:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b53b8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b53bc:	454e      	cmp	r6, r9
   b53be:	f043 0301 	orr.w	r3, r3, #1
   b53c2:	bf0c      	ite	eq
   b53c4:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b53c8:	46b3      	movne	fp, r6
   b53ca:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b53ce:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b53d2:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b53d6:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b53da:	f107 000d 	add.w	r0, r7, #13
   b53de:	f7ff fe35 	bl	b504c <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b53e2:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b53e6:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b53e8:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b53ec:	f00b 031f 	and.w	r3, fp, #31
   b53f0:	220d      	movs	r2, #13
   b53f2:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b53f4:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b53f8:	4353      	muls	r3, r2
   b53fa:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b53fc:	9905      	ldr	r1, [sp, #20]
   b53fe:	4299      	cmp	r1, r3
   b5400:	f240 80d0 	bls.w	b55a4 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b5404:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b5408:	2a04      	cmp	r2, #4
   b540a:	fa5f fe82 	uxtb.w	lr, r2
   b540e:	f102 0001 	add.w	r0, r2, #1
   b5412:	f200 80cd 	bhi.w	b55b0 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b5416:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b541a:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b541e:	280d      	cmp	r0, #13
   b5420:	f103 0301 	add.w	r3, r3, #1
   b5424:	4602      	mov	r2, r0
   b5426:	d1e9      	bne.n	b53fc <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b5428:	3e01      	subs	r6, #1
   b542a:	b2f6      	uxtb	r6, r6
   b542c:	e7b9      	b.n	b53a2 <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b542e:	f04f 0901 	mov.w	r9, #1
   b5432:	e783      	b.n	b533c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b5434:	7802      	ldrb	r2, [r0, #0]
   b5436:	2ae5      	cmp	r2, #229	; 0xe5
   b5438:	d000      	beq.n	b543c <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b543a:	b97a      	cbnz	r2, b545c <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b543c:	9904      	ldr	r1, [sp, #16]
   b543e:	2c00      	cmp	r4, #0
   b5440:	bf08      	it	eq
   b5442:	4641      	moveq	r1, r8
   b5444:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b5446:	9903      	ldr	r1, [sp, #12]
   b5448:	428c      	cmp	r4, r1
        freeFound++;
   b544a:	bf3c      	itt	cc
   b544c:	3401      	addcc	r4, #1
   b544e:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b5450:	2a00      	cmp	r2, #0
   b5452:	d080      	beq.n	b5356 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b5454:	2ae5      	cmp	r2, #229	; 0xe5
   b5456:	d105      	bne.n	b5464 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b5458:	2600      	movs	r6, #0
   b545a:	e76f      	b.n	b533c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b545c:	9903      	ldr	r1, [sp, #12]
   b545e:	428c      	cmp	r4, r1
   b5460:	bf38      	it	cc
   b5462:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b5464:	2a2e      	cmp	r2, #46	; 0x2e
   b5466:	d0f7      	beq.n	b5458 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b5468:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b546a:	290f      	cmp	r1, #15
   b546c:	d14a      	bne.n	b5504 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b546e:	bb16      	cbnz	r6, b54b6 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b5470:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b5474:	f43f af62 	beq.w	b533c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b5478:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b547c:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b5480:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b5482:	220d      	movs	r2, #13
   b5484:	f10a 38ff 	add.w	r8, sl, #4294967295
   b5488:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b548c:	9a05      	ldr	r2, [sp, #20]
   b548e:	4542      	cmp	r2, r8
   b5490:	d9e2      	bls.n	b5458 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b5492:	eba2 0208 	sub.w	r2, r2, r8
   b5496:	9208      	str	r2, [sp, #32]
   b5498:	2200      	movs	r2, #0
   b549a:	eb02 0108 	add.w	r1, r2, r8
   b549e:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b54a0:	4618      	mov	r0, r3
   b54a2:	b2d1      	uxtb	r1, r2
   b54a4:	f7ff fdb1 	bl	b500a <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b54a8:	9908      	ldr	r1, [sp, #32]
   b54aa:	428a      	cmp	r2, r1
   b54ac:	d10d      	bne.n	b54ca <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b54ae:	2800      	cmp	r0, #0
   b54b0:	bf18      	it	ne
   b54b2:	2600      	movne	r6, #0
   b54b4:	e742      	b.n	b533c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b54b6:	f10a 3aff 	add.w	sl, sl, #4294967295
   b54ba:	fa5f fa8a 	uxtb.w	sl, sl
   b54be:	4552      	cmp	r2, sl
   b54c0:	d1ca      	bne.n	b5458 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b54c2:	7b5a      	ldrb	r2, [r3, #13]
   b54c4:	455a      	cmp	r2, fp
   b54c6:	d0dc      	beq.n	b5482 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b54c8:	e7c6      	b.n	b5458 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b54ca:	28ff      	cmp	r0, #255	; 0xff
   b54cc:	d8c4      	bhi.n	b5458 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b54ce:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b54d2:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b54d6:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b54d8:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b54da:	bf9c      	itt	ls
   b54dc:	f10e 0020 	addls.w	r0, lr, #32
   b54e0:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b54e4:	4608      	mov	r0, r1
   b54e6:	9909      	ldr	r1, [sp, #36]	; 0x24
   b54e8:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b54ea:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b54ee:	f1bc 0f19 	cmp.w	ip, #25
   b54f2:	bf9c      	itt	ls
   b54f4:	3120      	addls	r1, #32
   b54f6:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b54f8:	4571      	cmp	r1, lr
   b54fa:	d1ad      	bne.n	b5458 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b54fc:	3201      	adds	r2, #1
   b54fe:	2a0d      	cmp	r2, #13
   b5500:	d1cb      	bne.n	b549a <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b5502:	e71b      	b.n	b533c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b5504:	0708      	lsls	r0, r1, #28
   b5506:	d4a7      	bmi.n	b5458 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b5508:	b15e      	cbz	r6, b5522 <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b550a:	f1ba 0f01 	cmp.w	sl, #1
   b550e:	f47f aeec 	bne.w	b52ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b5512:	4618      	mov	r0, r3
   b5514:	f7ff fd9a 	bl	b504c <_ZN7FatFile11lfnChecksumEPh>
   b5518:	4558      	cmp	r0, fp
   b551a:	f47f aee6 	bne.w	b52ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b551e:	46b1      	mov	r9, r6
   b5520:	e00e      	b.n	b5540 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b5522:	ee18 1a10 	vmov	r1, s16
   b5526:	220b      	movs	r2, #11
   b5528:	4618      	mov	r0, r3
   b552a:	f003 fccf 	bl	b8ecc <memcmp>
   b552e:	2800      	cmp	r0, #0
   b5530:	f47f af04 	bne.w	b533c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b5534:	f897 9000 	ldrb.w	r9, [r7]
   b5538:	f019 0901 	ands.w	r9, r9, #1
   b553c:	f47f af77 	bne.w	b542e <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b5540:	9b06      	ldr	r3, [sp, #24]
   b5542:	0519      	lsls	r1, r3, #20
   b5544:	f53f aed1 	bmi.w	b52ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b5548:	9b06      	ldr	r3, [sp, #24]
   b554a:	9807      	ldr	r0, [sp, #28]
   b554c:	f8cd 9000 	str.w	r9, [sp]
   b5550:	4642      	mov	r2, r8
   b5552:	4629      	mov	r1, r5
   b5554:	f000 fa0a 	bl	b596c <_ZN7FatFile15openCachedEntryEPS_tih>
   b5558:	e6c8      	b.n	b52ec <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b555a:	2100      	movs	r1, #0
   b555c:	4628      	mov	r0, r5
   b555e:	f000 f9a3 	bl	b58a8 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b5562:	b9a0      	cbnz	r0, b558e <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b5564:	786b      	ldrb	r3, [r5, #1]
   b5566:	2b00      	cmp	r3, #0
   b5568:	f47f aebf 	bne.w	b52ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b556c:	4628      	mov	r0, r5
   b556e:	f000 f887 	bl	b5680 <_ZN7FatFile13addDirClusterEv>
   b5572:	2800      	cmp	r0, #0
   b5574:	f43f aeb9 	beq.w	b52ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b5578:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b557a:	791b      	ldrb	r3, [r3, #4]
   b557c:	2b01      	cmp	r3, #1
   b557e:	f63f aefb 	bhi.w	b5378 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b5582:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b5584:	3410      	adds	r4, #16
   b5586:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b5588:	42a3      	cmp	r3, r4
   b558a:	d8ef      	bhi.n	b556c <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b558c:	e6f4      	b.n	b5378 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b558e:	3401      	adds	r4, #1
   b5590:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b5592:	e6ed      	b.n	b5370 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b5594:	4639      	mov	r1, r7
   b5596:	4628      	mov	r0, r5
   b5598:	f7ff fe46 	bl	b5228 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b559c:	2800      	cmp	r0, #0
   b559e:	f47f aeef 	bne.w	b5380 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b55a2:	e6a2      	b.n	b52ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b55a4:	bf14      	ite	ne
   b55a6:	f04f 31ff 	movne.w	r1, #4294967295
   b55aa:	2100      	moveq	r1, #0
   b55ac:	b289      	uxth	r1, r1
   b55ae:	e72b      	b.n	b5408 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b55b0:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b55b4:	bf94      	ite	ls
   b55b6:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b55ba:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b55be:	8091      	strh	r1, [r2, #4]
   b55c0:	e72d      	b.n	b541e <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b55c2:	4631      	mov	r1, r6
   b55c4:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b55c6:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b55ca:	f000 f96d 	bl	b58a8 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b55ce:	4604      	mov	r4, r0
   b55d0:	2800      	cmp	r0, #0
   b55d2:	f43f ae8a 	beq.w	b52ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b55d6:	2220      	movs	r2, #32
   b55d8:	4631      	mov	r1, r6
   b55da:	f003 fc95 	bl	b8f08 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b55de:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b55e2:	6023      	str	r3, [r4, #0]
   b55e4:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b55e8:	6063      	str	r3, [r4, #4]
   b55ea:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b55ee:	8123      	strh	r3, [r4, #8]
   b55f0:	7dfb      	ldrb	r3, [r7, #23]
   b55f2:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b55f4:	783b      	ldrb	r3, [r7, #0]
   b55f6:	f003 0318 	and.w	r3, r3, #24
   b55fa:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b55fc:	4b0f      	ldr	r3, [pc, #60]	; (b563c <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b55fe:	681b      	ldr	r3, [r3, #0]
   b5600:	b19b      	cbz	r3, b562a <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b5602:	f104 010e 	add.w	r1, r4, #14
   b5606:	f104 0010 	add.w	r0, r4, #16
   b560a:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b560c:	8a23      	ldrh	r3, [r4, #16]
   b560e:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b5610:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b5612:	89e3      	ldrh	r3, [r4, #14]
   b5614:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b5616:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b5618:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b561c:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b5620:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b5624:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
   b5628:	e78e      	b.n	b5548 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b562a:	2321      	movs	r3, #33	; 0x21
   b562c:	7423      	strb	r3, [r4, #16]
   b562e:	2328      	movs	r3, #40	; 0x28
   b5630:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b5632:	2308      	movs	r3, #8
   b5634:	73a6      	strb	r6, [r4, #14]
   b5636:	73e3      	strb	r3, [r4, #15]
   b5638:	e7e8      	b.n	b560c <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b563a:	bf00      	nop
   b563c:	2003e674 	.word	0x2003e674

000b5640 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b5640:	b538      	push	{r3, r4, r5, lr}
   b5642:	4604      	mov	r4, r0
   b5644:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b5646:	2224      	movs	r2, #36	; 0x24
   b5648:	2100      	movs	r1, #0
   b564a:	f003 fc5d 	bl	b8f08 <memset>

  m_vol = vol;
   b564e:	60a5      	str	r5, [r4, #8]
    return m_fatType;
   b5650:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b5652:	2b10      	cmp	r3, #16
   b5654:	d003      	beq.n	b565e <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b5656:	2b20      	cmp	r3, #32
   b5658:	d006      	beq.n	b5668 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b565a:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b565c:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b565e:	2320      	movs	r3, #32
  m_flags = F_READ;
   b5660:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b5662:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b5664:	70a0      	strb	r0, [r4, #2]
  return true;
   b5666:	e7f9      	b.n	b565c <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b5668:	2340      	movs	r3, #64	; 0x40
   b566a:	e7f9      	b.n	b5660 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b566c <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b566c:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b566e:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b5670:	f043 0304 	orr.w	r3, r3, #4
   b5674:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b5676:	f100 0210 	add.w	r2, r0, #16
   b567a:	6880      	ldr	r0, [r0, #8]
   b567c:	f000 bbf8 	b.w	b5e70 <_ZN9FatVolume15allocateClusterEmPm>

000b5680 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b5680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b5684:	7801      	ldrb	r1, [r0, #0]
   b5686:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b568a:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b568c:	d003      	beq.n	b5696 <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b568e:	2600      	movs	r6, #0
}
   b5690:	4630      	mov	r0, r6
   b5692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b5696:	6942      	ldr	r2, [r0, #20]
   b5698:	4b17      	ldr	r3, [pc, #92]	; (b56f8 <_ZN7FatFile13addDirClusterEv+0x78>)
   b569a:	429a      	cmp	r2, r3
   b569c:	d2f7      	bcs.n	b568e <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b569e:	f7ff ffe5 	bl	b566c <_ZN7FatFile10addClusterEv>
   b56a2:	4606      	mov	r6, r0
   b56a4:	2800      	cmp	r0, #0
   b56a6:	d0f2      	beq.n	b568e <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b56a8:	6921      	ldr	r1, [r4, #16]
   b56aa:	68a0      	ldr	r0, [r4, #8]
   b56ac:	f000 fb75 	bl	b5d9a <_ZNK9FatVolume17clusterFirstBlockEm>
   b56b0:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
   b56b2:	68a0      	ldr	r0, [r4, #8]
   b56b4:	2205      	movs	r2, #5
   b56b6:	4639      	mov	r1, r7
   b56b8:	3024      	adds	r0, #36	; 0x24
   b56ba:	f000 fb4b 	bl	b5d54 <_ZN8FatCache4readEmh>
  if (!pc) {
   b56be:	4680      	mov	r8, r0
   b56c0:	2800      	cmp	r0, #0
   b56c2:	d0e4      	beq.n	b568e <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b56c4:	4629      	mov	r1, r5
   b56c6:	f44f 7200 	mov.w	r2, #512	; 0x200
   b56ca:	f003 fc1d 	bl	b8f08 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b56ce:	2501      	movs	r5, #1
   b56d0:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b56d2:	791a      	ldrb	r2, [r3, #4]
   b56d4:	42aa      	cmp	r2, r5
   b56d6:	d909      	bls.n	b56ec <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b56d8:	6818      	ldr	r0, [r3, #0]
   b56da:	4642      	mov	r2, r8
   b56dc:	19e9      	adds	r1, r5, r7
   b56de:	f000 fea6 	bl	b642e <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b56e2:	2800      	cmp	r0, #0
   b56e4:	d0d3      	beq.n	b568e <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b56e6:	3501      	adds	r5, #1
   b56e8:	b2ed      	uxtb	r5, r5
   b56ea:	e7f1      	b.n	b56d0 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b56ec:	6963      	ldr	r3, [r4, #20]
   b56ee:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b56f2:	6163      	str	r3, [r4, #20]
  return true;
   b56f4:	e7cc      	b.n	b5690 <_ZN7FatFile13addDirClusterEv+0x10>
   b56f6:	bf00      	nop
   b56f8:	001ffe00 	.word	0x001ffe00

000b56fc <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b56fc:	b510      	push	{r4, lr}
   b56fe:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b5700:	6880      	ldr	r0, [r0, #8]
   b5702:	460a      	mov	r2, r1
   b5704:	3024      	adds	r0, #36	; 0x24
   b5706:	69a1      	ldr	r1, [r4, #24]
   b5708:	f000 fb24 	bl	b5d54 <_ZN8FatCache4readEmh>
  if (!pc) {
   b570c:	b120      	cbz	r0, b5718 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b570e:	88a3      	ldrh	r3, [r4, #4]
   b5710:	f003 030f 	and.w	r3, r3, #15
   b5714:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b5718:	bd10      	pop	{r4, pc}

000b571a <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b571a:	7803      	ldrb	r3, [r0, #0]
   b571c:	b90b      	cbnz	r3, b5722 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b571e:	f7ff bf8f 	b.w	b5640 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b5722:	2000      	movs	r0, #0
   b5724:	4770      	bx	lr

000b5726 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b5726:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b572a:	7803      	ldrb	r3, [r0, #0]
   b572c:	4604      	mov	r4, r0
   b572e:	4688      	mov	r8, r1
   b5730:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b5732:	2b00      	cmp	r3, #0
   b5734:	d05d      	beq.n	b57f2 <_ZN7FatFile4readEPvj+0xcc>
   b5736:	7882      	ldrb	r2, [r0, #2]
   b5738:	07d1      	lsls	r1, r2, #31
   b573a:	d55a      	bpl.n	b57f2 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b573c:	071a      	lsls	r2, r3, #28
   b573e:	d52d      	bpl.n	b579c <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b5740:	69c3      	ldr	r3, [r0, #28]
   b5742:	6942      	ldr	r2, [r0, #20]
   b5744:	1a9b      	subs	r3, r3, r2
   b5746:	429d      	cmp	r5, r3
   b5748:	bf28      	it	cs
   b574a:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b574c:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b574e:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b5752:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b5756:	2e00      	cmp	r6, #0
   b5758:	f000 808f 	beq.w	b587a <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b575c:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b575e:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b5760:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b5762:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b5764:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b5768:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b576c:	d51f      	bpl.n	b57ae <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b576e:	6a00      	ldr	r0, [r0, #32]
   b5770:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b5772:	68a0      	ldr	r0, [r4, #8]
   b5774:	f1ba 0f00 	cmp.w	sl, #0
   b5778:	d142      	bne.n	b5800 <_ZN7FatFile4readEPvj+0xda>
   b577a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b577e:	d33f      	bcc.n	b5800 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b5780:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b5782:	4299      	cmp	r1, r3
   b5784:	d03c      	beq.n	b5800 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b5786:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b578a:	d252      	bcs.n	b5832 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b578c:	6800      	ldr	r0, [r0, #0]
   b578e:	4642      	mov	r2, r8
   b5790:	f000 fdc4 	bl	b631c <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b5794:	b368      	cbz	r0, b57f2 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b5796:	f44f 7700 	mov.w	r7, #512	; 0x200
   b579a:	e044      	b.n	b5826 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b579c:	069b      	lsls	r3, r3, #26
   b579e:	d5d5      	bpl.n	b574c <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b57a0:	6883      	ldr	r3, [r0, #8]
   b57a2:	891a      	ldrh	r2, [r3, #8]
   b57a4:	6943      	ldr	r3, [r0, #20]
   b57a6:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b57aa:	b29b      	uxth	r3, r3
   b57ac:	e7cb      	b.n	b5746 <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b57ae:	f890 9005 	ldrb.w	r9, [r0, #5]
   b57b2:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b57b6:	f1ba 0f00 	cmp.w	sl, #0
   b57ba:	d108      	bne.n	b57ce <_ZN7FatFile4readEPvj+0xa8>
   b57bc:	f1b9 0f00 	cmp.w	r9, #0
   b57c0:	d105      	bne.n	b57ce <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b57c2:	b95b      	cbnz	r3, b57dc <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b57c4:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b57c6:	bf4c      	ite	mi
   b57c8:	6a03      	ldrmi	r3, [r0, #32]
   b57ca:	6a23      	ldrpl	r3, [r4, #32]
   b57cc:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b57ce:	6921      	ldr	r1, [r4, #16]
   b57d0:	68a0      	ldr	r0, [r4, #8]
   b57d2:	f000 fae2 	bl	b5d9a <_ZNK9FatVolume17clusterFirstBlockEm>
   b57d6:	eb09 0100 	add.w	r1, r9, r0
   b57da:	e7ca      	b.n	b5772 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b57dc:	6921      	ldr	r1, [r4, #16]
   b57de:	465a      	mov	r2, fp
   b57e0:	f000 fae1 	bl	b5da6 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b57e4:	2800      	cmp	r0, #0
   b57e6:	db04      	blt.n	b57f2 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b57e8:	d1f1      	bne.n	b57ce <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b57ea:	7823      	ldrb	r3, [r4, #0]
   b57ec:	f013 0f70 	tst.w	r3, #112	; 0x70
   b57f0:	d143      	bne.n	b587a <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b57f2:	7863      	ldrb	r3, [r4, #1]
   b57f4:	f043 0302 	orr.w	r3, r3, #2
   b57f8:	7063      	strb	r3, [r4, #1]
  return -1;
   b57fa:	f04f 30ff 	mov.w	r0, #4294967295
   b57fe:	e03d      	b.n	b587c <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b5800:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b5804:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b5806:	f04f 0200 	mov.w	r2, #0
   b580a:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b580e:	bf28      	it	cs
   b5810:	4637      	movcs	r7, r6
   b5812:	f000 fa9f 	bl	b5d54 <_ZN8FatCache4readEmh>
      if (!pc) {
   b5816:	2800      	cmp	r0, #0
   b5818:	d0eb      	beq.n	b57f2 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b581a:	eb00 010a 	add.w	r1, r0, sl
   b581e:	463a      	mov	r2, r7
   b5820:	4640      	mov	r0, r8
   b5822:	f003 fb63 	bl	b8eec <memcpy>
    m_curPosition += n;
   b5826:	6963      	ldr	r3, [r4, #20]
   b5828:	443b      	add	r3, r7
    dst += n;
   b582a:	44b8      	add	r8, r7
    m_curPosition += n;
   b582c:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b582e:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b5830:	e791      	b.n	b5756 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b5832:	7822      	ldrb	r2, [r4, #0]
   b5834:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b5836:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b583a:	d406      	bmi.n	b584a <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b583c:	7902      	ldrb	r2, [r0, #4]
   b583e:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b5842:	b2d2      	uxtb	r2, r2
   b5844:	4592      	cmp	sl, r2
   b5846:	bf28      	it	cs
   b5848:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b584a:	4299      	cmp	r1, r3
      n = 512*nb;
   b584c:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b5850:	d208      	bcs.n	b5864 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b5852:	68a0      	ldr	r0, [r4, #8]
   b5854:	4653      	mov	r3, sl
   b5856:	6800      	ldr	r0, [r0, #0]
   b5858:	4642      	mov	r2, r8
   b585a:	f000 fda7 	bl	b63ac <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b585e:	2800      	cmp	r0, #0
   b5860:	d1e1      	bne.n	b5826 <_ZN7FatFile4readEPvj+0x100>
   b5862:	e7c6      	b.n	b57f2 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b5864:	4453      	add	r3, sl
   b5866:	428b      	cmp	r3, r1
   b5868:	d9f3      	bls.n	b5852 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b586a:	3024      	adds	r0, #36	; 0x24
   b586c:	9101      	str	r1, [sp, #4]
   b586e:	f000 fa49 	bl	b5d04 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b5872:	9901      	ldr	r1, [sp, #4]
   b5874:	2800      	cmp	r0, #0
   b5876:	d1ec      	bne.n	b5852 <_ZN7FatFile4readEPvj+0x12c>
   b5878:	e7bb      	b.n	b57f2 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b587a:	1ba8      	subs	r0, r5, r6
}
   b587c:	b003      	add	sp, #12
   b587e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5882 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b5882:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b5884:	2201      	movs	r2, #1
   b5886:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b588a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b588e:	4604      	mov	r4, r0
   b5890:	f7ff ff49 	bl	b5726 <_ZN7FatFile4readEPvj>
   b5894:	2801      	cmp	r0, #1
   b5896:	bf0a      	itet	eq
   b5898:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b589c:	f04f 30ff 	movne.w	r0, #4294967295
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b58a0:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b58a4:	b002      	add	sp, #8
   b58a6:	bd70      	pop	{r4, r5, r6, pc}

000b58a8 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b58a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b58aa:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b58ac:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b58b0:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b58b2:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b58b6:	d000      	beq.n	b58ba <_ZN7FatFile12readDirCacheEb+0x12>
   b58b8:	b999      	cbnz	r1, b58e2 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b58ba:	2201      	movs	r2, #1
   b58bc:	f10d 0107 	add.w	r1, sp, #7
   b58c0:	4620      	mov	r0, r4
   b58c2:	f7ff ff30 	bl	b5726 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b58c6:	b240      	sxtb	r0, r0
   b58c8:	2801      	cmp	r0, #1
   b58ca:	d002      	beq.n	b58d2 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b58cc:	2000      	movs	r0, #0
}
   b58ce:	b003      	add	sp, #12
   b58d0:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b58d2:	6963      	ldr	r3, [r4, #20]
   b58d4:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b58d6:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b58d8:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b58da:	3030      	adds	r0, #48	; 0x30
   b58dc:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b58e0:	e7f5      	b.n	b58ce <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b58e2:	3320      	adds	r3, #32
   b58e4:	e7f7      	b.n	b58d6 <_ZN7FatFile12readDirCacheEb+0x2e>

000b58e6 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b58e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b58ea:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b58ec:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b58ee:	4604      	mov	r4, r0
   b58f0:	460d      	mov	r5, r1
  if (!isOpen()) {
   b58f2:	b162      	cbz	r2, b590e <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b58f4:	6940      	ldr	r0, [r0, #20]
   b58f6:	4288      	cmp	r0, r1
   b58f8:	d002      	beq.n	b5900 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b58fa:	b919      	cbnz	r1, b5904 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b58fc:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b58fe:	6165      	str	r5, [r4, #20]
    return true;
   b5900:	2001      	movs	r0, #1
   b5902:	e006      	b.n	b5912 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b5904:	0716      	lsls	r6, r2, #28
   b5906:	d506      	bpl.n	b5916 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b5908:	69e3      	ldr	r3, [r4, #28]
   b590a:	428b      	cmp	r3, r1
   b590c:	d20b      	bcs.n	b5926 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b590e:	6127      	str	r7, [r4, #16]
  return false;
   b5910:	2000      	movs	r0, #0
}
   b5912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b5916:	0691      	lsls	r1, r2, #26
   b5918:	d505      	bpl.n	b5926 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b591a:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b591c:	891b      	ldrh	r3, [r3, #8]
   b591e:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b5922:	d9ec      	bls.n	b58fe <_ZN7FatFile7seekSetEm+0x18>
   b5924:	e7f3      	b.n	b590e <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b5926:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b592a:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b592e:	1e43      	subs	r3, r0, #1
   b5930:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b5934:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b5936:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b5938:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b593a:	42b3      	cmp	r3, r6
   b593c:	d800      	bhi.n	b5940 <_ZN7FatFile7seekSetEm+0x5a>
   b593e:	b998      	cbnz	r0, b5968 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b5940:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b5942:	bf4c      	ite	mi
   b5944:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b5948:	6a23      	ldrpl	r3, [r4, #32]
   b594a:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b594c:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b5950:	2e00      	cmp	r6, #0
   b5952:	d0d4      	beq.n	b58fe <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b5954:	6921      	ldr	r1, [r4, #16]
   b5956:	68a0      	ldr	r0, [r4, #8]
   b5958:	4642      	mov	r2, r8
   b595a:	f000 fa24 	bl	b5da6 <_ZN9FatVolume6fatGetEmPm>
   b595e:	2800      	cmp	r0, #0
   b5960:	f106 36ff 	add.w	r6, r6, #4294967295
   b5964:	dcf4      	bgt.n	b5950 <_ZN7FatFile7seekSetEm+0x6a>
   b5966:	e7d2      	b.n	b590e <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b5968:	1af6      	subs	r6, r6, r3
   b596a:	e7ef      	b.n	b594c <_ZN7FatFile7seekSetEm+0x66>

000b596c <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b596c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b596e:	460f      	mov	r7, r1
   b5970:	4604      	mov	r4, r0
   b5972:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b5974:	2100      	movs	r1, #0
   b5976:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b5978:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b597a:	f003 fac5 	bl	b8f08 <memset>
  m_vol = dirFile->m_vol;
   b597e:	68b8      	ldr	r0, [r7, #8]
   b5980:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b5982:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b5984:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b5988:	6a3b      	ldr	r3, [r7, #32]
   b598a:	60e3      	str	r3, [r4, #12]
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b598c:	016a      	lsls	r2, r5, #5
   b598e:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b5992:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b5996:	071f      	lsls	r7, r3, #28
   b5998:	d444      	bmi.n	b5a24 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b599a:	f003 0317 	and.w	r3, r3, #23
   b599e:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b59a0:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b59a4:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b59a8:	bf04      	itt	eq
   b59aa:	f043 0308 	orreq.w	r3, r3, #8
   b59ae:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b59b0:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b59b4:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b59b6:	f006 0303 	and.w	r3, r6, #3
   b59ba:	2b01      	cmp	r3, #1
   b59bc:	d02c      	beq.n	b5a18 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b59be:	2b02      	cmp	r3, #2
   b59c0:	d028      	beq.n	b5a14 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b59c2:	bb7b      	cbnz	r3, b5a24 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b59c4:	0571      	lsls	r1, r6, #21
   b59c6:	d42d      	bmi.n	b5a24 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b59c8:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b59ca:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b59cc:	78a1      	ldrb	r1, [r4, #2]
   b59ce:	078b      	lsls	r3, r1, #30
   b59d0:	d504      	bpl.n	b59dc <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b59d2:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b59d4:	06df      	lsls	r7, r3, #27
   b59d6:	d425      	bmi.n	b5a24 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b59d8:	07dd      	lsls	r5, r3, #31
   b59da:	d423      	bmi.n	b5a24 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b59dc:	11b3      	asrs	r3, r6, #6
   b59de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b59e2:	f006 0508 	and.w	r5, r6, #8
   b59e6:	432b      	orrs	r3, r5
   b59e8:	430b      	orrs	r3, r1
   b59ea:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b59ec:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b59ee:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b59f0:	1883      	adds	r3, r0, r2
   b59f2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b59f6:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b59fa:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b59fe:	0572      	lsls	r2, r6, #21
   b5a00:	d513      	bpl.n	b5a2a <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b5a02:	b959      	cbnz	r1, b5a1c <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b5a04:	78a3      	ldrb	r3, [r4, #2]
   b5a06:	f043 0304 	orr.w	r3, r3, #4
   b5a0a:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b5a0c:	0473      	lsls	r3, r6, #17
   b5a0e:	d410      	bmi.n	b5a32 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b5a10:	2001      	movs	r0, #1
}
   b5a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b5a14:	2303      	movs	r3, #3
   b5a16:	e7d8      	b.n	b59ca <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b5a18:	2302      	movs	r3, #2
   b5a1a:	e7d6      	b.n	b59ca <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b5a1c:	f000 fa63 	bl	b5ee6 <_ZN9FatVolume9freeChainEm>
   b5a20:	2800      	cmp	r0, #0
   b5a22:	d1ef      	bne.n	b5a04 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b5a24:	2000      	movs	r0, #0
   b5a26:	7020      	strb	r0, [r4, #0]
  return false;
   b5a28:	e7f3      	b.n	b5a12 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b5a2a:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b5a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5a2e:	61e3      	str	r3, [r4, #28]
   b5a30:	e7ec      	b.n	b5a0c <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b5a32:	69e1      	ldr	r1, [r4, #28]
   b5a34:	4620      	mov	r0, r4
   b5a36:	f7ff ff56 	bl	b58e6 <_ZN7FatFile7seekSetEm>
   b5a3a:	2800      	cmp	r0, #0
   b5a3c:	d1e8      	bne.n	b5a10 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b5a3e:	e7f1      	b.n	b5a24 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b5a40 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b5a40:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b5a42:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b5a44:	4604      	mov	r4, r0
  if (!isOpen()) {
   b5a46:	b90b      	cbnz	r3, b5a4c <_ZN7FatFile4syncEv+0xc>
    return true;
   b5a48:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b5a4a:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b5a4c:	7883      	ldrb	r3, [r0, #2]
   b5a4e:	075a      	lsls	r2, r3, #29
   b5a50:	d523      	bpl.n	b5a9a <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b5a52:	2101      	movs	r1, #1
   b5a54:	f7ff fe52 	bl	b56fc <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b5a58:	4605      	mov	r5, r0
   b5a5a:	b928      	cbnz	r0, b5a68 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b5a5c:	7863      	ldrb	r3, [r4, #1]
   b5a5e:	f043 0301 	orr.w	r3, r3, #1
   b5a62:	7063      	strb	r3, [r4, #1]
  return false;
   b5a64:	2000      	movs	r0, #0
   b5a66:	e7f0      	b.n	b5a4a <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b5a68:	7803      	ldrb	r3, [r0, #0]
   b5a6a:	2be5      	cmp	r3, #229	; 0xe5
   b5a6c:	d0f6      	beq.n	b5a5c <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b5a6e:	7823      	ldrb	r3, [r4, #0]
   b5a70:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b5a72:	bf44      	itt	mi
   b5a74:	69e3      	ldrmi	r3, [r4, #28]
   b5a76:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b5a78:	6a23      	ldr	r3, [r4, #32]
   b5a7a:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b5a7c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b5a7e:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b5a80:	4b09      	ldr	r3, [pc, #36]	; (b5aa8 <_ZN7FatFile4syncEv+0x68>)
   b5a82:	681b      	ldr	r3, [r3, #0]
   b5a84:	b12b      	cbz	r3, b5a92 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b5a86:	f100 0116 	add.w	r1, r0, #22
   b5a8a:	3018      	adds	r0, #24
   b5a8c:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b5a8e:	8b2b      	ldrh	r3, [r5, #24]
   b5a90:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b5a92:	78a3      	ldrb	r3, [r4, #2]
   b5a94:	f023 0304 	bic.w	r3, r3, #4
   b5a98:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b5a9a:	68a0      	ldr	r0, [r4, #8]
   b5a9c:	f7ff fac9 	bl	b5032 <_ZN9FatVolume9cacheSyncEv>
   b5aa0:	2800      	cmp	r0, #0
   b5aa2:	d0db      	beq.n	b5a5c <_ZN7FatFile4syncEv+0x1c>
   b5aa4:	e7d0      	b.n	b5a48 <_ZN7FatFile4syncEv+0x8>
   b5aa6:	bf00      	nop
   b5aa8:	2003e674 	.word	0x2003e674

000b5aac <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b5aac:	b510      	push	{r4, lr}
   b5aae:	4604      	mov	r4, r0
  bool rtn = sync();
   b5ab0:	f7ff ffc6 	bl	b5a40 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b5ab4:	2300      	movs	r3, #0
   b5ab6:	7023      	strb	r3, [r4, #0]
}
   b5ab8:	bd10      	pop	{r4, pc}

000b5aba <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b5aba:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5abc:	b093      	sub	sp, #76	; 0x4c
   b5abe:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b5ac0:	2300      	movs	r3, #0
   b5ac2:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b5ac4:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b5ac6:	9201      	str	r2, [sp, #4]
   b5ac8:	4606      	mov	r6, r0
   b5aca:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b5acc:	b113      	cbz	r3, b5ad4 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b5ace:	2000      	movs	r0, #0
}
   b5ad0:	b013      	add	sp, #76	; 0x4c
   b5ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b5ad4:	780b      	ldrb	r3, [r1, #0]
   b5ad6:	f013 0f70 	tst.w	r3, #112	; 0x70
   b5ada:	d0f8      	beq.n	b5ace <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b5adc:	7813      	ldrb	r3, [r2, #0]
   b5ade:	2b2f      	cmp	r3, #47	; 0x2f
   b5ae0:	d112      	bne.n	b5b08 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b5ae2:	9a01      	ldr	r2, [sp, #4]
   b5ae4:	7813      	ldrb	r3, [r2, #0]
   b5ae6:	2b2f      	cmp	r3, #47	; 0x2f
   b5ae8:	d102      	bne.n	b5af0 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b5aea:	3201      	adds	r2, #1
   b5aec:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b5aee:	e7f8      	b.n	b5ae2 <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b5af0:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b5af2:	b91b      	cbnz	r3, b5afc <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b5af4:	4630      	mov	r0, r6
   b5af6:	f7ff fe10 	bl	b571a <_ZN7FatFile8openRootEP9FatVolume>
   b5afa:	e7e9      	b.n	b5ad0 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b5afc:	a809      	add	r0, sp, #36	; 0x24
   b5afe:	f7ff fd9f 	bl	b5640 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b5b02:	2800      	cmp	r0, #0
   b5b04:	d0e3      	beq.n	b5ace <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b5b06:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b5b08:	9801      	ldr	r0, [sp, #4]
   b5b0a:	aa01      	add	r2, sp, #4
   b5b0c:	a903      	add	r1, sp, #12
   b5b0e:	f7ff faad 	bl	b506c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b5b12:	2800      	cmp	r0, #0
   b5b14:	d0db      	beq.n	b5ace <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b5b16:	9b01      	ldr	r3, [sp, #4]
   b5b18:	781b      	ldrb	r3, [r3, #0]
   b5b1a:	b19b      	cbz	r3, b5b44 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b5b1c:	2300      	movs	r3, #0
   b5b1e:	aa03      	add	r2, sp, #12
   b5b20:	4621      	mov	r1, r4
   b5b22:	4630      	mov	r0, r6
   b5b24:	f7ff fbd4 	bl	b52d0 <_ZN7FatFile4openEPS_P7fname_ti>
   b5b28:	2800      	cmp	r0, #0
   b5b2a:	d0d0      	beq.n	b5ace <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b5b2c:	4635      	mov	r5, r6
   b5b2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5b30:	ac09      	add	r4, sp, #36	; 0x24
   b5b32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5b38:	682b      	ldr	r3, [r5, #0]
   b5b3a:	6023      	str	r3, [r4, #0]
    close();
   b5b3c:	4630      	mov	r0, r6
   b5b3e:	f7ff ffb5 	bl	b5aac <_ZN7FatFile5closeEv>
  while (1) {
   b5b42:	e7e0      	b.n	b5b06 <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b5b44:	463b      	mov	r3, r7
   b5b46:	aa03      	add	r2, sp, #12
   b5b48:	4621      	mov	r1, r4
   b5b4a:	4630      	mov	r0, r6
   b5b4c:	f7ff fbc0 	bl	b52d0 <_ZN7FatFile4openEPS_P7fname_ti>
   b5b50:	e7be      	b.n	b5ad0 <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b5b54 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b5b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b5b58:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b5b5a:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b5b5c:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b5b5e:	4604      	mov	r4, r0
   b5b60:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b5b62:	d55b      	bpl.n	b5c1c <_ZN7FatFile5writeEPKvj+0xc8>
   b5b64:	7883      	ldrb	r3, [r0, #2]
   b5b66:	079a      	lsls	r2, r3, #30
   b5b68:	d558      	bpl.n	b5c1c <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b5b6a:	071b      	lsls	r3, r3, #28
   b5b6c:	d451      	bmi.n	b5c12 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b5b6e:	6963      	ldr	r3, [r4, #20]
   b5b70:	43db      	mvns	r3, r3
   b5b72:	42bb      	cmp	r3, r7
   b5b74:	d352      	bcc.n	b5c1c <_ZN7FatFile5writeEPKvj+0xc8>
   b5b76:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b5b78:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b5b7c:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b5b7e:	f1b8 0f00 	cmp.w	r8, #0
   b5b82:	f000 8091 	beq.w	b5ca8 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b5b86:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b5b88:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b5b8a:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b5b8e:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b5b92:	d10e      	bne.n	b5bb2 <_ZN7FatFile5writeEPKvj+0x5e>
   b5b94:	b96d      	cbnz	r5, b5bb2 <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b5b96:	6921      	ldr	r1, [r4, #16]
   b5b98:	2900      	cmp	r1, #0
   b5b9a:	d046      	beq.n	b5c2a <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b5b9c:	4652      	mov	r2, sl
   b5b9e:	f000 f902 	bl	b5da6 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b5ba2:	2800      	cmp	r0, #0
   b5ba4:	db3a      	blt.n	b5c1c <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b5ba6:	d104      	bne.n	b5bb2 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b5ba8:	4620      	mov	r0, r4
   b5baa:	f7ff fd5f 	bl	b566c <_ZN7FatFile10addClusterEv>
   b5bae:	2800      	cmp	r0, #0
   b5bb0:	d034      	beq.n	b5c1c <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b5bb2:	6921      	ldr	r1, [r4, #16]
   b5bb4:	68a0      	ldr	r0, [r4, #8]
   b5bb6:	f000 f8f0 	bl	b5d9a <_ZNK9FatVolume17clusterFirstBlockEm>
   b5bba:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b5bbc:	68a0      	ldr	r0, [r4, #8]
   b5bbe:	b915      	cbnz	r5, b5bc6 <_ZN7FatFile5writeEPKvj+0x72>
   b5bc0:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b5bc4:	d23f      	bcs.n	b5c46 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b5bc6:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b5bca:	4546      	cmp	r6, r8
   b5bcc:	bf28      	it	cs
   b5bce:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b5bd0:	2d00      	cmp	r5, #0
   b5bd2:	d136      	bne.n	b5c42 <_ZN7FatFile5writeEPKvj+0xee>
   b5bd4:	6962      	ldr	r2, [r4, #20]
   b5bd6:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b5bd8:	429a      	cmp	r2, r3
   b5bda:	bf34      	ite	cc
   b5bdc:	2201      	movcc	r2, #1
   b5bde:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b5be0:	3024      	adds	r0, #36	; 0x24
   b5be2:	f000 f8b7 	bl	b5d54 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b5be6:	b1c8      	cbz	r0, b5c1c <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b5be8:	4428      	add	r0, r5
   b5bea:	4632      	mov	r2, r6
   b5bec:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b5bee:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b5bf0:	f003 f97c 	bl	b8eec <memcpy>
      if (512 == (n + blockOffset)) {
   b5bf4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b5bf8:	d104      	bne.n	b5c04 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b5bfa:	68a0      	ldr	r0, [r4, #8]
   b5bfc:	3024      	adds	r0, #36	; 0x24
   b5bfe:	f000 f881 	bl	b5d04 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b5c02:	b158      	cbz	r0, b5c1c <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b5c04:	6963      	ldr	r3, [r4, #20]
   b5c06:	4433      	add	r3, r6
   b5c08:	6163      	str	r3, [r4, #20]
    src += n;
   b5c0a:	44b1      	add	r9, r6
    nToWrite -= n;
   b5c0c:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b5c10:	e7b4      	b.n	b5b7c <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b5c12:	69c1      	ldr	r1, [r0, #28]
   b5c14:	f7ff fe67 	bl	b58e6 <_ZN7FatFile7seekSetEm>
   b5c18:	2800      	cmp	r0, #0
   b5c1a:	d1a8      	bne.n	b5b6e <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b5c1c:	7863      	ldrb	r3, [r4, #1]
   b5c1e:	f043 0301 	orr.w	r3, r3, #1
   b5c22:	7063      	strb	r3, [r4, #1]
  return -1;
   b5c24:	f04f 30ff 	mov.w	r0, #4294967295
   b5c28:	e050      	b.n	b5ccc <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b5c2a:	6a23      	ldr	r3, [r4, #32]
   b5c2c:	b93b      	cbnz	r3, b5c3e <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b5c2e:	4620      	mov	r0, r4
   b5c30:	f7ff fd1c 	bl	b566c <_ZN7FatFile10addClusterEv>
   b5c34:	2800      	cmp	r0, #0
   b5c36:	d0f1      	beq.n	b5c1c <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b5c38:	6923      	ldr	r3, [r4, #16]
   b5c3a:	6223      	str	r3, [r4, #32]
   b5c3c:	e7b9      	b.n	b5bb2 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b5c3e:	6123      	str	r3, [r4, #16]
   b5c40:	e7b7      	b.n	b5bb2 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b5c42:	2201      	movs	r2, #1
   b5c44:	e7cc      	b.n	b5be0 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b5c46:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b5c4a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b5c4c:	d31b      	bcc.n	b5c86 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b5c4e:	f890 c004 	ldrb.w	ip, [r0, #4]
   b5c52:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b5c56:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b5c58:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b5c5c:	4573      	cmp	r3, lr
   b5c5e:	bf28      	it	cs
   b5c60:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b5c62:	4291      	cmp	r1, r2
      n = 512*nb;
   b5c64:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b5c68:	d307      	bcc.n	b5c7a <_ZN7FatFile5writeEPKvj+0x126>
   b5c6a:	441a      	add	r2, r3
   b5c6c:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b5c6e:	bf82      	ittt	hi
   b5c70:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
   b5c74:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b5c78:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b5c7a:	68a5      	ldr	r5, [r4, #8]
   b5c7c:	464a      	mov	r2, r9
   b5c7e:	6828      	ldr	r0, [r5, #0]
   b5c80:	f000 fc4b 	bl	b651a <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b5c84:	e7bd      	b.n	b5c02 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b5c86:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b5c88:	bf02      	ittt	eq
   b5c8a:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
   b5c8e:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b5c92:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b5c94:	68a3      	ldr	r3, [r4, #8]
   b5c96:	464a      	mov	r2, r9
   b5c98:	6818      	ldr	r0, [r3, #0]
   b5c9a:	f000 fbc8 	bl	b642e <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b5c9e:	2800      	cmp	r0, #0
   b5ca0:	d0bc      	beq.n	b5c1c <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b5ca2:	f44f 7600 	mov.w	r6, #512	; 0x200
   b5ca6:	e7ad      	b.n	b5c04 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b5ca8:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b5caa:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b5cac:	42b2      	cmp	r2, r6
   b5cae:	d204      	bcs.n	b5cba <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b5cb0:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b5cb2:	f043 0304 	orr.w	r3, r3, #4
   b5cb6:	70a3      	strb	r3, [r4, #2]
   b5cb8:	e003      	b.n	b5cc2 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b5cba:	4a08      	ldr	r2, [pc, #32]	; (b5cdc <_ZN7FatFile5writeEPKvj+0x188>)
   b5cbc:	6812      	ldr	r2, [r2, #0]
   b5cbe:	2a00      	cmp	r2, #0
   b5cc0:	d1f7      	bne.n	b5cb2 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b5cc2:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b5cc6:	2b00      	cmp	r3, #0
   b5cc8:	db02      	blt.n	b5cd0 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b5cca:	4638      	mov	r0, r7
}
   b5ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b5cd0:	4620      	mov	r0, r4
   b5cd2:	f7ff feb5 	bl	b5a40 <_ZN7FatFile4syncEv>
   b5cd6:	2800      	cmp	r0, #0
   b5cd8:	d1f7      	bne.n	b5cca <_ZN7FatFile5writeEPKvj+0x176>
   b5cda:	e79f      	b.n	b5c1c <_ZN7FatFile5writeEPKvj+0xc8>
   b5cdc:	2003e674 	.word	0x2003e674

000b5ce0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5ce0:	b513      	push	{r0, r1, r4, lr}
   b5ce2:	4604      	mov	r4, r0
    }
   b5ce4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5ce6:	b159      	cbz	r1, b5d00 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5ce8:	9101      	str	r1, [sp, #4]
   b5cea:	f003 f943 	bl	b8f74 <strlen>
   b5cee:	6823      	ldr	r3, [r4, #0]
   b5cf0:	9901      	ldr	r1, [sp, #4]
   b5cf2:	68db      	ldr	r3, [r3, #12]
   b5cf4:	4602      	mov	r2, r0
   b5cf6:	4620      	mov	r0, r4
    }
   b5cf8:	b002      	add	sp, #8
   b5cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5cfe:	4718      	bx	r3
    }
   b5d00:	b002      	add	sp, #8
   b5d02:	bd10      	pop	{r4, pc}

000b5d04 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b5d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b5d06:	7803      	ldrb	r3, [r0, #0]
   b5d08:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b5d0a:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b5d0c:	d520      	bpl.n	b5d50 <_ZN8FatCache4syncEv+0x4c>
   b5d0e:	6843      	ldr	r3, [r0, #4]
   b5d10:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b5d12:	f100 020c 	add.w	r2, r0, #12
   b5d16:	6818      	ldr	r0, [r3, #0]
   b5d18:	9201      	str	r2, [sp, #4]
   b5d1a:	f000 fb88 	bl	b642e <_ZN9SdSpiCard10writeBlockEmPKh>
   b5d1e:	9a01      	ldr	r2, [sp, #4]
   b5d20:	4605      	mov	r5, r0
   b5d22:	b918      	cbnz	r0, b5d2c <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b5d24:	2500      	movs	r5, #0
}
   b5d26:	4628      	mov	r0, r5
   b5d28:	b003      	add	sp, #12
   b5d2a:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b5d2c:	7823      	ldrb	r3, [r4, #0]
   b5d2e:	079b      	lsls	r3, r3, #30
   b5d30:	d404      	bmi.n	b5d3c <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b5d32:	7823      	ldrb	r3, [r4, #0]
   b5d34:	f023 0301 	bic.w	r3, r3, #1
   b5d38:	7023      	strb	r3, [r4, #0]
   b5d3a:	e7f4      	b.n	b5d26 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b5d3c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b5d40:	6919      	ldr	r1, [r3, #16]
   b5d42:	4401      	add	r1, r0
   b5d44:	6818      	ldr	r0, [r3, #0]
   b5d46:	f000 fb72 	bl	b642e <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b5d4a:	2800      	cmp	r0, #0
   b5d4c:	d1f1      	bne.n	b5d32 <_ZN8FatCache4syncEv+0x2e>
   b5d4e:	e7e9      	b.n	b5d24 <_ZN8FatCache4syncEv+0x20>
  return true;
   b5d50:	2501      	movs	r5, #1
   b5d52:	e7e8      	b.n	b5d26 <_ZN8FatCache4syncEv+0x22>

000b5d54 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b5d54:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b5d56:	6883      	ldr	r3, [r0, #8]
   b5d58:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b5d5a:	4604      	mov	r4, r0
   b5d5c:	460e      	mov	r6, r1
   b5d5e:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b5d60:	d009      	beq.n	b5d76 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b5d62:	f7ff ffcf 	bl	b5d04 <_ZN8FatCache4syncEv>
   b5d66:	b908      	cbnz	r0, b5d6c <_ZN8FatCache4readEmh+0x18>
  return 0;
   b5d68:	2000      	movs	r0, #0
}
   b5d6a:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b5d6c:	076b      	lsls	r3, r5, #29
   b5d6e:	d50a      	bpl.n	b5d86 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b5d70:	2300      	movs	r3, #0
   b5d72:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b5d74:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b5d76:	7822      	ldrb	r2, [r4, #0]
   b5d78:	f005 0503 	and.w	r5, r5, #3
   b5d7c:	4620      	mov	r0, r4
   b5d7e:	4315      	orrs	r5, r2
   b5d80:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b5d84:	e7f1      	b.n	b5d6a <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b5d86:	6863      	ldr	r3, [r4, #4]
   b5d88:	f104 020c 	add.w	r2, r4, #12
   b5d8c:	6818      	ldr	r0, [r3, #0]
   b5d8e:	4631      	mov	r1, r6
   b5d90:	f000 fac4 	bl	b631c <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b5d94:	2800      	cmp	r0, #0
   b5d96:	d1eb      	bne.n	b5d70 <_ZN8FatCache4readEmh+0x1c>
   b5d98:	e7e6      	b.n	b5d68 <_ZN8FatCache4readEmh+0x14>

000b5d9a <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b5d9a:	7983      	ldrb	r3, [r0, #6]
   b5d9c:	6940      	ldr	r0, [r0, #20]
   b5d9e:	3902      	subs	r1, #2
   b5da0:	4099      	lsls	r1, r3
}
   b5da2:	4408      	add	r0, r1
   b5da4:	4770      	bx	lr

000b5da6 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b5da6:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b5da8:	b570      	push	{r4, r5, r6, lr}
   b5daa:	4605      	mov	r5, r0
   b5dac:	460c      	mov	r4, r1
   b5dae:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b5db0:	d802      	bhi.n	b5db8 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b5db2:	f04f 30ff 	mov.w	r0, #4294967295
}
   b5db6:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b5db8:	69c3      	ldr	r3, [r0, #28]
   b5dba:	428b      	cmp	r3, r1
   b5dbc:	d3f9      	bcc.n	b5db2 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b5dbe:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b5dc0:	2b20      	cmp	r3, #32
   b5dc2:	d116      	bne.n	b5df2 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b5dc4:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b5dc6:	2202      	movs	r2, #2
   b5dc8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b5dcc:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b5dd0:	f7ff ffc0 	bl	b5d54 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5dd4:	2800      	cmp	r0, #0
   b5dd6:	d0ec      	beq.n	b5db2 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b5dd8:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b5ddc:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b5de0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b5de4:	69ea      	ldr	r2, [r5, #28]
   b5de6:	429a      	cmp	r2, r3
  *value = next;
   b5de8:	bf26      	itte	cs
   b5dea:	6033      	strcs	r3, [r6, #0]
  return 1;
   b5dec:	2001      	movcs	r0, #1
    return 0;
   b5dee:	2000      	movcc	r0, #0
   b5df0:	e7e1      	b.n	b5db6 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b5df2:	2b10      	cmp	r3, #16
   b5df4:	d1dd      	bne.n	b5db2 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b5df6:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b5dfa:	6981      	ldr	r1, [r0, #24]
   b5dfc:	2202      	movs	r2, #2
   b5dfe:	4419      	add	r1, r3
   b5e00:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b5e04:	f7ff ffa6 	bl	b5d54 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5e08:	2800      	cmp	r0, #0
   b5e0a:	d0d2      	beq.n	b5db2 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b5e0c:	b2e4      	uxtb	r4, r4
   b5e0e:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b5e12:	e7e7      	b.n	b5de4 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b5e14 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b5e14:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b5e16:	b538      	push	{r3, r4, r5, lr}
   b5e18:	460c      	mov	r4, r1
   b5e1a:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b5e1c:	d801      	bhi.n	b5e22 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b5e1e:	2000      	movs	r0, #0
}
   b5e20:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b5e22:	69c3      	ldr	r3, [r0, #28]
   b5e24:	428b      	cmp	r3, r1
   b5e26:	d3fa      	bcc.n	b5e1e <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b5e28:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b5e2a:	2b20      	cmp	r3, #32
   b5e2c:	d10f      	bne.n	b5e4e <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b5e2e:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b5e30:	2203      	movs	r2, #3
   b5e32:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b5e36:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b5e3a:	f7ff ff8b 	bl	b5d54 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5e3e:	2800      	cmp	r0, #0
   b5e40:	d0ed      	beq.n	b5e1e <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b5e42:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b5e46:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b5e4a:	2001      	movs	r0, #1
   b5e4c:	e7e8      	b.n	b5e20 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b5e4e:	2b10      	cmp	r3, #16
   b5e50:	d1e5      	bne.n	b5e1e <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b5e52:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b5e56:	6981      	ldr	r1, [r0, #24]
   b5e58:	2203      	movs	r2, #3
   b5e5a:	4419      	add	r1, r3
   b5e5c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b5e60:	f7ff ff78 	bl	b5d54 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5e64:	2800      	cmp	r0, #0
   b5e66:	d0da      	beq.n	b5e1e <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b5e68:	b2e4      	uxtb	r4, r4
   b5e6a:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b5e6e:	e7ec      	b.n	b5e4a <_ZN9FatVolume6fatPutEmm+0x36>

000b5e70 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b5e70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b5e74:	68c4      	ldr	r4, [r0, #12]
   b5e76:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b5e78:	4605      	mov	r5, r0
   b5e7a:	460e      	mov	r6, r1
   b5e7c:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b5e7e:	d301      	bcc.n	b5e84 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b5e80:	2701      	movs	r7, #1
   b5e82:	e001      	b.n	b5e88 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b5e84:	460c      	mov	r4, r1
    setStart = false;
   b5e86:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b5e88:	69eb      	ldr	r3, [r5, #28]
    find++;
   b5e8a:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b5e8c:	42a3      	cmp	r3, r4
   b5e8e:	d202      	bcs.n	b5e96 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b5e90:	b9c7      	cbnz	r7, b5ec4 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b5e92:	68ec      	ldr	r4, [r5, #12]
   b5e94:	e7f4      	b.n	b5e80 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b5e96:	42a6      	cmp	r6, r4
   b5e98:	d014      	beq.n	b5ec4 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b5e9a:	aa01      	add	r2, sp, #4
   b5e9c:	4621      	mov	r1, r4
   b5e9e:	4628      	mov	r0, r5
   b5ea0:	f7ff ff81 	bl	b5da6 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b5ea4:	2800      	cmp	r0, #0
   b5ea6:	db0d      	blt.n	b5ec4 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b5ea8:	d0ee      	beq.n	b5e88 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b5eaa:	9b01      	ldr	r3, [sp, #4]
   b5eac:	2b00      	cmp	r3, #0
   b5eae:	d1eb      	bne.n	b5e88 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b5eb0:	b107      	cbz	r7, b5eb4 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b5eb2:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b5eb4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b5eb8:	4621      	mov	r1, r4
   b5eba:	4628      	mov	r0, r5
   b5ebc:	f7ff ffaa 	bl	b5e14 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b5ec0:	4607      	mov	r7, r0
   b5ec2:	b920      	cbnz	r0, b5ece <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b5ec4:	2700      	movs	r7, #0
}
   b5ec6:	4638      	mov	r0, r7
   b5ec8:	b002      	add	sp, #8
   b5eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b5ece:	b916      	cbnz	r6, b5ed6 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b5ed0:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b5ed4:	e7f7      	b.n	b5ec6 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b5ed6:	4622      	mov	r2, r4
   b5ed8:	4631      	mov	r1, r6
   b5eda:	4628      	mov	r0, r5
   b5edc:	f7ff ff9a 	bl	b5e14 <_ZN9FatVolume6fatPutEmm>
   b5ee0:	2800      	cmp	r0, #0
   b5ee2:	d1f5      	bne.n	b5ed0 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b5ee4:	e7ee      	b.n	b5ec4 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b5ee6 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b5ee6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5ee8:	4605      	mov	r5, r0
   b5eea:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b5eec:	aa01      	add	r2, sp, #4
   b5eee:	4621      	mov	r1, r4
   b5ef0:	4628      	mov	r0, r5
   b5ef2:	f7ff ff58 	bl	b5da6 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b5ef6:	1e06      	subs	r6, r0, #0
   b5ef8:	db10      	blt.n	b5f1c <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b5efa:	2200      	movs	r2, #0
   b5efc:	4621      	mov	r1, r4
   b5efe:	4628      	mov	r0, r5
   b5f00:	f7ff ff88 	bl	b5e14 <_ZN9FatVolume6fatPutEmm>
   b5f04:	b150      	cbz	r0, b5f1c <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b5f06:	68eb      	ldr	r3, [r5, #12]
   b5f08:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b5f0a:	bf24      	itt	cs
   b5f0c:	f104 34ff 	addcs.w	r4, r4, #4294967295
   b5f10:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b5f12:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b5f14:	2e00      	cmp	r6, #0
   b5f16:	d1e9      	bne.n	b5eec <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b5f18:	b002      	add	sp, #8
   b5f1a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b5f1c:	2000      	movs	r0, #0
   b5f1e:	e7fb      	b.n	b5f18 <_ZN9FatVolume9freeChainEm+0x32>

000b5f20 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b5f20:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b5f22:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b5f24:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b5f26:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b5f28:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
   b5f2c:	4604      	mov	r4, r0
  m_fatType = 0;
   b5f2e:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b5f30:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b5f34:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b5f36:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b5f3a:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b5f3c:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b5f40:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b5f44:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b5f48:	460d      	mov	r5, r1
   b5f4a:	b1b9      	cbz	r1, b5f7c <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b5f4c:	2904      	cmp	r1, #4
   b5f4e:	d901      	bls.n	b5f54 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b5f50:	2000      	movs	r0, #0
}
   b5f52:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b5f54:	4611      	mov	r1, r2
   b5f56:	4630      	mov	r0, r6
   b5f58:	f7ff fefc 	bl	b5d54 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5f5c:	2800      	cmp	r0, #0
   b5f5e:	d0f7      	beq.n	b5f50 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b5f60:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b5f64:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b5f68:	065b      	lsls	r3, r3, #25
   b5f6a:	d1f1      	bne.n	b5f50 <_ZN9FatVolume4initEh+0x30>
   b5f6c:	f105 011b 	add.w	r1, r5, #27
   b5f70:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b5f74:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b5f78:	2d00      	cmp	r5, #0
   b5f7a:	d0e9      	beq.n	b5f50 <_ZN9FatVolume4initEh+0x30>
   b5f7c:	2200      	movs	r2, #0
   b5f7e:	4629      	mov	r1, r5
   b5f80:	4630      	mov	r0, r6
   b5f82:	f7ff fee7 	bl	b5d54 <_ZN8FatCache4readEmh>
  if (!pc) {
   b5f86:	2800      	cmp	r0, #0
   b5f88:	d0e2      	beq.n	b5f50 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b5f8a:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b5f8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b5f92:	d1dd      	bne.n	b5f50 <_ZN9FatVolume4initEh+0x30>
   b5f94:	7c03      	ldrb	r3, [r0, #16]
   b5f96:	2b02      	cmp	r3, #2
   b5f98:	d1da      	bne.n	b5f50 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b5f9a:	89c3      	ldrh	r3, [r0, #14]
   b5f9c:	2b00      	cmp	r3, #0
   b5f9e:	d0d7      	beq.n	b5f50 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b5fa0:	7b41      	ldrb	r1, [r0, #13]
   b5fa2:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b5fa4:	1e4b      	subs	r3, r1, #1
   b5fa6:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b5fa8:	2300      	movs	r3, #0
   b5faa:	71a3      	strb	r3, [r4, #6]
   b5fac:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b5fae:	2301      	movs	r3, #1
   b5fb0:	4299      	cmp	r1, r3
   b5fb2:	d007      	beq.n	b5fc4 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b5fb4:	3e01      	subs	r6, #1
   b5fb6:	d0cb      	beq.n	b5f50 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b5fb8:	79a2      	ldrb	r2, [r4, #6]
   b5fba:	005b      	lsls	r3, r3, #1
   b5fbc:	3201      	adds	r2, #1
   b5fbe:	b2db      	uxtb	r3, r3
   b5fc0:	71a2      	strb	r2, [r4, #6]
   b5fc2:	e7f5      	b.n	b5fb0 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b5fc4:	8ac1      	ldrh	r1, [r0, #22]
   b5fc6:	b901      	cbnz	r1, b5fca <_ZN9FatVolume4initEh+0xaa>
   b5fc8:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b5fca:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b5fcc:	89c3      	ldrh	r3, [r0, #14]
   b5fce:	442b      	add	r3, r5
   b5fd0:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b5fd2:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b5fd6:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b5fd8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b5fdc:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b5fde:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b5fe2:	0149      	lsls	r1, r1, #5
   b5fe4:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b5fe8:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b5fec:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b5fee:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b5ff2:	b902      	cbnz	r2, b5ff6 <_ZN9FatVolume4initEh+0xd6>
   b5ff4:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b5ff6:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b5ff8:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b5ffa:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b5ffc:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b5ffe:	1c4b      	adds	r3, r1, #1
   b6000:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b6002:	f640 73f4 	movw	r3, #4084	; 0xff4
   b6006:	4299      	cmp	r1, r3
   b6008:	d802      	bhi.n	b6010 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b600a:	230c      	movs	r3, #12
   b600c:	71e3      	strb	r3, [r4, #7]
   b600e:	e79f      	b.n	b5f50 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b6010:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b6014:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b6016:	bf85      	ittet	hi
   b6018:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b601a:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b601c:	2310      	movls	r3, #16
    m_fatType = 32;
   b601e:	2320      	movhi	r3, #32
   b6020:	71e3      	strb	r3, [r4, #7]
  return true;
   b6022:	2001      	movs	r0, #1
   b6024:	e795      	b.n	b5f52 <_ZN9FatVolume4initEh+0x32>

000b6026 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b6026:	f000 bacb 	b.w	b65c0 <_ZN14SdSpiAltDriver4sendEh>

000b602a <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b602a:	f000 baae 	b.w	b658a <_ZN14SdSpiAltDriver7receiveEv>
	...

000b6030 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b6030:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b6032:	4e0e      	ldr	r6, [pc, #56]	; (b606c <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b6034:	460d      	mov	r5, r1
   b6036:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b6038:	f000 ffa4 	bl	b6f84 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b603c:	6833      	ldr	r3, [r6, #0]
   b603e:	1ac0      	subs	r0, r0, r3
   b6040:	4b0b      	ldr	r3, [pc, #44]	; (b6070 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b6042:	4298      	cmp	r0, r3
   b6044:	d908      	bls.n	b6058 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6046:	f000 ffa5 	bl	b6f94 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b604a:	4b0a      	ldr	r3, [pc, #40]	; (b6074 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b604c:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b604e:	f001 f9b7 	bl	b73c0 <spark_process>
   b6052:	f000 ff97 	bl	b6f84 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b6056:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6058:	f000 ff9c 	bl	b6f94 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b605c:	b280      	uxth	r0, r0
   b605e:	1b40      	subs	r0, r0, r5
}
   b6060:	42a0      	cmp	r0, r4
   b6062:	bfd4      	ite	le
   b6064:	2000      	movle	r0, #0
   b6066:	2001      	movgt	r0, #1
   b6068:	bd70      	pop	{r4, r5, r6, pc}
   b606a:	bf00      	nop
   b606c:	2003e67c 	.word	0x2003e67c
   b6070:	000186a0 	.word	0x000186a0
   b6074:	2003e728 	.word	0x2003e728

000b6078 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b6078:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b607a:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b607c:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b607e:	b94d      	cbnz	r5, b6094 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b6080:	6840      	ldr	r0, [r0, #4]
   b6082:	f000 fa6b 	bl	b655c <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b6086:	6863      	ldr	r3, [r4, #4]
   b6088:	4629      	mov	r1, r5
   b608a:	7d18      	ldrb	r0, [r3, #20]
   b608c:	f002 f917 	bl	b82be <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b6090:	2301      	movs	r3, #1
   b6092:	7223      	strb	r3, [r4, #8]
  }
}
   b6094:	bd38      	pop	{r3, r4, r5, pc}

000b6096 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b6096:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b6098:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b609a:	4604      	mov	r4, r0
  if (m_spiActive) {
   b609c:	b16b      	cbz	r3, b60ba <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b609e:	6843      	ldr	r3, [r0, #4]
   b60a0:	2101      	movs	r1, #1
   b60a2:	7d18      	ldrb	r0, [r3, #20]
   b60a4:	f002 f90b 	bl	b82be <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b60a8:	6860      	ldr	r0, [r4, #4]
   b60aa:	21ff      	movs	r1, #255	; 0xff
   b60ac:	f7ff ffbb 	bl	b6026 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b60b0:	6860      	ldr	r0, [r4, #4]
   b60b2:	f000 fa67 	bl	b6584 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b60b6:	2300      	movs	r3, #0
   b60b8:	7223      	strb	r3, [r4, #8]
  }
}
   b60ba:	bd10      	pop	{r4, pc}

000b60bc <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b60bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b60be:	4604      	mov	r4, r0
   b60c0:	460d      	mov	r5, r1
   b60c2:	4616      	mov	r6, r2
   b60c4:	f000 ff66 	bl	b6f94 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b60c8:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b60ca:	6860      	ldr	r0, [r4, #4]
   b60cc:	f7ff ffad 	bl	b602a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b60d0:	28ff      	cmp	r0, #255	; 0xff
   b60d2:	7260      	strb	r0, [r4, #9]
   b60d4:	d10e      	bne.n	b60f4 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b60d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b60da:	4639      	mov	r1, r7
   b60dc:	4620      	mov	r0, r4
   b60de:	f7ff ffa7 	bl	b6030 <_ZN9SdSpiCard10isTimedOutEtt>
   b60e2:	2800      	cmp	r0, #0
   b60e4:	d0f1      	beq.n	b60ca <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b60e6:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b60e8:	4620      	mov	r0, r4
   b60ea:	7023      	strb	r3, [r4, #0]
   b60ec:	f7ff ffd3 	bl	b6096 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b60f0:	2000      	movs	r0, #0
}
   b60f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b60f4:	28fe      	cmp	r0, #254	; 0xfe
   b60f6:	d001      	beq.n	b60fc <_ZN9SdSpiCard8readDataEPhj+0x40>
   b60f8:	2350      	movs	r3, #80	; 0x50
   b60fa:	e7f5      	b.n	b60e8 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b60fc:	6860      	ldr	r0, [r4, #4]
   b60fe:	4632      	mov	r2, r6
   b6100:	4629      	mov	r1, r5
   b6102:	f000 fa47 	bl	b6594 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b6106:	7260      	strb	r0, [r4, #9]
   b6108:	b108      	cbz	r0, b610e <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b610a:	2360      	movs	r3, #96	; 0x60
   b610c:	e7ec      	b.n	b60e8 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b610e:	6860      	ldr	r0, [r4, #4]
   b6110:	f7ff ff8b 	bl	b602a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b6114:	6860      	ldr	r0, [r4, #4]
   b6116:	f7ff ff88 	bl	b602a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b611a:	2001      	movs	r0, #1
   b611c:	e7e9      	b.n	b60f2 <_ZN9SdSpiCard8readDataEPhj+0x36>

000b611e <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b611e:	b570      	push	{r4, r5, r6, lr}
   b6120:	4604      	mov	r4, r0
   b6122:	460e      	mov	r6, r1
   b6124:	f000 ff36 	bl	b6f94 <HAL_Timer_Get_Milli_Seconds>
   b6128:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b612a:	4632      	mov	r2, r6
   b612c:	4629      	mov	r1, r5
   b612e:	4620      	mov	r0, r4
   b6130:	f7ff ff7e 	bl	b6030 <_ZN9SdSpiCard10isTimedOutEtt>
   b6134:	b930      	cbnz	r0, b6144 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b6136:	6860      	ldr	r0, [r4, #4]
   b6138:	f7ff ff77 	bl	b602a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b613c:	28ff      	cmp	r0, #255	; 0xff
   b613e:	d1f4      	bne.n	b612a <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b6140:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b6142:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b6144:	2000      	movs	r0, #0
   b6146:	e7fc      	b.n	b6142 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b6148 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b6148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b614a:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b614c:	9201      	str	r2, [sp, #4]
   b614e:	4604      	mov	r4, r0
   b6150:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b6152:	b90b      	cbnz	r3, b6158 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b6154:	f7ff ff90 	bl	b6078 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b6158:	b125      	cbz	r5, b6164 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b615a:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b615e:	4620      	mov	r0, r4
   b6160:	f7ff ffdd 	bl	b611e <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b6164:	6860      	ldr	r0, [r4, #4]
   b6166:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b616a:	f7ff ff5c 	bl	b6026 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b616e:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b6170:	af01      	add	r7, sp, #4
   b6172:	5db9      	ldrb	r1, [r7, r6]
   b6174:	6860      	ldr	r0, [r4, #4]
   b6176:	f7ff ff56 	bl	b6026 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b617a:	3e01      	subs	r6, #1
   b617c:	d2f9      	bcs.n	b6172 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b617e:	2d00      	cmp	r5, #0
   b6180:	6860      	ldr	r0, [r4, #4]
   b6182:	bf0c      	ite	eq
   b6184:	2195      	moveq	r1, #149	; 0x95
   b6186:	2187      	movne	r1, #135	; 0x87
   b6188:	f7ff ff4d 	bl	b6026 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b618c:	6860      	ldr	r0, [r4, #4]
   b618e:	f7ff ff4c 	bl	b602a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6192:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b6194:	6860      	ldr	r0, [r4, #4]
   b6196:	f7ff ff48 	bl	b602a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b619a:	0603      	lsls	r3, r0, #24
   b619c:	7260      	strb	r0, [r4, #9]
   b619e:	d503      	bpl.n	b61a8 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b61a0:	3d01      	subs	r5, #1
   b61a2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b61a6:	d1f5      	bne.n	b6194 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b61a8:	b003      	add	sp, #12
   b61aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b61ac <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b61ac:	b570      	push	{r4, r5, r6, lr}
   b61ae:	4604      	mov	r4, r0
   b61b0:	460d      	mov	r5, r1
   b61b2:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b61b4:	2137      	movs	r1, #55	; 0x37
   b61b6:	2200      	movs	r2, #0
   b61b8:	f7ff ffc6 	bl	b6148 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b61bc:	4632      	mov	r2, r6
   b61be:	4629      	mov	r1, r5
   b61c0:	4620      	mov	r0, r4
  }
   b61c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b61c6:	f7ff bfbf 	b.w	b6148 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b61cc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b61cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b61d0:	2500      	movs	r5, #0
   b61d2:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b61d4:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b61d6:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b61d8:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b61da:	4604      	mov	r4, r0
   b61dc:	4690      	mov	r8, r2
   b61de:	461e      	mov	r6, r3
   b61e0:	f000 fed8 	bl	b6f94 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b61e4:	4641      	mov	r1, r8
   b61e6:	4607      	mov	r7, r0
   b61e8:	6860      	ldr	r0, [r4, #4]
   b61ea:	f000 f9bb 	bl	b6564 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b61ee:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b61f0:	4a49      	ldr	r2, [pc, #292]	; (b6318 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b61f2:	721d      	strb	r5, [r3, #8]
   b61f4:	2501      	movs	r5, #1
   b61f6:	60da      	str	r2, [r3, #12]
   b61f8:	821d      	strh	r5, [r3, #16]
  spiStart();
   b61fa:	4620      	mov	r0, r4
   b61fc:	f7ff ff3c 	bl	b6078 <_ZN9SdSpiCard8spiStartEv>
   b6200:	6863      	ldr	r3, [r4, #4]
   b6202:	4629      	mov	r1, r5
   b6204:	7d18      	ldrb	r0, [r3, #20]
   b6206:	f002 f85a 	bl	b82be <digitalWrite>
   b620a:	250a      	movs	r5, #10
    spiSend(0XFF);
   b620c:	6860      	ldr	r0, [r4, #4]
   b620e:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b6210:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b6212:	f7ff ff08 	bl	b6026 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b6216:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b621a:	d1f7      	bne.n	b620c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b621c:	6863      	ldr	r3, [r4, #4]
   b621e:	4629      	mov	r1, r5
   b6220:	7d18      	ldrb	r0, [r3, #20]
   b6222:	f002 f84c 	bl	b82be <digitalWrite>
  }
   b6226:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b6228:	2200      	movs	r2, #0
   b622a:	4611      	mov	r1, r2
   b622c:	4620      	mov	r0, r4
   b622e:	f7ff ff8b 	bl	b6148 <_ZN9SdSpiCard11cardCommandEhm>
   b6232:	2801      	cmp	r0, #1
   b6234:	4680      	mov	r8, r0
   b6236:	d018      	beq.n	b626a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b6238:	3d01      	subs	r5, #1
   b623a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b623e:	d107      	bne.n	b6250 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b6240:	2320      	movs	r3, #32
  spiStop();
   b6242:	4620      	mov	r0, r4
   b6244:	7023      	strb	r3, [r4, #0]
   b6246:	f7ff ff26 	bl	b6096 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b624a:	2000      	movs	r0, #0
}
   b624c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b6250:	6860      	ldr	r0, [r4, #4]
   b6252:	21fd      	movs	r1, #253	; 0xfd
   b6254:	f7ff fee7 	bl	b6026 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b6258:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b625c:	6860      	ldr	r0, [r4, #4]
   b625e:	f7ff fee4 	bl	b602a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b6262:	f1b8 0801 	subs.w	r8, r8, #1
   b6266:	d1f9      	bne.n	b625c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b6268:	e7de      	b.n	b6228 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b626a:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b626e:	2108      	movs	r1, #8
   b6270:	4620      	mov	r0, r4
   b6272:	f7ff ff69 	bl	b6148 <_ZN9SdSpiCard11cardCommandEhm>
   b6276:	2805      	cmp	r0, #5
   b6278:	d114      	bne.n	b62a4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b627a:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b627e:	2500      	movs	r5, #0
   b6280:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b6282:	462a      	mov	r2, r5
   b6284:	2129      	movs	r1, #41	; 0x29
   b6286:	4620      	mov	r0, r4
   b6288:	f7ff ff90 	bl	b61ac <_ZN9SdSpiCard8cardAcmdEhm>
   b628c:	4602      	mov	r2, r0
   b628e:	b1d8      	cbz	r0, b62c8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b6290:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b6294:	4639      	mov	r1, r7
   b6296:	4620      	mov	r0, r4
   b6298:	f7ff feca 	bl	b6030 <_ZN9SdSpiCard10isTimedOutEtt>
   b629c:	2800      	cmp	r0, #0
   b629e:	d0f0      	beq.n	b6282 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b62a0:	2343      	movs	r3, #67	; 0x43
   b62a2:	e7ce      	b.n	b6242 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b62a4:	2504      	movs	r5, #4
      m_status = spiReceive();
   b62a6:	6860      	ldr	r0, [r4, #4]
   b62a8:	f7ff febf 	bl	b602a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b62ac:	3d01      	subs	r5, #1
   b62ae:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b62b2:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b62b4:	d1f7      	bne.n	b62a6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b62b6:	28aa      	cmp	r0, #170	; 0xaa
   b62b8:	d104      	bne.n	b62c4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b62ba:	2302      	movs	r3, #2
   b62bc:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b62be:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b62c2:	e7dd      	b.n	b6280 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b62c4:	2325      	movs	r3, #37	; 0x25
   b62c6:	e7bc      	b.n	b6242 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b62c8:	7aa3      	ldrb	r3, [r4, #10]
   b62ca:	2b02      	cmp	r3, #2
   b62cc:	d118      	bne.n	b6300 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b62ce:	213a      	movs	r1, #58	; 0x3a
   b62d0:	4620      	mov	r0, r4
   b62d2:	f7ff ff39 	bl	b6148 <_ZN9SdSpiCard11cardCommandEhm>
   b62d6:	b108      	cbz	r0, b62dc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b62d8:	2337      	movs	r3, #55	; 0x37
   b62da:	e7b2      	b.n	b6242 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b62dc:	6860      	ldr	r0, [r4, #4]
   b62de:	f7ff fea4 	bl	b602a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b62e2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b62e6:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b62e8:	bf04      	itt	eq
   b62ea:	2303      	moveq	r3, #3
   b62ec:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b62ee:	6860      	ldr	r0, [r4, #4]
   b62f0:	f7ff fe9b 	bl	b602a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b62f4:	6860      	ldr	r0, [r4, #4]
   b62f6:	f7ff fe98 	bl	b602a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b62fa:	6860      	ldr	r0, [r4, #4]
   b62fc:	f7ff fe95 	bl	b602a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b6300:	4620      	mov	r0, r4
   b6302:	f7ff fec8 	bl	b6096 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b6306:	6863      	ldr	r3, [r4, #4]
   b6308:	7930      	ldrb	r0, [r6, #4]
   b630a:	68b1      	ldr	r1, [r6, #8]
   b630c:	89b2      	ldrh	r2, [r6, #12]
   b630e:	821a      	strh	r2, [r3, #16]
   b6310:	7218      	strb	r0, [r3, #8]
   b6312:	60d9      	str	r1, [r3, #12]
  return true;
   b6314:	2001      	movs	r0, #1
   b6316:	e799      	b.n	b624c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b6318:	0003d090 	.word	0x0003d090

000b631c <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b631c:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b631e:	7a83      	ldrb	r3, [r0, #10]
   b6320:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b6322:	bf18      	it	ne
   b6324:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b6326:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b6328:	460a      	mov	r2, r1
   b632a:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b632c:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b632e:	f7ff ff0b 	bl	b6148 <_ZN9SdSpiCard11cardCommandEhm>
   b6332:	b130      	cbz	r0, b6342 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b6334:	2330      	movs	r3, #48	; 0x30
   b6336:	7023      	strb	r3, [r4, #0]
  spiStop();
   b6338:	4620      	mov	r0, r4
   b633a:	f7ff feac 	bl	b6096 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b633e:	2500      	movs	r5, #0
   b6340:	e00b      	b.n	b635a <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b6342:	4629      	mov	r1, r5
   b6344:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6348:	4620      	mov	r0, r4
   b634a:	f7ff feb7 	bl	b60bc <_ZN9SdSpiCard8readDataEPhj>
   b634e:	4605      	mov	r5, r0
   b6350:	2800      	cmp	r0, #0
   b6352:	d0f1      	beq.n	b6338 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b6354:	4620      	mov	r0, r4
   b6356:	f7ff fe9e 	bl	b6096 <_ZN9SdSpiCard7spiStopEv>
}
   b635a:	4628      	mov	r0, r5
   b635c:	bd38      	pop	{r3, r4, r5, pc}

000b635e <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b635e:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b6360:	7a83      	ldrb	r3, [r0, #10]
   b6362:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b6364:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b6366:	bf18      	it	ne
   b6368:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b636a:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b636c:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b636e:	f7ff feeb 	bl	b6148 <_ZN9SdSpiCard11cardCommandEhm>
   b6372:	b130      	cbz	r0, b6382 <_ZN9SdSpiCard9readStartEm+0x24>
   b6374:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b6376:	4620      	mov	r0, r4
   b6378:	7023      	strb	r3, [r4, #0]
   b637a:	f7ff fe8c 	bl	b6096 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b637e:	2000      	movs	r0, #0
}
   b6380:	bd10      	pop	{r4, pc}
  return true;
   b6382:	2001      	movs	r0, #1
   b6384:	e7fc      	b.n	b6380 <_ZN9SdSpiCard9readStartEm+0x22>

000b6386 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b6386:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b6388:	2200      	movs	r2, #0
   b638a:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b638c:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b638e:	f7ff fedb 	bl	b6148 <_ZN9SdSpiCard11cardCommandEhm>
   b6392:	b130      	cbz	r0, b63a2 <_ZN9SdSpiCard8readStopEv+0x1c>
   b6394:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b6396:	4620      	mov	r0, r4
   b6398:	7023      	strb	r3, [r4, #0]
   b639a:	f7ff fe7c 	bl	b6096 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b639e:	2000      	movs	r0, #0
}
   b63a0:	bd10      	pop	{r4, pc}
  spiStop();
   b63a2:	4620      	mov	r0, r4
   b63a4:	f7ff fe77 	bl	b6096 <_ZN9SdSpiCard7spiStopEv>
  return true;
   b63a8:	2001      	movs	r0, #1
   b63aa:	e7f9      	b.n	b63a0 <_ZN9SdSpiCard8readStopEv+0x1a>

000b63ac <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b63ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b63ae:	4604      	mov	r4, r0
   b63b0:	4616      	mov	r6, r2
   b63b2:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b63b4:	f7ff ffd3 	bl	b635e <_ZN9SdSpiCard9readStartEm>
   b63b8:	b168      	cbz	r0, b63d6 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b63ba:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b63bc:	b2ab      	uxth	r3, r5
   b63be:	429f      	cmp	r7, r3
   b63c0:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b63c4:	d909      	bls.n	b63da <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b63c6:	f44f 7200 	mov.w	r2, #512	; 0x200
   b63ca:	4620      	mov	r0, r4
   b63cc:	f7ff fe76 	bl	b60bc <_ZN9SdSpiCard8readDataEPhj>
   b63d0:	3501      	adds	r5, #1
   b63d2:	2800      	cmp	r0, #0
   b63d4:	d1f2      	bne.n	b63bc <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b63d6:	2000      	movs	r0, #0
   b63d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b63da:	4620      	mov	r0, r4
}
   b63dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b63e0:	f7ff bfd1 	b.w	b6386 <_ZN9SdSpiCard8readStopEv>

000b63e4 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b63e4:	b538      	push	{r3, r4, r5, lr}
   b63e6:	4604      	mov	r4, r0
   b63e8:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b63ea:	6840      	ldr	r0, [r0, #4]
   b63ec:	f7ff fe1b 	bl	b6026 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b63f0:	f44f 7200 	mov.w	r2, #512	; 0x200
   b63f4:	6860      	ldr	r0, [r4, #4]
   b63f6:	4629      	mov	r1, r5
   b63f8:	f000 f8e6 	bl	b65c8 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b63fc:	6860      	ldr	r0, [r4, #4]
   b63fe:	21ff      	movs	r1, #255	; 0xff
   b6400:	f7ff fe11 	bl	b6026 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b6404:	6860      	ldr	r0, [r4, #4]
   b6406:	21ff      	movs	r1, #255	; 0xff
   b6408:	f7ff fe0d 	bl	b6026 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b640c:	6860      	ldr	r0, [r4, #4]
   b640e:	f7ff fe0c 	bl	b602a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6412:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b6414:	f000 001f 	and.w	r0, r0, #31
   b6418:	2805      	cmp	r0, #5
   b641a:	d006      	beq.n	b642a <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b641c:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b641e:	4620      	mov	r0, r4
   b6420:	7023      	strb	r3, [r4, #0]
   b6422:	f7ff fe38 	bl	b6096 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6426:	2000      	movs	r0, #0
}
   b6428:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b642a:	2001      	movs	r0, #1
   b642c:	e7fc      	b.n	b6428 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b642e <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b642e:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b6430:	7a83      	ldrb	r3, [r0, #10]
   b6432:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b6434:	bf18      	it	ne
   b6436:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b6438:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b643a:	460a      	mov	r2, r1
   b643c:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b643e:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b6440:	f7ff fe82 	bl	b6148 <_ZN9SdSpiCard11cardCommandEhm>
   b6444:	4606      	mov	r6, r0
   b6446:	b130      	cbz	r0, b6456 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b6448:	2332      	movs	r3, #50	; 0x32
   b644a:	7023      	strb	r3, [r4, #0]
  spiStop();
   b644c:	4620      	mov	r0, r4
   b644e:	f7ff fe22 	bl	b6096 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6452:	2500      	movs	r5, #0
   b6454:	e01f      	b.n	b6496 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b6456:	462a      	mov	r2, r5
   b6458:	21fe      	movs	r1, #254	; 0xfe
   b645a:	4620      	mov	r0, r4
   b645c:	f7ff ffc2 	bl	b63e4 <_ZN9SdSpiCard9writeDataEhPKh>
   b6460:	2800      	cmp	r0, #0
   b6462:	d0f3      	beq.n	b644c <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6464:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b6468:	4620      	mov	r0, r4
   b646a:	f7ff fe58 	bl	b611e <_ZN9SdSpiCard11waitNotBusyEt>
   b646e:	4605      	mov	r5, r0
   b6470:	b908      	cbnz	r0, b6476 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b6472:	235a      	movs	r3, #90	; 0x5a
   b6474:	e7e9      	b.n	b644a <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b6476:	4632      	mov	r2, r6
   b6478:	210d      	movs	r1, #13
   b647a:	4620      	mov	r0, r4
   b647c:	f7ff fe64 	bl	b6148 <_ZN9SdSpiCard11cardCommandEhm>
   b6480:	b108      	cbz	r0, b6486 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b6482:	2329      	movs	r3, #41	; 0x29
   b6484:	e7e1      	b.n	b644a <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b6486:	6860      	ldr	r0, [r4, #4]
   b6488:	f7ff fdcf 	bl	b602a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b648c:	2800      	cmp	r0, #0
   b648e:	d1f8      	bne.n	b6482 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b6490:	4620      	mov	r0, r4
   b6492:	f7ff fe00 	bl	b6096 <_ZN9SdSpiCard7spiStopEv>
}
   b6496:	4628      	mov	r0, r5
   b6498:	bd70      	pop	{r4, r5, r6, pc}

000b649a <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b649a:	b513      	push	{r0, r1, r4, lr}
   b649c:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b649e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b64a2:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b64a4:	f7ff fe3b 	bl	b611e <_ZN9SdSpiCard11waitNotBusyEt>
   b64a8:	9a01      	ldr	r2, [sp, #4]
   b64aa:	b930      	cbnz	r0, b64ba <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b64ac:	235b      	movs	r3, #91	; 0x5b
   b64ae:	7023      	strb	r3, [r4, #0]
  spiStop();
   b64b0:	4620      	mov	r0, r4
   b64b2:	f7ff fdf0 	bl	b6096 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b64b6:	2000      	movs	r0, #0
   b64b8:	e005      	b.n	b64c6 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b64ba:	21fc      	movs	r1, #252	; 0xfc
   b64bc:	4620      	mov	r0, r4
   b64be:	f7ff ff91 	bl	b63e4 <_ZN9SdSpiCard9writeDataEhPKh>
   b64c2:	2800      	cmp	r0, #0
   b64c4:	d0f4      	beq.n	b64b0 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b64c6:	b002      	add	sp, #8
   b64c8:	bd10      	pop	{r4, pc}

000b64ca <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b64ca:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b64cc:	7a83      	ldrb	r3, [r0, #10]
   b64ce:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b64d0:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b64d2:	bf18      	it	ne
   b64d4:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b64d6:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b64d8:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b64da:	f7ff fe35 	bl	b6148 <_ZN9SdSpiCard11cardCommandEhm>
   b64de:	b130      	cbz	r0, b64ee <_ZN9SdSpiCard10writeStartEm+0x24>
   b64e0:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b64e2:	4620      	mov	r0, r4
   b64e4:	7023      	strb	r3, [r4, #0]
   b64e6:	f7ff fdd6 	bl	b6096 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b64ea:	2000      	movs	r0, #0
}
   b64ec:	bd10      	pop	{r4, pc}
  return true;
   b64ee:	2001      	movs	r0, #1
   b64f0:	e7fc      	b.n	b64ec <_ZN9SdSpiCard10writeStartEm+0x22>

000b64f2 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b64f2:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b64f4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b64f8:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b64fa:	f7ff fe10 	bl	b611e <_ZN9SdSpiCard11waitNotBusyEt>
   b64fe:	4605      	mov	r5, r0
   b6500:	b930      	cbnz	r0, b6510 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b6502:	2356      	movs	r3, #86	; 0x56
   b6504:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b6506:	4620      	mov	r0, r4
   b6508:	f7ff fdc5 	bl	b6096 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b650c:	4628      	mov	r0, r5
   b650e:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b6510:	6860      	ldr	r0, [r4, #4]
   b6512:	21fd      	movs	r1, #253	; 0xfd
   b6514:	f7ff fd87 	bl	b6026 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b6518:	e7f5      	b.n	b6506 <_ZN9SdSpiCard9writeStopEv+0x14>

000b651a <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b651a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b651c:	4604      	mov	r4, r0
   b651e:	4616      	mov	r6, r2
   b6520:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b6522:	f7ff ffd2 	bl	b64ca <_ZN9SdSpiCard10writeStartEm>
   b6526:	b170      	cbz	r0, b6546 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b6528:	2500      	movs	r5, #0
   b652a:	42bd      	cmp	r5, r7
   b652c:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b6530:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b6532:	d004      	beq.n	b653e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b6534:	f7ff ffb1 	bl	b649a <_ZN9SdSpiCard9writeDataEPKh>
   b6538:	b128      	cbz	r0, b6546 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b653a:	3501      	adds	r5, #1
   b653c:	e7f5      	b.n	b652a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b653e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b6542:	f7ff bfd6 	b.w	b64f2 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b6546:	4620      	mov	r0, r4
   b6548:	f7ff fda5 	bl	b6096 <_ZN9SdSpiCard7spiStopEv>
}
   b654c:	2000      	movs	r0, #0
   b654e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6550 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b6550:	4b01      	ldr	r3, [pc, #4]	; (b6558 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b6552:	2201      	movs	r2, #1
   b6554:	701a      	strb	r2, [r3, #0]
}
   b6556:	4770      	bx	lr
   b6558:	2003e680 	.word	0x2003e680

000b655c <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b655c:	1d01      	adds	r1, r0, #4
   b655e:	6800      	ldr	r0, [r0, #0]
   b6560:	f001 b802 	b.w	b7568 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b6564 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b6564:	b510      	push	{r4, lr}
   b6566:	4604      	mov	r4, r0
  m_csPin = csPin;
   b6568:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b656a:	6800      	ldr	r0, [r0, #0]
   b656c:	f000 ffce 	bl	b750c <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b6570:	7d20      	ldrb	r0, [r4, #20]
   b6572:	2101      	movs	r1, #1
   b6574:	f001 fe92 	bl	b829c <pinMode>
  digitalWrite(m_csPin, HIGH);
   b6578:	7d20      	ldrb	r0, [r4, #20]
   b657a:	2101      	movs	r1, #1
}
   b657c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b6580:	f001 be9d 	b.w	b82be <digitalWrite>

000b6584 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b6584:	6800      	ldr	r0, [r0, #0]
   b6586:	f000 bfd5 	b.w	b7534 <_ZN8SPIClass14endTransactionEv>

000b658a <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b658a:	6800      	ldr	r0, [r0, #0]
   b658c:	21ff      	movs	r1, #255	; 0xff
   b658e:	f001 b859 	b.w	b7644 <_ZN8SPIClass8transferEh>
	...

000b6594 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b6594:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6596:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b6598:	4a07      	ldr	r2, [pc, #28]	; (b65b8 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b659a:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b659c:	2500      	movs	r5, #0
   b659e:	4c07      	ldr	r4, [pc, #28]	; (b65bc <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b65a0:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b65a2:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b65a4:	460a      	mov	r2, r1
   b65a6:	4629      	mov	r1, r5
   b65a8:	f001 f852 	bl	b7650 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b65ac:	7823      	ldrb	r3, [r4, #0]
   b65ae:	2b00      	cmp	r3, #0
   b65b0:	d0fc      	beq.n	b65ac <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b65b2:	2000      	movs	r0, #0
   b65b4:	b003      	add	sp, #12
   b65b6:	bd30      	pop	{r4, r5, pc}
   b65b8:	000b6551 	.word	0x000b6551
   b65bc:	2003e680 	.word	0x2003e680

000b65c0 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b65c0:	6800      	ldr	r0, [r0, #0]
   b65c2:	f001 b83f 	b.w	b7644 <_ZN8SPIClass8transferEh>
	...

000b65c8 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b65c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b65ca:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b65cc:	4a06      	ldr	r2, [pc, #24]	; (b65e8 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b65ce:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b65d0:	2500      	movs	r5, #0
   b65d2:	4c06      	ldr	r4, [pc, #24]	; (b65ec <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b65d4:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b65d6:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b65d8:	462a      	mov	r2, r5
   b65da:	f001 f839 	bl	b7650 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b65de:	7823      	ldrb	r3, [r4, #0]
   b65e0:	2b00      	cmp	r3, #0
   b65e2:	d0fc      	beq.n	b65de <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b65e4:	b003      	add	sp, #12
   b65e6:	bd30      	pop	{r4, r5, pc}
   b65e8:	000b6551 	.word	0x000b6551
   b65ec:	2003e680 	.word	0x2003e680

000b65f0 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b65f0:	b510      	push	{r4, lr}
   b65f2:	4b04      	ldr	r3, [pc, #16]	; (b6604 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b65f4:	6003      	str	r3, [r0, #0]
   b65f6:	4604      	mov	r4, r0
  if(buffer) {
   b65f8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b65fa:	b108      	cbz	r0, b6600 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b65fc:	f000 ff08 	bl	b7410 <free>
    buffer = NULL;
  }
}
   b6600:	4620      	mov	r0, r4
   b6602:	bd10      	pop	{r4, pc}
   b6604:	000b9bdc 	.word	0x000b9bdc

000b6608 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b6608:	b510      	push	{r4, lr}
   b660a:	4604      	mov	r4, r0
}
   b660c:	f7ff fff0 	bl	b65f0 <_ZN16Adafruit_SSD1306D1Ev>
   b6610:	4620      	mov	r0, r4
   b6612:	2150      	movs	r1, #80	; 0x50
   b6614:	f7fd fd43 	bl	b409e <_ZdlPvj>
   b6618:	4620      	mov	r0, r4
   b661a:	bd10      	pop	{r4, pc}

000b661c <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b661c:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b661e:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b6620:	db4b      	blt.n	b66ba <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b6622:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b6626:	428c      	cmp	r4, r1
   b6628:	dd47      	ble.n	b66ba <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b662a:	2a00      	cmp	r2, #0
   b662c:	db45      	blt.n	b66ba <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b662e:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b6632:	4294      	cmp	r4, r2
   b6634:	dd41      	ble.n	b66ba <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b6636:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b6638:	2c02      	cmp	r4, #2
   b663a:	d01f      	beq.n	b667c <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b663c:	2c03      	cmp	r4, #3
   b663e:	d026      	beq.n	b668e <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b6640:	2c01      	cmp	r4, #1
   b6642:	d104      	bne.n	b664e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b6644:	8904      	ldrh	r4, [r0, #8]
   b6646:	43d2      	mvns	r2, r2
   b6648:	4414      	add	r4, r2
      break;
   b664a:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b664c:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b664e:	2b01      	cmp	r3, #1
   b6650:	d023      	beq.n	b669a <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b6652:	2b02      	cmp	r3, #2
   b6654:	d032      	beq.n	b66bc <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b6656:	bb83      	cbnz	r3, b66ba <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b6658:	2a00      	cmp	r2, #0
   b665a:	4613      	mov	r3, r2
   b665c:	8904      	ldrh	r4, [r0, #8]
   b665e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6660:	bfb8      	it	lt
   b6662:	1dd3      	addlt	r3, r2, #7
   b6664:	10db      	asrs	r3, r3, #3
   b6666:	fb13 1104 	smlabb	r1, r3, r4, r1
   b666a:	f002 0207 	and.w	r2, r2, #7
   b666e:	2301      	movs	r3, #1
   b6670:	4093      	lsls	r3, r2
   b6672:	5c42      	ldrb	r2, [r0, r1]
   b6674:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b6678:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b667a:	e01e      	b.n	b66ba <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b667c:	8904      	ldrh	r4, [r0, #8]
   b667e:	3c01      	subs	r4, #1
   b6680:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b6682:	8944      	ldrh	r4, [r0, #10]
   b6684:	43d2      	mvns	r2, r2
   b6686:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b6688:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b668a:	b212      	sxth	r2, r2
      break;
   b668c:	e7df      	b.n	b664e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b668e:	8944      	ldrh	r4, [r0, #10]
   b6690:	3c01      	subs	r4, #1
   b6692:	1a64      	subs	r4, r4, r1
      break;
   b6694:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b6696:	b222      	sxth	r2, r4
      break;
   b6698:	e7d9      	b.n	b664e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b669a:	2a00      	cmp	r2, #0
   b669c:	8904      	ldrh	r4, [r0, #8]
   b669e:	4613      	mov	r3, r2
   b66a0:	bfb8      	it	lt
   b66a2:	1dd3      	addlt	r3, r2, #7
   b66a4:	10db      	asrs	r3, r3, #3
   b66a6:	fb13 1104 	smlabb	r1, r3, r4, r1
   b66aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b66ac:	f002 0007 	and.w	r0, r2, #7
   b66b0:	2201      	movs	r2, #1
   b66b2:	4082      	lsls	r2, r0
   b66b4:	5c58      	ldrb	r0, [r3, r1]
   b66b6:	4302      	orrs	r2, r0
   b66b8:	545a      	strb	r2, [r3, r1]
}
   b66ba:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b66bc:	2a00      	cmp	r2, #0
   b66be:	4613      	mov	r3, r2
   b66c0:	8904      	ldrh	r4, [r0, #8]
   b66c2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b66c4:	bfb8      	it	lt
   b66c6:	1dd3      	addlt	r3, r2, #7
   b66c8:	10db      	asrs	r3, r3, #3
   b66ca:	fb13 1104 	smlabb	r1, r3, r4, r1
   b66ce:	f002 0207 	and.w	r2, r2, #7
   b66d2:	2301      	movs	r3, #1
   b66d4:	fa03 f202 	lsl.w	r2, r3, r2
   b66d8:	5c43      	ldrb	r3, [r0, r1]
   b66da:	405a      	eors	r2, r3
   b66dc:	e7cc      	b.n	b6678 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b66e0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b66e0:	b570      	push	{r4, r5, r6, lr}
   b66e2:	4604      	mov	r4, r0
   b66e4:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b66e6:	2600      	movs	r6, #0
   b66e8:	f7fe f954 	bl	b4994 <_ZN12Adafruit_GFXC1Ess>
   b66ec:	4b11      	ldr	r3, [pc, #68]	; (b6734 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b66ee:	6023      	str	r3, [r4, #0]
   b66f0:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b66f2:	b915      	cbnz	r5, b66fa <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b66f4:	f001 fe94 	bl	b8420 <_Z19__fetch_global_Wirev>
   b66f8:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b66fa:	23ff      	movs	r3, #255	; 0xff
   b66fc:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b6700:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b6704:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b6708:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b670c:	4b0a      	ldr	r3, [pc, #40]	; (b6738 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b670e:	63a3      	str	r3, [r4, #56]	; 0x38
   b6710:	2301      	movs	r3, #1
   b6712:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b6716:	9b05      	ldr	r3, [sp, #20]
   b6718:	64a3      	str	r3, [r4, #72]	; 0x48
   b671a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b671e:	9b06      	ldr	r3, [sp, #24]
   b6720:	86a2      	strh	r2, [r4, #52]	; 0x34
   b6722:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b6726:	6426      	str	r6, [r4, #64]	; 0x40
   b6728:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b672c:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b672e:	4620      	mov	r0, r4
   b6730:	bd70      	pop	{r4, r5, r6, pc}
   b6732:	bf00      	nop
   b6734:	000b9bdc 	.word	0x000b9bdc
   b6738:	000b9150 	.word	0x000b9150

000b673c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b673c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b673e:	4604      	mov	r4, r0
  if(wire) { // I2C
   b6740:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b6742:	460d      	mov	r5, r1
  if(wire) { // I2C
   b6744:	b190      	cbz	r0, b676c <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b6746:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b674a:	f001 fca3 	bl	b8094 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b674e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6750:	6803      	ldr	r3, [r0, #0]
   b6752:	2100      	movs	r1, #0
   b6754:	689b      	ldr	r3, [r3, #8]
   b6756:	4798      	blx	r3
    WIRE_WRITE(c);
   b6758:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b675a:	6803      	ldr	r3, [r0, #0]
   b675c:	4629      	mov	r1, r5
   b675e:	689b      	ldr	r3, [r3, #8]
   b6760:	4798      	blx	r3
    wire->endTransmission();
   b6762:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b6764:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b6768:	f001 bc9b 	b.w	b80a2 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b676c:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b6770:	4601      	mov	r1, r0
   b6772:	b298      	uxth	r0, r3
   b6774:	f001 fda3 	bl	b82be <digitalWrite>
  if(spi) {
   b6778:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b677a:	b120      	cbz	r0, b6786 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b677c:	4629      	mov	r1, r5
}
   b677e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b6782:	f000 bf5f 	b.w	b7644 <_ZN8SPIClass8transferEh>
   b6786:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6788:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b678a:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b678e:	ea05 0107 	and.w	r1, r5, r7
   b6792:	b280      	uxth	r0, r0
   b6794:	f001 fd93 	bl	b82be <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b6798:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b679c:	2101      	movs	r1, #1
   b679e:	b280      	uxth	r0, r0
   b67a0:	f001 fd8d 	bl	b82be <digitalWrite>
      digitalWrite(clkPin , LOW);
   b67a4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b67a8:	2100      	movs	r1, #0
   b67aa:	b280      	uxth	r0, r0
   b67ac:	f001 fd87 	bl	b82be <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b67b0:	3e01      	subs	r6, #1
   b67b2:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b67b6:	d1e8      	bne.n	b678a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b67b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b67ba <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b67ba:	b538      	push	{r3, r4, r5, lr}
   b67bc:	4604      	mov	r4, r0
  TRANSACTION_START
   b67be:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b67c0:	460d      	mov	r5, r1
  TRANSACTION_START
   b67c2:	b180      	cbz	r0, b67e6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b67c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b67c6:	f001 fc57 	bl	b8078 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b67ca:	2d00      	cmp	r5, #0
   b67cc:	4620      	mov	r0, r4
   b67ce:	bf14      	ite	ne
   b67d0:	21a7      	movne	r1, #167	; 0xa7
   b67d2:	21a6      	moveq	r1, #166	; 0xa6
   b67d4:	f7ff ffb2 	bl	b673c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b67d8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b67da:	b188      	cbz	r0, b6800 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b67dc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b67de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b67e2:	f001 bc49 	b.w	b8078 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b67e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b67e8:	b118      	cbz	r0, b67f2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b67ea:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b67ee:	f000 febb 	bl	b7568 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b67f2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b67f6:	2100      	movs	r1, #0
   b67f8:	b280      	uxth	r0, r0
   b67fa:	f001 fd60 	bl	b82be <digitalWrite>
   b67fe:	e7e4      	b.n	b67ca <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b6800:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6804:	2101      	movs	r1, #1
   b6806:	b280      	uxth	r0, r0
   b6808:	f001 fd59 	bl	b82be <digitalWrite>
   b680c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b680e:	b118      	cbz	r0, b6818 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b6810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b6814:	f000 be8e 	b.w	b7534 <_ZN8SPIClass14endTransactionEv>
}
   b6818:	bd38      	pop	{r3, r4, r5, pc}

000b681a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b681a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b681e:	4604      	mov	r4, r0
  if(wire) { // I2C
   b6820:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b6822:	460d      	mov	r5, r1
  if(wire) { // I2C
   b6824:	188f      	adds	r7, r1, r2
   b6826:	b340      	cbz	r0, b687a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b6828:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b682c:	f001 fc32 	bl	b8094 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6830:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6832:	6803      	ldr	r3, [r0, #0]
   b6834:	2100      	movs	r1, #0
   b6836:	689b      	ldr	r3, [r3, #8]
   b6838:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b683a:	2601      	movs	r6, #1
    while(n--) {
   b683c:	42af      	cmp	r7, r5
        wire->endTransmission();
   b683e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b6840:	d017      	beq.n	b6872 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b6842:	2e1f      	cmp	r6, #31
   b6844:	d90c      	bls.n	b6860 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b6846:	f001 fc2c 	bl	b80a2 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b684a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b684e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6850:	f001 fc20 	bl	b8094 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6854:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6856:	6803      	ldr	r3, [r0, #0]
   b6858:	2100      	movs	r1, #0
   b685a:	689b      	ldr	r3, [r3, #8]
   b685c:	4798      	blx	r3
        bytesOut = 1;
   b685e:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b6860:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6862:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6866:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b6868:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b686a:	689b      	ldr	r3, [r3, #8]
   b686c:	4798      	blx	r3
      bytesOut++;
   b686e:	b2f6      	uxtb	r6, r6
    while(n--) {
   b6870:	e7e4      	b.n	b683c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b6872:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b6876:	f001 bc14 	b.w	b80a2 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b687a:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b687e:	4601      	mov	r1, r0
   b6880:	b298      	uxth	r0, r3
   b6882:	f001 fd1c 	bl	b82be <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b6886:	42bd      	cmp	r5, r7
   b6888:	d022      	beq.n	b68d0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b688a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b688c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b6890:	b118      	cbz	r0, b689a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b6892:	4649      	mov	r1, r9
   b6894:	f000 fed6 	bl	b7644 <_ZN8SPIClass8transferEh>
   b6898:	e7f5      	b.n	b6886 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b689a:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b689c:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b68a0:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b68a4:	ea09 0108 	and.w	r1, r9, r8
   b68a8:	b280      	uxth	r0, r0
   b68aa:	f001 fd08 	bl	b82be <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b68ae:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b68b2:	2101      	movs	r1, #1
   b68b4:	b280      	uxth	r0, r0
   b68b6:	f001 fd02 	bl	b82be <digitalWrite>
      digitalWrite(clkPin , LOW);
   b68ba:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b68be:	2100      	movs	r1, #0
   b68c0:	b280      	uxth	r0, r0
   b68c2:	f001 fcfc 	bl	b82be <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b68c6:	3e01      	subs	r6, #1
   b68c8:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b68cc:	d1e8      	bne.n	b68a0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b68ce:	e7da      	b.n	b6886 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b68d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b68d4 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b68d4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b68d8:	1dda      	adds	r2, r3, #7
   b68da:	bf48      	it	mi
   b68dc:	f103 020e 	addmi.w	r2, r3, #14
   b68e0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b68e4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b68e6:	10d2      	asrs	r2, r2, #3
   b68e8:	435a      	muls	r2, r3
   b68ea:	2100      	movs	r1, #0
   b68ec:	f002 bb0c 	b.w	b8f08 <memset>

000b68f0 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b68f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b68f4:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b68f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b68f8:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b68fc:	4604      	mov	r4, r0
   b68fe:	460f      	mov	r7, r1
   b6900:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b6902:	b1c3      	cbz	r3, b6936 <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b6904:	4620      	mov	r0, r4
   b6906:	f7ff ffe5 	bl	b68d4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b690a:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b690e:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b6912:	2820      	cmp	r0, #32
   b6914:	dc21      	bgt.n	b695a <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b6916:	2320      	movs	r3, #32
   b6918:	2201      	movs	r2, #1
   b691a:	3820      	subs	r0, #32
   b691c:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b6920:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b6924:	2373      	movs	r3, #115	; 0x73
   b6926:	3973      	subs	r1, #115	; 0x73
   b6928:	9300      	str	r3, [sp, #0]
   b692a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b692e:	4b89      	ldr	r3, [pc, #548]	; (b6b54 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b6930:	f340 024f 	sbfx	r2, r0, #1, #16
   b6934:	e021      	b.n	b697a <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b6936:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b693a:	1dd8      	adds	r0, r3, #7
   b693c:	bf48      	it	mi
   b693e:	f103 000e 	addmi.w	r0, r3, #14
   b6942:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b6946:	10c0      	asrs	r0, r0, #3
   b6948:	4358      	muls	r0, r3
   b694a:	f000 fd59 	bl	b7400 <malloc>
   b694e:	62e0      	str	r0, [r4, #44]	; 0x2c
   b6950:	2800      	cmp	r0, #0
   b6952:	d1d7      	bne.n	b6904 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b6954:	b004      	add	sp, #16
   b6956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b695a:	3840      	subs	r0, #64	; 0x40
   b695c:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b6960:	fa02 f280 	sxtah	r2, r2, r0
   b6964:	2340      	movs	r3, #64	; 0x40
   b6966:	2001      	movs	r0, #1
   b6968:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b696c:	2352      	movs	r3, #82	; 0x52
   b696e:	3952      	subs	r1, #82	; 0x52
   b6970:	9300      	str	r3, [sp, #0]
   b6972:	4b79      	ldr	r3, [pc, #484]	; (b6b58 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b6974:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b6978:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b697a:	4620      	mov	r0, r4
   b697c:	f341 014f 	sbfx	r1, r1, #1, #16
   b6980:	f7fe f81e 	bl	b49c0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b6984:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b6986:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b698a:	2800      	cmp	r0, #0
   b698c:	d078      	beq.n	b6a80 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b698e:	2d00      	cmp	r5, #0
   b6990:	d174      	bne.n	b6a7c <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b6992:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b6996:	2b20      	cmp	r3, #32
   b6998:	bf0c      	ite	eq
   b699a:	253c      	moveq	r5, #60	; 0x3c
   b699c:	253d      	movne	r5, #61	; 0x3d
   b699e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b69a2:	f1b8 0f00 	cmp.w	r8, #0
   b69a6:	d001      	beq.n	b69ac <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b69a8:	f001 fb6a 	bl	b8080 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b69ac:	b1fe      	cbz	r6, b69ee <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b69ae:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b69b2:	2800      	cmp	r0, #0
   b69b4:	db1b      	blt.n	b69ee <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b69b6:	2101      	movs	r1, #1
   b69b8:	b280      	uxth	r0, r0
   b69ba:	f001 fc6f 	bl	b829c <pinMode>
    digitalWrite(rstPin, HIGH);
   b69be:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b69c2:	2101      	movs	r1, #1
   b69c4:	b280      	uxth	r0, r0
   b69c6:	f001 fc7a 	bl	b82be <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b69ca:	2001      	movs	r0, #1
   b69cc:	f001 f8bc 	bl	b7b48 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b69d0:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b69d4:	2100      	movs	r1, #0
   b69d6:	b280      	uxth	r0, r0
   b69d8:	f001 fc71 	bl	b82be <digitalWrite>
    delay(10);                  // Wait 10 ms
   b69dc:	200a      	movs	r0, #10
   b69de:	f001 f8b3 	bl	b7b48 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b69e2:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b69e6:	2101      	movs	r1, #1
   b69e8:	b280      	uxth	r0, r0
   b69ea:	f001 fc68 	bl	b82be <digitalWrite>
  TRANSACTION_START
   b69ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b69f0:	2800      	cmp	r0, #0
   b69f2:	d074      	beq.n	b6ade <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b69f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b69f6:	f001 fb3f 	bl	b8078 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b69fa:	2204      	movs	r2, #4
   b69fc:	4957      	ldr	r1, [pc, #348]	; (b6b5c <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b69fe:	4620      	mov	r0, r4
   b6a00:	f7ff ff0b 	bl	b681a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b6a04:	8961      	ldrh	r1, [r4, #10]
   b6a06:	3901      	subs	r1, #1
   b6a08:	b2c9      	uxtb	r1, r1
   b6a0a:	4620      	mov	r0, r4
   b6a0c:	f7ff fe96 	bl	b673c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b6a10:	4953      	ldr	r1, [pc, #332]	; (b6b60 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b6a12:	2204      	movs	r2, #4
   b6a14:	4620      	mov	r0, r4
   b6a16:	f7ff ff00 	bl	b681a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b6a1a:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6a1e:	2b01      	cmp	r3, #1
   b6a20:	bf0c      	ite	eq
   b6a22:	2110      	moveq	r1, #16
   b6a24:	2114      	movne	r1, #20
   b6a26:	4620      	mov	r0, r4
   b6a28:	f7ff fe88 	bl	b673c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b6a2c:	2204      	movs	r2, #4
   b6a2e:	494d      	ldr	r1, [pc, #308]	; (b6b64 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b6a30:	4620      	mov	r0, r4
   b6a32:	f7ff fef2 	bl	b681a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b6a36:	68a3      	ldr	r3, [r4, #8]
   b6a38:	4a4b      	ldr	r2, [pc, #300]	; (b6b68 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b6a3a:	4293      	cmp	r3, r2
   b6a3c:	d15c      	bne.n	b6af8 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b6a3e:	494b      	ldr	r1, [pc, #300]	; (b6b6c <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b6a40:	2204      	movs	r2, #4
   b6a42:	4620      	mov	r0, r4
   b6a44:	f7ff fee9 	bl	b681a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b6a48:	21d9      	movs	r1, #217	; 0xd9
   b6a4a:	4620      	mov	r0, r4
   b6a4c:	f7ff fe76 	bl	b673c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b6a50:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6a54:	2b01      	cmp	r3, #1
   b6a56:	bf0c      	ite	eq
   b6a58:	2122      	moveq	r1, #34	; 0x22
   b6a5a:	21f1      	movne	r1, #241	; 0xf1
   b6a5c:	4620      	mov	r0, r4
   b6a5e:	f7ff fe6d 	bl	b673c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b6a62:	4620      	mov	r0, r4
   b6a64:	4942      	ldr	r1, [pc, #264]	; (b6b70 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b6a66:	2206      	movs	r2, #6
   b6a68:	f7ff fed7 	bl	b681a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b6a6c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6a6e:	2800      	cmp	r0, #0
   b6a70:	d063      	beq.n	b6b3a <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b6a72:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b6a74:	f001 fb00 	bl	b8078 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b6a78:	2001      	movs	r0, #1
   b6a7a:	e76b      	b.n	b6954 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b6a7c:	b26d      	sxtb	r5, r5
   b6a7e:	e78e      	b.n	b699e <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b6a80:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b6a84:	2101      	movs	r1, #1
   b6a86:	b280      	uxth	r0, r0
   b6a88:	f001 fc08 	bl	b829c <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b6a8c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6a90:	2101      	movs	r1, #1
   b6a92:	b280      	uxth	r0, r0
   b6a94:	f001 fc02 	bl	b829c <pinMode>
    SSD1306_DESELECT
   b6a98:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6a9c:	2101      	movs	r1, #1
   b6a9e:	b280      	uxth	r0, r0
   b6aa0:	f001 fc0d 	bl	b82be <digitalWrite>
    if(spi) { // Hardware SPI
   b6aa4:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b6aa6:	b13d      	cbz	r5, b6ab8 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b6aa8:	f1b8 0f00 	cmp.w	r8, #0
   b6aac:	f43f af7e 	beq.w	b69ac <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b6ab0:	4628      	mov	r0, r5
   b6ab2:	f000 fd2b 	bl	b750c <_ZN8SPIClass5beginEv>
   b6ab6:	e779      	b.n	b69ac <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b6ab8:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6abc:	2101      	movs	r1, #1
   b6abe:	b280      	uxth	r0, r0
   b6ac0:	f001 fbec 	bl	b829c <pinMode>
      pinMode(clkPin , OUTPUT);
   b6ac4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6ac8:	2101      	movs	r1, #1
   b6aca:	b280      	uxth	r0, r0
   b6acc:	f001 fbe6 	bl	b829c <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b6ad0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6ad4:	4629      	mov	r1, r5
   b6ad6:	b280      	uxth	r0, r0
   b6ad8:	f001 fbf1 	bl	b82be <digitalWrite>
   b6adc:	e766      	b.n	b69ac <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b6ade:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6ae0:	b118      	cbz	r0, b6aea <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b6ae2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b6ae6:	f000 fd3f 	bl	b7568 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b6aea:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6aee:	2100      	movs	r1, #0
   b6af0:	b280      	uxth	r0, r0
   b6af2:	f001 fbe4 	bl	b82be <digitalWrite>
   b6af6:	e780      	b.n	b69fa <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b6af8:	4a1e      	ldr	r2, [pc, #120]	; (b6b74 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b6afa:	4293      	cmp	r3, r2
   b6afc:	d10e      	bne.n	b6b1c <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b6afe:	491e      	ldr	r1, [pc, #120]	; (b6b78 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b6b00:	2203      	movs	r2, #3
   b6b02:	4620      	mov	r0, r4
   b6b04:	f7ff fe89 	bl	b681a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b6b08:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6b0c:	2b01      	cmp	r3, #1
   b6b0e:	bf0c      	ite	eq
   b6b10:	219f      	moveq	r1, #159	; 0x9f
   b6b12:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b6b14:	4620      	mov	r0, r4
   b6b16:	f7ff fe11 	bl	b673c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b6b1a:	e795      	b.n	b6a48 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b6b1c:	4a17      	ldr	r2, [pc, #92]	; (b6b7c <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b6b1e:	4293      	cmp	r3, r2
   b6b20:	d192      	bne.n	b6a48 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b6b22:	4917      	ldr	r1, [pc, #92]	; (b6b80 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b6b24:	2203      	movs	r2, #3
   b6b26:	4620      	mov	r0, r4
   b6b28:	f7ff fe77 	bl	b681a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b6b2c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6b30:	2b01      	cmp	r3, #1
   b6b32:	bf0c      	ite	eq
   b6b34:	2110      	moveq	r1, #16
   b6b36:	21af      	movne	r1, #175	; 0xaf
   b6b38:	e7ec      	b.n	b6b14 <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b6b3a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6b3e:	2101      	movs	r1, #1
   b6b40:	b280      	uxth	r0, r0
   b6b42:	f001 fbbc 	bl	b82be <digitalWrite>
   b6b46:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6b48:	2800      	cmp	r0, #0
   b6b4a:	d095      	beq.n	b6a78 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b6b4c:	f000 fcf2 	bl	b7534 <_ZN8SPIClass14endTransactionEv>
   b6b50:	e792      	b.n	b6a78 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b6b52:	bf00      	nop
   b6b54:	000b99f4 	.word	0x000b99f4
   b6b58:	000b9734 	.word	0x000b9734
   b6b5c:	000b9c3c 	.word	0x000b9c3c
   b6b60:	000b9c40 	.word	0x000b9c40
   b6b64:	000b9c44 	.word	0x000b9c44
   b6b68:	00200080 	.word	0x00200080
   b6b6c:	000b9c4e 	.word	0x000b9c4e
   b6b70:	000b9c48 	.word	0x000b9c48
   b6b74:	00400080 	.word	0x00400080
   b6b78:	000b9c52 	.word	0x000b9c52
   b6b7c:	00100060 	.word	0x00100060
   b6b80:	000b9c55 	.word	0x000b9c55

000b6b84 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b6b84:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b6b86:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b6b88:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b6b8c:	db3d      	blt.n	b6c0a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b6b8e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b6b92:	4294      	cmp	r4, r2
   b6b94:	dd39      	ble.n	b6c0a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b6b96:	2900      	cmp	r1, #0
      w += x;
   b6b98:	bfbe      	ittt	lt
   b6b9a:	185b      	addlt	r3, r3, r1
   b6b9c:	b21b      	sxthlt	r3, r3
      x  = 0;
   b6b9e:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b6ba0:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b6ba4:	18ce      	adds	r6, r1, r3
   b6ba6:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b6ba8:	bfc4      	itt	gt
   b6baa:	1a63      	subgt	r3, r4, r1
   b6bac:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b6bae:	2b00      	cmp	r3, #0
   b6bb0:	dd2b      	ble.n	b6c0a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b6bb2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6bb4:	10d6      	asrs	r6, r2, #3
   b6bb6:	fb14 1106 	smlabb	r1, r4, r6, r1
   b6bba:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b6bbc:	f002 0007 	and.w	r0, r2, #7
   b6bc0:	2201      	movs	r2, #1
   b6bc2:	4082      	lsls	r2, r0
      switch(color) {
   b6bc4:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b6bc6:	b2d2      	uxtb	r2, r2
      switch(color) {
   b6bc8:	d016      	beq.n	b6bf8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b6bca:	2d02      	cmp	r5, #2
   b6bcc:	d00b      	beq.n	b6be6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b6bce:	b9e5      	cbnz	r5, b6c0a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b6bd0:	43d2      	mvns	r2, r2
   b6bd2:	b2d2      	uxtb	r2, r2
   b6bd4:	440b      	add	r3, r1
   b6bd6:	4299      	cmp	r1, r3
   b6bd8:	d017      	beq.n	b6c0a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b6bda:	f811 0b01 	ldrb.w	r0, [r1], #1
   b6bde:	4010      	ands	r0, r2
   b6be0:	f801 0c01 	strb.w	r0, [r1, #-1]
   b6be4:	e7f7      	b.n	b6bd6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b6be6:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b6be8:	4299      	cmp	r1, r3
   b6bea:	d00e      	beq.n	b6c0a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b6bec:	f811 0b01 	ldrb.w	r0, [r1], #1
   b6bf0:	4050      	eors	r0, r2
   b6bf2:	f801 0c01 	strb.w	r0, [r1, #-1]
   b6bf6:	e7f7      	b.n	b6be8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b6bf8:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b6bfa:	4299      	cmp	r1, r3
   b6bfc:	d005      	beq.n	b6c0a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b6bfe:	f811 0b01 	ldrb.w	r0, [r1], #1
   b6c02:	4310      	orrs	r0, r2
   b6c04:	f801 0c01 	strb.w	r0, [r1, #-1]
   b6c08:	e7f7      	b.n	b6bfa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b6c0a:	bd70      	pop	{r4, r5, r6, pc}

000b6c0c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b6c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b6c0e:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b6c10:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b6c14:	db76      	blt.n	b6d04 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b6c16:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b6c1a:	42b1      	cmp	r1, r6
   b6c1c:	da72      	bge.n	b6d04 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b6c1e:	2a00      	cmp	r2, #0
      __h += __y;
   b6c20:	bfbe      	ittt	lt
   b6c22:	189b      	addlt	r3, r3, r2
   b6c24:	b21b      	sxthlt	r3, r3
      __y = 0;
   b6c26:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b6c28:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b6c2c:	18d7      	adds	r7, r2, r3
   b6c2e:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b6c30:	bfc4      	itt	gt
   b6c32:	1aa3      	subgt	r3, r4, r2
   b6c34:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b6c36:	2b00      	cmp	r3, #0
   b6c38:	dd64      	ble.n	b6d04 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b6c3a:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b6c3e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b6c40:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b6c44:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b6c48:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b6c4a:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b6c4e:	d023      	beq.n	b6c98 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b6c50:	f1c2 0208 	rsb	r2, r2, #8
   b6c54:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b6c56:	492d      	ldr	r1, [pc, #180]	; (b6d0c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b6c58:	4293      	cmp	r3, r2
   b6c5a:	bf3c      	itt	cc
   b6c5c:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b6c60:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b6c64:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b6c66:	bf3c      	itt	cc
   b6c68:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b6c6c:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b6c70:	2d01      	cmp	r5, #1
   b6c72:	d007      	beq.n	b6c84 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b6c74:	2d02      	cmp	r5, #2
   b6c76:	d02e      	beq.n	b6cd6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b6c78:	b94d      	cbnz	r5, b6c8e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b6c7a:	f817 c006 	ldrb.w	ip, [r7, r6]
   b6c7e:	ea2c 0101 	bic.w	r1, ip, r1
   b6c82:	e003      	b.n	b6c8c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b6c84:	f817 c006 	ldrb.w	ip, [r7, r6]
   b6c88:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b6c8c:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b6c8e:	4293      	cmp	r3, r2
   b6c90:	d338      	bcc.n	b6d04 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b6c92:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b6c96:	440c      	add	r4, r1
        h -= mod;
   b6c98:	1a9a      	subs	r2, r3, r2
   b6c9a:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b6c9c:	2a07      	cmp	r2, #7
   b6c9e:	d90e      	bls.n	b6cbe <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b6ca0:	2d02      	cmp	r5, #2
   b6ca2:	d11d      	bne.n	b6ce0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b6ca4:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b6ca6:	7821      	ldrb	r1, [r4, #0]
   b6ca8:	43c9      	mvns	r1, r1
   b6caa:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b6cac:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b6cae:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b6cb2:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b6cb4:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b6cb6:	440c      	add	r4, r1
            } while(h >= 8);
   b6cb8:	d8f5      	bhi.n	b6ca6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b6cba:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b6cbe:	b30a      	cbz	r2, b6d04 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b6cc0:	4b13      	ldr	r3, [pc, #76]	; (b6d10 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b6cc2:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b6cc4:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b6cc6:	d01a      	beq.n	b6cfe <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b6cc8:	2d02      	cmp	r5, #2
   b6cca:	d01c      	beq.n	b6d06 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b6ccc:	b9d5      	cbnz	r5, b6d04 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b6cce:	7822      	ldrb	r2, [r4, #0]
   b6cd0:	ea22 0303 	bic.w	r3, r2, r3
   b6cd4:	e015      	b.n	b6d02 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b6cd6:	f817 c006 	ldrb.w	ip, [r7, r6]
   b6cda:	ea81 010c 	eor.w	r1, r1, ip
   b6cde:	e7d5      	b.n	b6c8c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b6ce0:	1e29      	subs	r1, r5, #0
   b6ce2:	bf18      	it	ne
   b6ce4:	2101      	movne	r1, #1
   b6ce6:	4249      	negs	r1, r1
   b6ce8:	b2c9      	uxtb	r1, r1
   b6cea:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b6cec:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b6cee:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b6cf0:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b6cf4:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b6cf6:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b6cf8:	4434      	add	r4, r6
            } while(h >= 8);
   b6cfa:	d8f7      	bhi.n	b6cec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b6cfc:	e7dd      	b.n	b6cba <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b6cfe:	7822      	ldrb	r2, [r4, #0]
   b6d00:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b6d02:	7023      	strb	r3, [r4, #0]
}
   b6d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b6d06:	7822      	ldrb	r2, [r4, #0]
   b6d08:	4053      	eors	r3, r2
   b6d0a:	e7fa      	b.n	b6d02 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b6d0c:	000b9c2c 	.word	0x000b9c2c
   b6d10:	000b9c34 	.word	0x000b9c34

000b6d14 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b6d14:	b470      	push	{r4, r5, r6}
   b6d16:	4614      	mov	r4, r2
  switch(rotation) {
   b6d18:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b6d1a:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b6d1e:	2a02      	cmp	r2, #2
   b6d20:	d00d      	beq.n	b6d3e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b6d22:	2a03      	cmp	r2, #3
   b6d24:	d018      	beq.n	b6d58 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b6d26:	2a01      	cmp	r2, #1
   b6d28:	d111      	bne.n	b6d4e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b6d2a:	8902      	ldrh	r2, [r0, #8]
   b6d2c:	43e4      	mvns	r4, r4
   b6d2e:	4414      	add	r4, r2
   b6d30:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b6d32:	9603      	str	r6, [sp, #12]
   b6d34:	460a      	mov	r2, r1
   b6d36:	4621      	mov	r1, r4
}
   b6d38:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b6d3a:	f7ff bf67 	b.w	b6c0c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b6d3e:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b6d40:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b6d42:	43e4      	mvns	r4, r4
    x -= (w-1);
   b6d44:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b6d46:	4414      	add	r4, r2
    x -= (w-1);
   b6d48:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b6d4a:	b224      	sxth	r4, r4
    x -= (w-1);
   b6d4c:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b6d4e:	9603      	str	r6, [sp, #12]
   b6d50:	4622      	mov	r2, r4
}
   b6d52:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b6d54:	f7ff bf16 	b.w	b6b84 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b6d58:	8945      	ldrh	r5, [r0, #10]
   b6d5a:	4419      	add	r1, r3
   b6d5c:	1a69      	subs	r1, r5, r1
   b6d5e:	b209      	sxth	r1, r1
    break;
   b6d60:	e7e7      	b.n	b6d32 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b6d62 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b6d62:	b430      	push	{r4, r5}
   b6d64:	4614      	mov	r4, r2
  switch(rotation) {
   b6d66:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b6d68:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b6d6c:	2a02      	cmp	r2, #2
   b6d6e:	d00d      	beq.n	b6d8c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b6d70:	2a03      	cmp	r2, #3
   b6d72:	d018      	beq.n	b6da6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b6d74:	2a01      	cmp	r2, #1
   b6d76:	d111      	bne.n	b6d9c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b6d78:	18e2      	adds	r2, r4, r3
   b6d7a:	8904      	ldrh	r4, [r0, #8]
   b6d7c:	1aa4      	subs	r4, r4, r2
   b6d7e:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b6d80:	9502      	str	r5, [sp, #8]
   b6d82:	460a      	mov	r2, r1
   b6d84:	4621      	mov	r1, r4
}
   b6d86:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b6d88:	f7ff befc 	b.w	b6b84 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b6d8c:	8902      	ldrh	r2, [r0, #8]
   b6d8e:	43c9      	mvns	r1, r1
   b6d90:	4411      	add	r1, r2
    y -= (h-1);
   b6d92:	18e2      	adds	r2, r4, r3
   b6d94:	8944      	ldrh	r4, [r0, #10]
   b6d96:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b6d98:	b209      	sxth	r1, r1
    y -= (h-1);
   b6d9a:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b6d9c:	9502      	str	r5, [sp, #8]
   b6d9e:	4622      	mov	r2, r4
}
   b6da0:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b6da2:	f7ff bf33 	b.w	b6c0c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b6da6:	8942      	ldrh	r2, [r0, #10]
   b6da8:	43c9      	mvns	r1, r1
   b6daa:	4411      	add	r1, r2
   b6dac:	b209      	sxth	r1, r1
    break;
   b6dae:	e7e7      	b.n	b6d80 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b6db0 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b6db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6db4:	4604      	mov	r4, r0
  TRANSACTION_START
   b6db6:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b6db8:	2800      	cmp	r0, #0
   b6dba:	d042      	beq.n	b6e42 <_ZN16Adafruit_SSD13067displayEv+0x92>
   b6dbc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b6dbe:	f001 f95b 	bl	b8078 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b6dc2:	4947      	ldr	r1, [pc, #284]	; (b6ee0 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b6dc4:	2205      	movs	r2, #5
   b6dc6:	4620      	mov	r0, r4
   b6dc8:	f7ff fd27 	bl	b681a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b6dcc:	8921      	ldrh	r1, [r4, #8]
   b6dce:	3901      	subs	r1, #1
   b6dd0:	4620      	mov	r0, r4
   b6dd2:	b2c9      	uxtb	r1, r1
   b6dd4:	f7ff fcb2 	bl	b673c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b6dd8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b6ddc:	1dde      	adds	r6, r3, #7
   b6dde:	bf48      	it	mi
   b6de0:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b6de4:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b6de8:	8923      	ldrh	r3, [r4, #8]
   b6dea:	10f6      	asrs	r6, r6, #3
   b6dec:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b6df0:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b6df4:	2800      	cmp	r0, #0
   b6df6:	d03a      	beq.n	b6e6e <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b6df8:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6dfc:	f001 f94a 	bl	b8094 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b6e00:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6e02:	6803      	ldr	r3, [r0, #0]
   b6e04:	2140      	movs	r1, #64	; 0x40
   b6e06:	689b      	ldr	r3, [r3, #8]
   b6e08:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b6e0a:	2701      	movs	r7, #1
    while(count--) {
   b6e0c:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b6e0e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b6e10:	d024      	beq.n	b6e5c <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b6e12:	2f1f      	cmp	r7, #31
   b6e14:	d90c      	bls.n	b6e30 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b6e16:	f001 f944 	bl	b80a2 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b6e1a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6e1e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6e20:	f001 f938 	bl	b8094 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b6e24:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6e26:	6803      	ldr	r3, [r0, #0]
   b6e28:	2140      	movs	r1, #64	; 0x40
   b6e2a:	689b      	ldr	r3, [r3, #8]
   b6e2c:	4798      	blx	r3
        bytesOut = 1;
   b6e2e:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b6e30:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6e32:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6e36:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b6e38:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b6e3a:	689b      	ldr	r3, [r3, #8]
   b6e3c:	4798      	blx	r3
      bytesOut++;
   b6e3e:	b2ff      	uxtb	r7, r7
    while(count--) {
   b6e40:	e7e4      	b.n	b6e0c <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b6e42:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6e44:	b118      	cbz	r0, b6e4e <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b6e46:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b6e4a:	f000 fb8d 	bl	b7568 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b6e4e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6e52:	2100      	movs	r1, #0
   b6e54:	b280      	uxth	r0, r0
   b6e56:	f001 fa32 	bl	b82be <digitalWrite>
   b6e5a:	e7b2      	b.n	b6dc2 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b6e5c:	f001 f921 	bl	b80a2 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b6e60:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6e62:	b378      	cbz	r0, b6ec4 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b6e64:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b6e66:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6e6a:	f001 b905 	b.w	b8078 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b6e6e:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b6e72:	2101      	movs	r1, #1
   b6e74:	b280      	uxth	r0, r0
   b6e76:	f001 fa22 	bl	b82be <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b6e7a:	42ae      	cmp	r6, r5
   b6e7c:	d0f0      	beq.n	b6e60 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b6e7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b6e80:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b6e84:	b118      	cbz	r0, b6e8e <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b6e86:	4649      	mov	r1, r9
   b6e88:	f000 fbdc 	bl	b7644 <_ZN8SPIClass8transferEh>
   b6e8c:	e7f5      	b.n	b6e7a <_ZN16Adafruit_SSD13067displayEv+0xca>
   b6e8e:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6e90:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b6e94:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6e98:	ea09 0108 	and.w	r1, r9, r8
   b6e9c:	b280      	uxth	r0, r0
   b6e9e:	f001 fa0e 	bl	b82be <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b6ea2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6ea6:	2101      	movs	r1, #1
   b6ea8:	b280      	uxth	r0, r0
   b6eaa:	f001 fa08 	bl	b82be <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6eae:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6eb2:	2100      	movs	r1, #0
   b6eb4:	b280      	uxth	r0, r0
   b6eb6:	f001 fa02 	bl	b82be <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6eba:	3f01      	subs	r7, #1
   b6ebc:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b6ec0:	d1e8      	bne.n	b6e94 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b6ec2:	e7da      	b.n	b6e7a <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b6ec4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6ec8:	2101      	movs	r1, #1
   b6eca:	b280      	uxth	r0, r0
   b6ecc:	f001 f9f7 	bl	b82be <digitalWrite>
   b6ed0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6ed2:	b118      	cbz	r0, b6edc <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b6ed4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b6ed8:	f000 bb2c 	b.w	b7534 <_ZN8SPIClass14endTransactionEv>
}
   b6edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6ee0:	000b9c58 	.word	0x000b9c58

000b6ee4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6ee4:	b508      	push	{r3, lr}
   b6ee6:	4b02      	ldr	r3, [pc, #8]	; (b6ef0 <netdb_freeaddrinfo+0xc>)
   b6ee8:	681b      	ldr	r3, [r3, #0]
   b6eea:	689b      	ldr	r3, [r3, #8]
   b6eec:	9301      	str	r3, [sp, #4]
   b6eee:	bd08      	pop	{r3, pc}
   b6ef0:	00030268 	.word	0x00030268

000b6ef4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6ef4:	b508      	push	{r3, lr}
   b6ef6:	4b02      	ldr	r3, [pc, #8]	; (b6f00 <netdb_getaddrinfo+0xc>)
   b6ef8:	681b      	ldr	r3, [r3, #0]
   b6efa:	68db      	ldr	r3, [r3, #12]
   b6efc:	9301      	str	r3, [sp, #4]
   b6efe:	bd08      	pop	{r3, pc}
   b6f00:	00030268 	.word	0x00030268

000b6f04 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b6f04:	b508      	push	{r3, lr}
   b6f06:	4b02      	ldr	r3, [pc, #8]	; (b6f10 <HAL_Validate_Pin_Function+0xc>)
   b6f08:	681b      	ldr	r3, [r3, #0]
   b6f0a:	685b      	ldr	r3, [r3, #4]
   b6f0c:	9301      	str	r3, [sp, #4]
   b6f0e:	bd08      	pop	{r3, pc}
   b6f10:	0003022c 	.word	0x0003022c

000b6f14 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6f14:	b508      	push	{r3, lr}
   b6f16:	4b02      	ldr	r3, [pc, #8]	; (b6f20 <HAL_Pin_Mode+0xc>)
   b6f18:	681b      	ldr	r3, [r3, #0]
   b6f1a:	689b      	ldr	r3, [r3, #8]
   b6f1c:	9301      	str	r3, [sp, #4]
   b6f1e:	bd08      	pop	{r3, pc}
   b6f20:	0003022c 	.word	0x0003022c

000b6f24 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6f24:	b508      	push	{r3, lr}
   b6f26:	4b02      	ldr	r3, [pc, #8]	; (b6f30 <HAL_Get_Pin_Mode+0xc>)
   b6f28:	681b      	ldr	r3, [r3, #0]
   b6f2a:	68db      	ldr	r3, [r3, #12]
   b6f2c:	9301      	str	r3, [sp, #4]
   b6f2e:	bd08      	pop	{r3, pc}
   b6f30:	0003022c 	.word	0x0003022c

000b6f34 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6f34:	b508      	push	{r3, lr}
   b6f36:	4b02      	ldr	r3, [pc, #8]	; (b6f40 <HAL_GPIO_Write+0xc>)
   b6f38:	681b      	ldr	r3, [r3, #0]
   b6f3a:	691b      	ldr	r3, [r3, #16]
   b6f3c:	9301      	str	r3, [sp, #4]
   b6f3e:	bd08      	pop	{r3, pc}
   b6f40:	0003022c 	.word	0x0003022c

000b6f44 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b6f44:	b508      	push	{r3, lr}
   b6f46:	4b02      	ldr	r3, [pc, #8]	; (b6f50 <HAL_GPIO_Read+0xc>)
   b6f48:	681b      	ldr	r3, [r3, #0]
   b6f4a:	695b      	ldr	r3, [r3, #20]
   b6f4c:	9301      	str	r3, [sp, #4]
   b6f4e:	bd08      	pop	{r3, pc}
   b6f50:	0003022c 	.word	0x0003022c

000b6f54 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b6f54:	b508      	push	{r3, lr}
   b6f56:	4b02      	ldr	r3, [pc, #8]	; (b6f60 <hal_adc_read+0xc>)
   b6f58:	681b      	ldr	r3, [r3, #0]
   b6f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6f5c:	9301      	str	r3, [sp, #4]
   b6f5e:	bd08      	pop	{r3, pc}
   b6f60:	0003022c 	.word	0x0003022c

000b6f64 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6f64:	b508      	push	{r3, lr}
   b6f66:	4b02      	ldr	r3, [pc, #8]	; (b6f70 <HAL_RNG_GetRandomNumber+0xc>)
   b6f68:	681b      	ldr	r3, [r3, #0]
   b6f6a:	685b      	ldr	r3, [r3, #4]
   b6f6c:	9301      	str	r3, [sp, #4]
   b6f6e:	bd08      	pop	{r3, pc}
   b6f70:	00030218 	.word	0x00030218

000b6f74 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6f74:	b508      	push	{r3, lr}
   b6f76:	4b02      	ldr	r3, [pc, #8]	; (b6f80 <HAL_Delay_Microseconds+0xc>)
   b6f78:	681b      	ldr	r3, [r3, #0]
   b6f7a:	68db      	ldr	r3, [r3, #12]
   b6f7c:	9301      	str	r3, [sp, #4]
   b6f7e:	bd08      	pop	{r3, pc}
   b6f80:	00030218 	.word	0x00030218

000b6f84 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b6f84:	b508      	push	{r3, lr}
   b6f86:	4b02      	ldr	r3, [pc, #8]	; (b6f90 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b6f88:	681b      	ldr	r3, [r3, #0]
   b6f8a:	691b      	ldr	r3, [r3, #16]
   b6f8c:	9301      	str	r3, [sp, #4]
   b6f8e:	bd08      	pop	{r3, pc}
   b6f90:	00030218 	.word	0x00030218

000b6f94 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6f94:	b508      	push	{r3, lr}
   b6f96:	4b02      	ldr	r3, [pc, #8]	; (b6fa0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6f98:	681b      	ldr	r3, [r3, #0]
   b6f9a:	695b      	ldr	r3, [r3, #20]
   b6f9c:	9301      	str	r3, [sp, #4]
   b6f9e:	bd08      	pop	{r3, pc}
   b6fa0:	00030218 	.word	0x00030218

000b6fa4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b6fa4:	b508      	push	{r3, lr}
   b6fa6:	4b02      	ldr	r3, [pc, #8]	; (b6fb0 <hal_rtc_time_is_valid+0xc>)
   b6fa8:	681b      	ldr	r3, [r3, #0]
   b6faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6fac:	9301      	str	r3, [sp, #4]
   b6fae:	bd08      	pop	{r3, pc}
   b6fb0:	00030218 	.word	0x00030218

000b6fb4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b6fb4:	b508      	push	{r3, lr}
   b6fb6:	4b02      	ldr	r3, [pc, #8]	; (b6fc0 <hal_rtc_get_time+0xc>)
   b6fb8:	681b      	ldr	r3, [r3, #0]
   b6fba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b6fbc:	9301      	str	r3, [sp, #4]
   b6fbe:	bd08      	pop	{r3, pc}
   b6fc0:	00030218 	.word	0x00030218

000b6fc4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b6fc4:	b508      	push	{r3, lr}
   b6fc6:	4b02      	ldr	r3, [pc, #8]	; (b6fd0 <os_mutex_create+0xc>)
   b6fc8:	681b      	ldr	r3, [r3, #0]
   b6fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6fcc:	9301      	str	r3, [sp, #4]
   b6fce:	bd08      	pop	{r3, pc}
   b6fd0:	00030248 	.word	0x00030248

000b6fd4 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b6fd4:	b508      	push	{r3, lr}
   b6fd6:	4b02      	ldr	r3, [pc, #8]	; (b6fe0 <os_mutex_destroy+0xc>)
   b6fd8:	681b      	ldr	r3, [r3, #0]
   b6fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6fdc:	9301      	str	r3, [sp, #4]
   b6fde:	bd08      	pop	{r3, pc}
   b6fe0:	00030248 	.word	0x00030248

000b6fe4 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6fe4:	b508      	push	{r3, lr}
   b6fe6:	4b02      	ldr	r3, [pc, #8]	; (b6ff0 <os_mutex_recursive_create+0xc>)
   b6fe8:	681b      	ldr	r3, [r3, #0]
   b6fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6fec:	9301      	str	r3, [sp, #4]
   b6fee:	bd08      	pop	{r3, pc}
   b6ff0:	00030248 	.word	0x00030248

000b6ff4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6ff4:	b508      	push	{r3, lr}
   b6ff6:	4b02      	ldr	r3, [pc, #8]	; (b7000 <inet_inet_ntop+0xc>)
   b6ff8:	681b      	ldr	r3, [r3, #0]
   b6ffa:	695b      	ldr	r3, [r3, #20]
   b6ffc:	9301      	str	r3, [sp, #4]
   b6ffe:	bd08      	pop	{r3, pc}
   b7000:	00030264 	.word	0x00030264

000b7004 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7004:	b508      	push	{r3, lr}
   b7006:	4b02      	ldr	r3, [pc, #8]	; (b7010 <hal_usart_write+0xc>)
   b7008:	681b      	ldr	r3, [r3, #0]
   b700a:	68db      	ldr	r3, [r3, #12]
   b700c:	9301      	str	r3, [sp, #4]
   b700e:	bd08      	pop	{r3, pc}
   b7010:	0003023c 	.word	0x0003023c

000b7014 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7014:	b508      	push	{r3, lr}
   b7016:	4b02      	ldr	r3, [pc, #8]	; (b7020 <hal_usart_available+0xc>)
   b7018:	681b      	ldr	r3, [r3, #0]
   b701a:	691b      	ldr	r3, [r3, #16]
   b701c:	9301      	str	r3, [sp, #4]
   b701e:	bd08      	pop	{r3, pc}
   b7020:	0003023c 	.word	0x0003023c

000b7024 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b7024:	b508      	push	{r3, lr}
   b7026:	4b02      	ldr	r3, [pc, #8]	; (b7030 <hal_usart_read+0xc>)
   b7028:	681b      	ldr	r3, [r3, #0]
   b702a:	695b      	ldr	r3, [r3, #20]
   b702c:	9301      	str	r3, [sp, #4]
   b702e:	bd08      	pop	{r3, pc}
   b7030:	0003023c 	.word	0x0003023c

000b7034 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7034:	b508      	push	{r3, lr}
   b7036:	4b02      	ldr	r3, [pc, #8]	; (b7040 <hal_usart_peek+0xc>)
   b7038:	681b      	ldr	r3, [r3, #0]
   b703a:	699b      	ldr	r3, [r3, #24]
   b703c:	9301      	str	r3, [sp, #4]
   b703e:	bd08      	pop	{r3, pc}
   b7040:	0003023c 	.word	0x0003023c

000b7044 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7044:	b508      	push	{r3, lr}
   b7046:	4b02      	ldr	r3, [pc, #8]	; (b7050 <hal_usart_flush+0xc>)
   b7048:	681b      	ldr	r3, [r3, #0]
   b704a:	69db      	ldr	r3, [r3, #28]
   b704c:	9301      	str	r3, [sp, #4]
   b704e:	bd08      	pop	{r3, pc}
   b7050:	0003023c 	.word	0x0003023c

000b7054 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b7054:	b508      	push	{r3, lr}
   b7056:	4b02      	ldr	r3, [pc, #8]	; (b7060 <hal_usart_is_enabled+0xc>)
   b7058:	681b      	ldr	r3, [r3, #0]
   b705a:	6a1b      	ldr	r3, [r3, #32]
   b705c:	9301      	str	r3, [sp, #4]
   b705e:	bd08      	pop	{r3, pc}
   b7060:	0003023c 	.word	0x0003023c

000b7064 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7064:	b508      	push	{r3, lr}
   b7066:	4b02      	ldr	r3, [pc, #8]	; (b7070 <hal_usart_available_data_for_write+0xc>)
   b7068:	681b      	ldr	r3, [r3, #0]
   b706a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b706c:	9301      	str	r3, [sp, #4]
   b706e:	bd08      	pop	{r3, pc}
   b7070:	0003023c 	.word	0x0003023c

000b7074 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b7074:	b508      	push	{r3, lr}
   b7076:	4b02      	ldr	r3, [pc, #8]	; (b7080 <hal_usart_init_ex+0xc>)
   b7078:	681b      	ldr	r3, [r3, #0]
   b707a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b707c:	9301      	str	r3, [sp, #4]
   b707e:	bd08      	pop	{r3, pc}
   b7080:	0003023c 	.word	0x0003023c

000b7084 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b7084:	b508      	push	{r3, lr}
   b7086:	4b02      	ldr	r3, [pc, #8]	; (b7090 <hal_i2c_set_speed+0xc>)
   b7088:	681b      	ldr	r3, [r3, #0]
   b708a:	681b      	ldr	r3, [r3, #0]
   b708c:	9301      	str	r3, [sp, #4]
   b708e:	bd08      	pop	{r3, pc}
   b7090:	00030228 	.word	0x00030228

000b7094 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b7094:	b508      	push	{r3, lr}
   b7096:	4b02      	ldr	r3, [pc, #8]	; (b70a0 <hal_i2c_begin+0xc>)
   b7098:	681b      	ldr	r3, [r3, #0]
   b709a:	68db      	ldr	r3, [r3, #12]
   b709c:	9301      	str	r3, [sp, #4]
   b709e:	bd08      	pop	{r3, pc}
   b70a0:	00030228 	.word	0x00030228

000b70a4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b70a4:	b508      	push	{r3, lr}
   b70a6:	4b02      	ldr	r3, [pc, #8]	; (b70b0 <hal_i2c_begin_transmission+0xc>)
   b70a8:	681b      	ldr	r3, [r3, #0]
   b70aa:	699b      	ldr	r3, [r3, #24]
   b70ac:	9301      	str	r3, [sp, #4]
   b70ae:	bd08      	pop	{r3, pc}
   b70b0:	00030228 	.word	0x00030228

000b70b4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b70b4:	b508      	push	{r3, lr}
   b70b6:	4b02      	ldr	r3, [pc, #8]	; (b70c0 <hal_i2c_end_transmission+0xc>)
   b70b8:	681b      	ldr	r3, [r3, #0]
   b70ba:	69db      	ldr	r3, [r3, #28]
   b70bc:	9301      	str	r3, [sp, #4]
   b70be:	bd08      	pop	{r3, pc}
   b70c0:	00030228 	.word	0x00030228

000b70c4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b70c4:	b508      	push	{r3, lr}
   b70c6:	4b02      	ldr	r3, [pc, #8]	; (b70d0 <hal_i2c_write+0xc>)
   b70c8:	681b      	ldr	r3, [r3, #0]
   b70ca:	6a1b      	ldr	r3, [r3, #32]
   b70cc:	9301      	str	r3, [sp, #4]
   b70ce:	bd08      	pop	{r3, pc}
   b70d0:	00030228 	.word	0x00030228

000b70d4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b70d4:	b508      	push	{r3, lr}
   b70d6:	4b02      	ldr	r3, [pc, #8]	; (b70e0 <hal_i2c_available+0xc>)
   b70d8:	681b      	ldr	r3, [r3, #0]
   b70da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b70dc:	9301      	str	r3, [sp, #4]
   b70de:	bd08      	pop	{r3, pc}
   b70e0:	00030228 	.word	0x00030228

000b70e4 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b70e4:	b508      	push	{r3, lr}
   b70e6:	4b02      	ldr	r3, [pc, #8]	; (b70f0 <hal_i2c_read+0xc>)
   b70e8:	681b      	ldr	r3, [r3, #0]
   b70ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b70ec:	9301      	str	r3, [sp, #4]
   b70ee:	bd08      	pop	{r3, pc}
   b70f0:	00030228 	.word	0x00030228

000b70f4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b70f4:	b508      	push	{r3, lr}
   b70f6:	4b02      	ldr	r3, [pc, #8]	; (b7100 <hal_i2c_peek+0xc>)
   b70f8:	681b      	ldr	r3, [r3, #0]
   b70fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b70fc:	9301      	str	r3, [sp, #4]
   b70fe:	bd08      	pop	{r3, pc}
   b7100:	00030228 	.word	0x00030228

000b7104 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b7104:	b508      	push	{r3, lr}
   b7106:	4b02      	ldr	r3, [pc, #8]	; (b7110 <hal_i2c_flush+0xc>)
   b7108:	681b      	ldr	r3, [r3, #0]
   b710a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b710c:	9301      	str	r3, [sp, #4]
   b710e:	bd08      	pop	{r3, pc}
   b7110:	00030228 	.word	0x00030228

000b7114 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b7114:	b508      	push	{r3, lr}
   b7116:	4b02      	ldr	r3, [pc, #8]	; (b7120 <hal_i2c_is_enabled+0xc>)
   b7118:	681b      	ldr	r3, [r3, #0]
   b711a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b711c:	9301      	str	r3, [sp, #4]
   b711e:	bd08      	pop	{r3, pc}
   b7120:	00030228 	.word	0x00030228

000b7124 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b7124:	b508      	push	{r3, lr}
   b7126:	4b02      	ldr	r3, [pc, #8]	; (b7130 <hal_i2c_init+0xc>)
   b7128:	681b      	ldr	r3, [r3, #0]
   b712a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b712c:	9301      	str	r3, [sp, #4]
   b712e:	bd08      	pop	{r3, pc}
   b7130:	00030228 	.word	0x00030228

000b7134 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b7134:	b508      	push	{r3, lr}
   b7136:	4b02      	ldr	r3, [pc, #8]	; (b7140 <hal_i2c_lock+0xc>)
   b7138:	681b      	ldr	r3, [r3, #0]
   b713a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b713c:	9301      	str	r3, [sp, #4]
   b713e:	bd08      	pop	{r3, pc}
   b7140:	00030228 	.word	0x00030228

000b7144 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b7144:	b508      	push	{r3, lr}
   b7146:	4b02      	ldr	r3, [pc, #8]	; (b7150 <hal_spi_begin+0xc>)
   b7148:	681b      	ldr	r3, [r3, #0]
   b714a:	681b      	ldr	r3, [r3, #0]
   b714c:	9301      	str	r3, [sp, #4]
   b714e:	bd08      	pop	{r3, pc}
   b7150:	00030230 	.word	0x00030230

000b7154 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b7154:	b508      	push	{r3, lr}
   b7156:	4b02      	ldr	r3, [pc, #8]	; (b7160 <hal_spi_transfer+0xc>)
   b7158:	681b      	ldr	r3, [r3, #0]
   b715a:	695b      	ldr	r3, [r3, #20]
   b715c:	9301      	str	r3, [sp, #4]
   b715e:	bd08      	pop	{r3, pc}
   b7160:	00030230 	.word	0x00030230

000b7164 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b7164:	b508      	push	{r3, lr}
   b7166:	4b02      	ldr	r3, [pc, #8]	; (b7170 <hal_spi_init+0xc>)
   b7168:	681b      	ldr	r3, [r3, #0]
   b716a:	69db      	ldr	r3, [r3, #28]
   b716c:	9301      	str	r3, [sp, #4]
   b716e:	bd08      	pop	{r3, pc}
   b7170:	00030230 	.word	0x00030230

000b7174 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b7174:	b508      	push	{r3, lr}
   b7176:	4b02      	ldr	r3, [pc, #8]	; (b7180 <hal_spi_is_enabled+0xc>)
   b7178:	681b      	ldr	r3, [r3, #0]
   b717a:	6a1b      	ldr	r3, [r3, #32]
   b717c:	9301      	str	r3, [sp, #4]
   b717e:	bd08      	pop	{r3, pc}
   b7180:	00030230 	.word	0x00030230

000b7184 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b7184:	b508      	push	{r3, lr}
   b7186:	4b02      	ldr	r3, [pc, #8]	; (b7190 <hal_spi_info+0xc>)
   b7188:	681b      	ldr	r3, [r3, #0]
   b718a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b718c:	9301      	str	r3, [sp, #4]
   b718e:	bd08      	pop	{r3, pc}
   b7190:	00030230 	.word	0x00030230

000b7194 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b7194:	b508      	push	{r3, lr}
   b7196:	4b02      	ldr	r3, [pc, #8]	; (b71a0 <hal_spi_transfer_dma+0xc>)
   b7198:	681b      	ldr	r3, [r3, #0]
   b719a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b719c:	9301      	str	r3, [sp, #4]
   b719e:	bd08      	pop	{r3, pc}
   b71a0:	00030230 	.word	0x00030230

000b71a4 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b71a4:	b508      	push	{r3, lr}
   b71a6:	4b02      	ldr	r3, [pc, #8]	; (b71b0 <hal_spi_transfer_dma_status+0xc>)
   b71a8:	681b      	ldr	r3, [r3, #0]
   b71aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b71ac:	9301      	str	r3, [sp, #4]
   b71ae:	bd08      	pop	{r3, pc}
   b71b0:	00030230 	.word	0x00030230

000b71b4 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b71b4:	b508      	push	{r3, lr}
   b71b6:	4b02      	ldr	r3, [pc, #8]	; (b71c0 <hal_spi_set_settings+0xc>)
   b71b8:	681b      	ldr	r3, [r3, #0]
   b71ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b71bc:	9301      	str	r3, [sp, #4]
   b71be:	bd08      	pop	{r3, pc}
   b71c0:	00030230 	.word	0x00030230

000b71c4 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b71c4:	b508      	push	{r3, lr}
   b71c6:	4b02      	ldr	r3, [pc, #8]	; (b71d0 <hal_spi_acquire+0xc>)
   b71c8:	681b      	ldr	r3, [r3, #0]
   b71ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b71cc:	9301      	str	r3, [sp, #4]
   b71ce:	bd08      	pop	{r3, pc}
   b71d0:	00030230 	.word	0x00030230

000b71d4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b71d4:	b508      	push	{r3, lr}
   b71d6:	4b02      	ldr	r3, [pc, #8]	; (b71e0 <hal_spi_release+0xc>)
   b71d8:	681b      	ldr	r3, [r3, #0]
   b71da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b71dc:	9301      	str	r3, [sp, #4]
   b71de:	bd08      	pop	{r3, pc}
   b71e0:	00030230 	.word	0x00030230

000b71e4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b71e4:	b508      	push	{r3, lr}
   b71e6:	4b02      	ldr	r3, [pc, #8]	; (b71f0 <HAL_USB_USART_Init+0xc>)
   b71e8:	681b      	ldr	r3, [r3, #0]
   b71ea:	681b      	ldr	r3, [r3, #0]
   b71ec:	9301      	str	r3, [sp, #4]
   b71ee:	bd08      	pop	{r3, pc}
   b71f0:	0003024c 	.word	0x0003024c

000b71f4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b71f4:	b508      	push	{r3, lr}
   b71f6:	4b02      	ldr	r3, [pc, #8]	; (b7200 <HAL_USB_USART_Begin+0xc>)
   b71f8:	681b      	ldr	r3, [r3, #0]
   b71fa:	685b      	ldr	r3, [r3, #4]
   b71fc:	9301      	str	r3, [sp, #4]
   b71fe:	bd08      	pop	{r3, pc}
   b7200:	0003024c 	.word	0x0003024c

000b7204 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b7204:	b508      	push	{r3, lr}
   b7206:	4b02      	ldr	r3, [pc, #8]	; (b7210 <HAL_USB_USART_Available_Data+0xc>)
   b7208:	681b      	ldr	r3, [r3, #0]
   b720a:	691b      	ldr	r3, [r3, #16]
   b720c:	9301      	str	r3, [sp, #4]
   b720e:	bd08      	pop	{r3, pc}
   b7210:	0003024c 	.word	0x0003024c

000b7214 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b7214:	b508      	push	{r3, lr}
   b7216:	4b02      	ldr	r3, [pc, #8]	; (b7220 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7218:	681b      	ldr	r3, [r3, #0]
   b721a:	695b      	ldr	r3, [r3, #20]
   b721c:	9301      	str	r3, [sp, #4]
   b721e:	bd08      	pop	{r3, pc}
   b7220:	0003024c 	.word	0x0003024c

000b7224 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7224:	b508      	push	{r3, lr}
   b7226:	4b02      	ldr	r3, [pc, #8]	; (b7230 <HAL_USB_USART_Receive_Data+0xc>)
   b7228:	681b      	ldr	r3, [r3, #0]
   b722a:	699b      	ldr	r3, [r3, #24]
   b722c:	9301      	str	r3, [sp, #4]
   b722e:	bd08      	pop	{r3, pc}
   b7230:	0003024c 	.word	0x0003024c

000b7234 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7234:	b508      	push	{r3, lr}
   b7236:	4b02      	ldr	r3, [pc, #8]	; (b7240 <HAL_USB_USART_Send_Data+0xc>)
   b7238:	681b      	ldr	r3, [r3, #0]
   b723a:	69db      	ldr	r3, [r3, #28]
   b723c:	9301      	str	r3, [sp, #4]
   b723e:	bd08      	pop	{r3, pc}
   b7240:	0003024c 	.word	0x0003024c

000b7244 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7244:	b508      	push	{r3, lr}
   b7246:	4b02      	ldr	r3, [pc, #8]	; (b7250 <HAL_USB_USART_Flush_Data+0xc>)
   b7248:	681b      	ldr	r3, [r3, #0]
   b724a:	6a1b      	ldr	r3, [r3, #32]
   b724c:	9301      	str	r3, [sp, #4]
   b724e:	bd08      	pop	{r3, pc}
   b7250:	0003024c 	.word	0x0003024c

000b7254 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7254:	b508      	push	{r3, lr}
   b7256:	4b02      	ldr	r3, [pc, #8]	; (b7260 <panic_+0xc>)
   b7258:	681b      	ldr	r3, [r3, #0]
   b725a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b725c:	9301      	str	r3, [sp, #4]
   b725e:	bd08      	pop	{r3, pc}
   b7260:	00030260 	.word	0x00030260

000b7264 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7264:	b508      	push	{r3, lr}
   b7266:	4b02      	ldr	r3, [pc, #8]	; (b7270 <log_message+0xc>)
   b7268:	681b      	ldr	r3, [r3, #0]
   b726a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b726c:	9301      	str	r3, [sp, #4]
   b726e:	bd08      	pop	{r3, pc}
   b7270:	00030260 	.word	0x00030260

000b7274 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b7274:	b508      	push	{r3, lr}
   b7276:	4b02      	ldr	r3, [pc, #8]	; (b7280 <system_mode+0xc>)
   b7278:	681b      	ldr	r3, [r3, #0]
   b727a:	681b      	ldr	r3, [r3, #0]
   b727c:	9301      	str	r3, [sp, #4]
   b727e:	bd08      	pop	{r3, pc}
   b7280:	00030220 	.word	0x00030220

000b7284 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7284:	b508      	push	{r3, lr}
   b7286:	4b02      	ldr	r3, [pc, #8]	; (b7290 <set_system_mode+0xc>)
   b7288:	681b      	ldr	r3, [r3, #0]
   b728a:	685b      	ldr	r3, [r3, #4]
   b728c:	9301      	str	r3, [sp, #4]
   b728e:	bd08      	pop	{r3, pc}
   b7290:	00030220 	.word	0x00030220

000b7294 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7294:	b508      	push	{r3, lr}
   b7296:	4b02      	ldr	r3, [pc, #8]	; (b72a0 <system_delay_ms+0xc>)
   b7298:	681b      	ldr	r3, [r3, #0]
   b729a:	695b      	ldr	r3, [r3, #20]
   b729c:	9301      	str	r3, [sp, #4]
   b729e:	bd08      	pop	{r3, pc}
   b72a0:	00030220 	.word	0x00030220

000b72a4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b72a4:	b508      	push	{r3, lr}
   b72a6:	4b02      	ldr	r3, [pc, #8]	; (b72b0 <system_thread_set_state+0xc>)
   b72a8:	681b      	ldr	r3, [r3, #0]
   b72aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b72ac:	9301      	str	r3, [sp, #4]
   b72ae:	bd08      	pop	{r3, pc}
   b72b0:	00030220 	.word	0x00030220

000b72b4 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b72b4:	b508      	push	{r3, lr}
   b72b6:	4b02      	ldr	r3, [pc, #8]	; (b72c0 <system_thread_get_state+0xc>)
   b72b8:	681b      	ldr	r3, [r3, #0]
   b72ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b72bc:	9301      	str	r3, [sp, #4]
   b72be:	bd08      	pop	{r3, pc}
   b72c0:	00030220 	.word	0x00030220

000b72c4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b72c4:	b508      	push	{r3, lr}
   b72c6:	4b03      	ldr	r3, [pc, #12]	; (b72d4 <system_ctrl_set_app_request_handler+0x10>)
   b72c8:	681b      	ldr	r3, [r3, #0]
   b72ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b72ce:	9301      	str	r3, [sp, #4]
   b72d0:	bd08      	pop	{r3, pc}
   b72d2:	0000      	.short	0x0000
   b72d4:	00030220 	.word	0x00030220

000b72d8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b72d8:	b508      	push	{r3, lr}
   b72da:	4b03      	ldr	r3, [pc, #12]	; (b72e8 <system_ctrl_set_result+0x10>)
   b72dc:	681b      	ldr	r3, [r3, #0]
   b72de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b72e2:	9301      	str	r3, [sp, #4]
   b72e4:	bd08      	pop	{r3, pc}
   b72e6:	0000      	.short	0x0000
   b72e8:	00030220 	.word	0x00030220

000b72ec <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b72ec:	b508      	push	{r3, lr}
   b72ee:	4b03      	ldr	r3, [pc, #12]	; (b72fc <system_sleep_ext+0x10>)
   b72f0:	681b      	ldr	r3, [r3, #0]
   b72f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b72f6:	9301      	str	r3, [sp, #4]
   b72f8:	bd08      	pop	{r3, pc}
   b72fa:	0000      	.short	0x0000
   b72fc:	00030220 	.word	0x00030220

000b7300 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7300:	b508      	push	{r3, lr}
   b7302:	4b02      	ldr	r3, [pc, #8]	; (b730c <network_connect+0xc>)
   b7304:	681b      	ldr	r3, [r3, #0]
   b7306:	685b      	ldr	r3, [r3, #4]
   b7308:	9301      	str	r3, [sp, #4]
   b730a:	bd08      	pop	{r3, pc}
   b730c:	00030240 	.word	0x00030240

000b7310 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7310:	b508      	push	{r3, lr}
   b7312:	4b02      	ldr	r3, [pc, #8]	; (b731c <network_connecting+0xc>)
   b7314:	681b      	ldr	r3, [r3, #0]
   b7316:	689b      	ldr	r3, [r3, #8]
   b7318:	9301      	str	r3, [sp, #4]
   b731a:	bd08      	pop	{r3, pc}
   b731c:	00030240 	.word	0x00030240

000b7320 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7320:	b508      	push	{r3, lr}
   b7322:	4b02      	ldr	r3, [pc, #8]	; (b732c <network_disconnect+0xc>)
   b7324:	681b      	ldr	r3, [r3, #0]
   b7326:	68db      	ldr	r3, [r3, #12]
   b7328:	9301      	str	r3, [sp, #4]
   b732a:	bd08      	pop	{r3, pc}
   b732c:	00030240 	.word	0x00030240

000b7330 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7330:	b508      	push	{r3, lr}
   b7332:	4b02      	ldr	r3, [pc, #8]	; (b733c <network_ready+0xc>)
   b7334:	681b      	ldr	r3, [r3, #0]
   b7336:	691b      	ldr	r3, [r3, #16]
   b7338:	9301      	str	r3, [sp, #4]
   b733a:	bd08      	pop	{r3, pc}
   b733c:	00030240 	.word	0x00030240

000b7340 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7340:	b508      	push	{r3, lr}
   b7342:	4b02      	ldr	r3, [pc, #8]	; (b734c <network_on+0xc>)
   b7344:	681b      	ldr	r3, [r3, #0]
   b7346:	695b      	ldr	r3, [r3, #20]
   b7348:	9301      	str	r3, [sp, #4]
   b734a:	bd08      	pop	{r3, pc}
   b734c:	00030240 	.word	0x00030240

000b7350 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7350:	b508      	push	{r3, lr}
   b7352:	4b02      	ldr	r3, [pc, #8]	; (b735c <network_off+0xc>)
   b7354:	681b      	ldr	r3, [r3, #0]
   b7356:	699b      	ldr	r3, [r3, #24]
   b7358:	9301      	str	r3, [sp, #4]
   b735a:	bd08      	pop	{r3, pc}
   b735c:	00030240 	.word	0x00030240

000b7360 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7360:	b508      	push	{r3, lr}
   b7362:	4b02      	ldr	r3, [pc, #8]	; (b736c <network_listen+0xc>)
   b7364:	681b      	ldr	r3, [r3, #0]
   b7366:	69db      	ldr	r3, [r3, #28]
   b7368:	9301      	str	r3, [sp, #4]
   b736a:	bd08      	pop	{r3, pc}
   b736c:	00030240 	.word	0x00030240

000b7370 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7370:	b508      	push	{r3, lr}
   b7372:	4b02      	ldr	r3, [pc, #8]	; (b737c <network_listening+0xc>)
   b7374:	681b      	ldr	r3, [r3, #0]
   b7376:	6a1b      	ldr	r3, [r3, #32]
   b7378:	9301      	str	r3, [sp, #4]
   b737a:	bd08      	pop	{r3, pc}
   b737c:	00030240 	.word	0x00030240

000b7380 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7380:	b508      	push	{r3, lr}
   b7382:	4b02      	ldr	r3, [pc, #8]	; (b738c <network_set_listen_timeout+0xc>)
   b7384:	681b      	ldr	r3, [r3, #0]
   b7386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7388:	9301      	str	r3, [sp, #4]
   b738a:	bd08      	pop	{r3, pc}
   b738c:	00030240 	.word	0x00030240

000b7390 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7390:	b508      	push	{r3, lr}
   b7392:	4b02      	ldr	r3, [pc, #8]	; (b739c <network_get_listen_timeout+0xc>)
   b7394:	681b      	ldr	r3, [r3, #0]
   b7396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7398:	9301      	str	r3, [sp, #4]
   b739a:	bd08      	pop	{r3, pc}
   b739c:	00030240 	.word	0x00030240

000b73a0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b73a0:	b508      	push	{r3, lr}
   b73a2:	4b02      	ldr	r3, [pc, #8]	; (b73ac <network_is_on+0xc>)
   b73a4:	681b      	ldr	r3, [r3, #0]
   b73a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b73a8:	9301      	str	r3, [sp, #4]
   b73aa:	bd08      	pop	{r3, pc}
   b73ac:	00030240 	.word	0x00030240

000b73b0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b73b0:	b508      	push	{r3, lr}
   b73b2:	4b02      	ldr	r3, [pc, #8]	; (b73bc <network_is_off+0xc>)
   b73b4:	681b      	ldr	r3, [r3, #0]
   b73b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b73b8:	9301      	str	r3, [sp, #4]
   b73ba:	bd08      	pop	{r3, pc}
   b73bc:	00030240 	.word	0x00030240

000b73c0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b73c0:	b508      	push	{r3, lr}
   b73c2:	4b02      	ldr	r3, [pc, #8]	; (b73cc <spark_process+0xc>)
   b73c4:	681b      	ldr	r3, [r3, #0]
   b73c6:	689b      	ldr	r3, [r3, #8]
   b73c8:	9301      	str	r3, [sp, #4]
   b73ca:	bd08      	pop	{r3, pc}
   b73cc:	00030244 	.word	0x00030244

000b73d0 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b73d0:	b508      	push	{r3, lr}
   b73d2:	4b02      	ldr	r3, [pc, #8]	; (b73dc <spark_cloud_flag_connected+0xc>)
   b73d4:	681b      	ldr	r3, [r3, #0]
   b73d6:	695b      	ldr	r3, [r3, #20]
   b73d8:	9301      	str	r3, [sp, #4]
   b73da:	bd08      	pop	{r3, pc}
   b73dc:	00030244 	.word	0x00030244

000b73e0 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b73e0:	b508      	push	{r3, lr}
   b73e2:	4b02      	ldr	r3, [pc, #8]	; (b73ec <spark_sync_time_pending+0xc>)
   b73e4:	681b      	ldr	r3, [r3, #0]
   b73e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b73e8:	9301      	str	r3, [sp, #4]
   b73ea:	bd08      	pop	{r3, pc}
   b73ec:	00030244 	.word	0x00030244

000b73f0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b73f0:	b508      	push	{r3, lr}
   b73f2:	4b02      	ldr	r3, [pc, #8]	; (b73fc <spark_set_random_seed_from_cloud_handler+0xc>)
   b73f4:	681b      	ldr	r3, [r3, #0]
   b73f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b73f8:	9301      	str	r3, [sp, #4]
   b73fa:	bd08      	pop	{r3, pc}
   b73fc:	00030244 	.word	0x00030244

000b7400 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7400:	b508      	push	{r3, lr}
   b7402:	4b02      	ldr	r3, [pc, #8]	; (b740c <malloc+0xc>)
   b7404:	681b      	ldr	r3, [r3, #0]
   b7406:	681b      	ldr	r3, [r3, #0]
   b7408:	9301      	str	r3, [sp, #4]
   b740a:	bd08      	pop	{r3, pc}
   b740c:	0003021c 	.word	0x0003021c

000b7410 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7410:	b508      	push	{r3, lr}
   b7412:	4b02      	ldr	r3, [pc, #8]	; (b741c <free+0xc>)
   b7414:	681b      	ldr	r3, [r3, #0]
   b7416:	685b      	ldr	r3, [r3, #4]
   b7418:	9301      	str	r3, [sp, #4]
   b741a:	bd08      	pop	{r3, pc}
   b741c:	0003021c 	.word	0x0003021c

000b7420 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7420:	b508      	push	{r3, lr}
   b7422:	4b02      	ldr	r3, [pc, #8]	; (b742c <vsnprintf+0xc>)
   b7424:	681b      	ldr	r3, [r3, #0]
   b7426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7428:	9301      	str	r3, [sp, #4]
   b742a:	bd08      	pop	{r3, pc}
   b742c:	0003021c 	.word	0x0003021c

000b7430 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7430:	b508      	push	{r3, lr}
   b7432:	4b02      	ldr	r3, [pc, #8]	; (b743c <__assert_func+0xc>)
   b7434:	681b      	ldr	r3, [r3, #0]
   b7436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7438:	9301      	str	r3, [sp, #4]
   b743a:	bd08      	pop	{r3, pc}
   b743c:	0003021c 	.word	0x0003021c

000b7440 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7440:	b508      	push	{r3, lr}
   b7442:	4b02      	ldr	r3, [pc, #8]	; (b744c <newlib_impure_ptr_callback+0xc>)
   b7444:	681b      	ldr	r3, [r3, #0]
   b7446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7448:	9301      	str	r3, [sp, #4]
   b744a:	bd08      	pop	{r3, pc}
   b744c:	0003021c 	.word	0x0003021c

000b7450 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   b7450:	b508      	push	{r3, lr}
            return &Wire1;
   b7452:	f001 f809 	bl	b8468 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   b7456:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   b745a:	f000 be25 	b.w	b80a8 <_ZN7TwoWire4lockEv>

000b745e <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   b745e:	b510      	push	{r4, lr}
   b7460:	4604      	mov	r4, r0
    lock_(_lock)
   b7462:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   b7464:	b109      	cbz	r1, b746a <_ZN4PMICC1Eb+0xc>
        lock();
   b7466:	f7ff fff3 	bl	b7450 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   b746a:	4620      	mov	r0, r4
   b746c:	bd10      	pop	{r4, pc}

000b746e <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b746e:	2200      	movs	r2, #0
   b7470:	6840      	ldr	r0, [r0, #4]
   b7472:	4611      	mov	r1, r2
   b7474:	f7ff bf7c 	b.w	b7370 <network_listening>

000b7478 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7478:	2200      	movs	r2, #0
   b747a:	6840      	ldr	r0, [r0, #4]
   b747c:	4611      	mov	r1, r2
   b747e:	f7ff bf87 	b.w	b7390 <network_get_listen_timeout>

000b7482 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7482:	6840      	ldr	r0, [r0, #4]
   b7484:	2200      	movs	r2, #0
   b7486:	f7ff bf7b 	b.w	b7380 <network_set_listen_timeout>

000b748a <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b748a:	6840      	ldr	r0, [r0, #4]
   b748c:	2200      	movs	r2, #0
   b748e:	f081 0101 	eor.w	r1, r1, #1
   b7492:	f7ff bf65 	b.w	b7360 <network_listen>

000b7496 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7496:	2300      	movs	r3, #0
   b7498:	6840      	ldr	r0, [r0, #4]
   b749a:	461a      	mov	r2, r3
   b749c:	4619      	mov	r1, r3
   b749e:	f7ff bf57 	b.w	b7350 <network_off>

000b74a2 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b74a2:	2300      	movs	r3, #0
   b74a4:	6840      	ldr	r0, [r0, #4]
   b74a6:	461a      	mov	r2, r3
   b74a8:	4619      	mov	r1, r3
   b74aa:	f7ff bf49 	b.w	b7340 <network_on>

000b74ae <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b74ae:	2200      	movs	r2, #0
   b74b0:	6840      	ldr	r0, [r0, #4]
   b74b2:	4611      	mov	r1, r2
   b74b4:	f7ff bf3c 	b.w	b7330 <network_ready>

000b74b8 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b74b8:	2200      	movs	r2, #0
   b74ba:	6840      	ldr	r0, [r0, #4]
   b74bc:	4611      	mov	r1, r2
   b74be:	f7ff bf27 	b.w	b7310 <network_connecting>

000b74c2 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b74c2:	6840      	ldr	r0, [r0, #4]
   b74c4:	2200      	movs	r2, #0
   b74c6:	2102      	movs	r1, #2
   b74c8:	f7ff bf2a 	b.w	b7320 <network_disconnect>

000b74cc <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b74cc:	2300      	movs	r3, #0
   b74ce:	6840      	ldr	r0, [r0, #4]
   b74d0:	461a      	mov	r2, r3
   b74d2:	f7ff bf15 	b.w	b7300 <network_connect>
	...

000b74d8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b74d8:	4b02      	ldr	r3, [pc, #8]	; (b74e4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b74da:	2203      	movs	r2, #3
   b74dc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b74de:	4a02      	ldr	r2, [pc, #8]	; (b74e8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b74e0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b74e2:	4770      	bx	lr
   b74e4:	2003e684 	.word	0x2003e684
   b74e8:	000b9c68 	.word	0x000b9c68

000b74ec <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b74ec:	2100      	movs	r1, #0
   b74ee:	f7ff be71 	b.w	b71d4 <hal_spi_release>

000b74f2 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b74f2:	2100      	movs	r1, #0
   b74f4:	f7ff be66 	b.w	b71c4 <hal_spi_acquire>

000b74f8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b74f8:	b510      	push	{r4, lr}
   b74fa:	4604      	mov	r4, r0
   b74fc:	4608      	mov	r0, r1
{
    _spi = spi;
   b74fe:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7500:	f7ff fe30 	bl	b7164 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7504:	2300      	movs	r3, #0
   b7506:	6063      	str	r3, [r4, #4]
}
   b7508:	4620      	mov	r0, r4
   b750a:	bd10      	pop	{r4, pc}

000b750c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b750c:	b513      	push	{r0, r1, r4, lr}
   b750e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b7510:	7800      	ldrb	r0, [r0, #0]
   b7512:	f7ff ffee 	bl	b74f2 <_ZN8SPIClass4lockEv.isra.0>
   b7516:	b958      	cbnz	r0, b7530 <_ZN8SPIClass5beginEv+0x24>
   b7518:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b751a:	9001      	str	r0, [sp, #4]
   b751c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7520:	f7ff fe10 	bl	b7144 <hal_spi_begin>
        unlock();
   b7524:	9801      	ldr	r0, [sp, #4]
    }
}
   b7526:	b002      	add	sp, #8
   b7528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b752c:	f7ff bfde 	b.w	b74ec <_ZN8SPIClass6unlockEv.isra.0>
   b7530:	b002      	add	sp, #8
   b7532:	bd10      	pop	{r4, pc}

000b7534 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b7534:	7800      	ldrb	r0, [r0, #0]
   b7536:	f7ff bfd9 	b.w	b74ec <_ZN8SPIClass6unlockEv.isra.0>
	...

000b753c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b753c:	0840      	lsrs	r0, r0, #1
{
   b753e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7540:	6018      	str	r0, [r3, #0]
   b7542:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7544:	6818      	ldr	r0, [r3, #0]
   b7546:	4288      	cmp	r0, r1
   b7548:	b2e5      	uxtb	r5, r4
   b754a:	d906      	bls.n	b755a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b754c:	3401      	adds	r4, #1
   b754e:	2c08      	cmp	r4, #8
   b7550:	d002      	beq.n	b7558 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b7552:	0840      	lsrs	r0, r0, #1
   b7554:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b7556:	e7f5      	b.n	b7544 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b7558:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b755a:	4b02      	ldr	r3, [pc, #8]	; (b7564 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b755c:	5d5b      	ldrb	r3, [r3, r5]
   b755e:	7013      	strb	r3, [r2, #0]
}
   b7560:	bd30      	pop	{r4, r5, pc}
   b7562:	bf00      	nop
   b7564:	000b9c9c 	.word	0x000b9c9c

000b7568 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b7568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b756c:	4606      	mov	r6, r0
   b756e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7570:	7800      	ldrb	r0, [r0, #0]
{
   b7572:	460c      	mov	r4, r1
    CHECK(lock());
   b7574:	f7ff ffbd 	bl	b74f2 <_ZN8SPIClass4lockEv.isra.0>
   b7578:	2800      	cmp	r0, #0
   b757a:	db1b      	blt.n	b75b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b757c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b757e:	2214      	movs	r2, #20
   b7580:	2100      	movs	r1, #0
   b7582:	a809      	add	r0, sp, #36	; 0x24
   b7584:	f001 fcc0 	bl	b8f08 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7588:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b758a:	2200      	movs	r2, #0
   b758c:	a909      	add	r1, sp, #36	; 0x24
   b758e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7590:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7594:	f7ff fdf6 	bl	b7184 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7598:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b759c:	b113      	cbz	r3, b75a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b759e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b75a2:	b155      	cbz	r5, b75ba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b75a4:	2700      	movs	r7, #0
   b75a6:	46b9      	mov	r9, r7
   b75a8:	46b8      	mov	r8, r7
   b75aa:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b75ac:	7923      	ldrb	r3, [r4, #4]
   b75ae:	b15d      	cbz	r5, b75c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b75b0:	b1c3      	cbz	r3, b75e4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b75b2:	2000      	movs	r0, #0
}
   b75b4:	b00f      	add	sp, #60	; 0x3c
   b75b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b75ba:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b75be:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b75c2:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b75c6:	e7f1      	b.n	b75ac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b75c8:	2b00      	cmp	r3, #0
   b75ca:	d135      	bne.n	b7638 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b75cc:	68a3      	ldr	r3, [r4, #8]
   b75ce:	4543      	cmp	r3, r8
   b75d0:	d108      	bne.n	b75e4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b75d2:	f88d 9020 	strb.w	r9, [sp, #32]
   b75d6:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b75da:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b75de:	89a3      	ldrh	r3, [r4, #12]
   b75e0:	429a      	cmp	r2, r3
   b75e2:	d0e6      	beq.n	b75b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b75e4:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b75e6:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b75e8:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b75ec:	980a      	ldr	r0, [sp, #40]	; 0x28
   b75ee:	ab04      	add	r3, sp, #16
   b75f0:	f10d 020f 	add.w	r2, sp, #15
   b75f4:	f7ff ffa2 	bl	b753c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b75f8:	7921      	ldrb	r1, [r4, #4]
   b75fa:	b985      	cbnz	r5, b761e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b75fc:	b989      	cbnz	r1, b7622 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b75fe:	68a3      	ldr	r3, [r4, #8]
   b7600:	4543      	cmp	r3, r8
   b7602:	d30e      	bcc.n	b7622 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b7604:	f88d 9020 	strb.w	r9, [sp, #32]
   b7608:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b760c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7610:	89a3      	ldrh	r3, [r4, #12]
   b7612:	429a      	cmp	r2, r3
   b7614:	d105      	bne.n	b7622 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b7616:	9b04      	ldr	r3, [sp, #16]
   b7618:	4543      	cmp	r3, r8
   b761a:	d102      	bne.n	b7622 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b761c:	e7c9      	b.n	b75b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b761e:	2900      	cmp	r1, #0
   b7620:	d1f9      	bne.n	b7616 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b7622:	2300      	movs	r3, #0
   b7624:	9301      	str	r3, [sp, #4]
   b7626:	7b63      	ldrb	r3, [r4, #13]
   b7628:	9300      	str	r3, [sp, #0]
   b762a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b762e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7630:	7830      	ldrb	r0, [r6, #0]
   b7632:	f7ff fdbf 	bl	b71b4 <hal_spi_set_settings>
   b7636:	e7bc      	b.n	b75b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7638:	e9cd 5500 	strd	r5, r5, [sp]
   b763c:	462b      	mov	r3, r5
   b763e:	462a      	mov	r2, r5
   b7640:	2101      	movs	r1, #1
   b7642:	e7f5      	b.n	b7630 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7644 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b7644:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7646:	7800      	ldrb	r0, [r0, #0]
   b7648:	f7ff fd84 	bl	b7154 <hal_spi_transfer>
}
   b764c:	b2c0      	uxtb	r0, r0
   b764e:	bd08      	pop	{r3, pc}

000b7650 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   b7650:	b530      	push	{r4, r5, lr}
   b7652:	b087      	sub	sp, #28
   b7654:	4604      	mov	r4, r0
   b7656:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   b7658:	9500      	str	r5, [sp, #0]
   b765a:	7800      	ldrb	r0, [r0, #0]
   b765c:	f7ff fd9a 	bl	b7194 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   b7660:	b93d      	cbnz	r5, b7672 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   b7662:	7820      	ldrb	r0, [r4, #0]
   b7664:	a902      	add	r1, sp, #8
   b7666:	f7ff fd9d 	bl	b71a4 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   b766a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b766e:	07db      	lsls	r3, r3, #31
   b7670:	d4f7      	bmi.n	b7662 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   b7672:	b007      	add	sp, #28
   b7674:	bd30      	pop	{r4, r5, pc}

000b7676 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   b7676:	b510      	push	{r4, lr}
   b7678:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b767a:	6800      	ldr	r0, [r0, #0]
   b767c:	b118      	cbz	r0, b7686 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   b767e:	f7ff fec7 	bl	b7410 <free>
            wakeupSource_ = nullptr;
   b7682:	2300      	movs	r3, #0
   b7684:	6023      	str	r3, [r4, #0]
        }
    }
   b7686:	bd10      	pop	{r4, pc}

000b7688 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   b7688:	b538      	push	{r3, r4, r5, lr}
   b768a:	460c      	mov	r4, r1
   b768c:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b768e:	f7ff fff2 	bl	b7676 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   b7692:	b154      	cbz	r4, b76aa <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   b7694:	8820      	ldrh	r0, [r4, #0]
   b7696:	f7ff feb3 	bl	b7400 <malloc>
   b769a:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   b769c:	b128      	cbz	r0, b76aa <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   b769e:	8822      	ldrh	r2, [r4, #0]
   b76a0:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   b76a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   b76a6:	f001 bc21 	b.w	b8eec <memcpy>
    }
   b76aa:	bd38      	pop	{r3, r4, r5, pc}

000b76ac <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b76ac:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   b76ae:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   b76b2:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   b76b4:	f8d1 3006 	ldr.w	r3, [r1, #6]
   b76b8:	f8c0 3006 	str.w	r3, [r0, #6]
   b76bc:	894b      	ldrh	r3, [r1, #10]
   b76be:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b76c0:	460c      	mov	r4, r1
   b76c2:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b76c4:	f7ff ffd7 	bl	b7676 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   b76c8:	6823      	ldr	r3, [r4, #0]
   b76ca:	b113      	cbz	r3, b76d2 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   b76cc:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   b76ce:	2300      	movs	r3, #0
   b76d0:	6023      	str	r3, [r4, #0]
    }
   b76d2:	bd38      	pop	{r3, r4, r5, pc}

000b76d4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   b76d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b76d6:	4d2b      	ldr	r5, [pc, #172]	; (b7784 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   b76d8:	7d0b      	ldrb	r3, [r1, #20]
   b76da:	4604      	mov	r4, r0
   b76dc:	b08b      	sub	sp, #44	; 0x2c
   b76de:	4608      	mov	r0, r1
   b76e0:	1daf      	adds	r7, r5, #6
   b76e2:	2b00      	cmp	r3, #0
   b76e4:	d036      	beq.n	b7754 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   b76e6:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   b76e8:	791b      	ldrb	r3, [r3, #4]
   b76ea:	2b00      	cmp	r3, #0
   b76ec:	d032      	beq.n	b7754 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   b76ee:	4b26      	ldr	r3, [pc, #152]	; (b7788 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   b76f0:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   b76f2:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   b76f4:	a902      	add	r1, sp, #8
   b76f6:	3004      	adds	r0, #4
   b76f8:	e9cd 2202 	strd	r2, r2, [sp, #8]
   b76fc:	f7ff fdf6 	bl	b72ec <system_sleep_ext>
        compatResult_ = result.compatResult_;
   b7700:	f8dd 300e 	ldr.w	r3, [sp, #14]
   b7704:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   b7708:	b200      	sxth	r0, r0
   b770a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   b770e:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   b7712:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   b7714:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   b7716:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b7718:	4628      	mov	r0, r5
   b771a:	f7ff ffb5 	bl	b7688 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   b771e:	a802      	add	r0, sp, #8
   b7720:	f7ff ffa9 	bl	b7676 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   b7724:	2300      	movs	r3, #0
   b7726:	6023      	str	r3, [r4, #0]
   b7728:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   b772a:	71a3      	strb	r3, [r4, #6]
   b772c:	8123      	strh	r3, [r4, #8]
   b772e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7732:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   b7734:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   b7738:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   b773a:	f8d5 3006 	ldr.w	r3, [r5, #6]
   b773e:	f8c4 3006 	str.w	r3, [r4, #6]
   b7742:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b7744:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   b7746:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   b7748:	4620      	mov	r0, r4
   b774a:	f7ff ff9d 	bl	b7688 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   b774e:	4620      	mov	r0, r4
   b7750:	b00b      	add	sp, #44	; 0x2c
   b7752:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   b7754:	2600      	movs	r6, #0
   b7756:	2320      	movs	r3, #32
   b7758:	e9cd 3602 	strd	r3, r6, [sp, #8]
   b775c:	4b0b      	ldr	r3, [pc, #44]	; (b778c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   b775e:	9300      	str	r3, [sp, #0]
   b7760:	aa02      	add	r2, sp, #8
   b7762:	4633      	mov	r3, r6
   b7764:	490a      	ldr	r1, [pc, #40]	; (b7790 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   b7766:	2032      	movs	r0, #50	; 0x32
   b7768:	f7ff fd7c 	bl	b7264 <log_message>
            : wakeupSource_(nullptr),
   b776c:	4b06      	ldr	r3, [pc, #24]	; (b7788 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   b776e:	4805      	ldr	r0, [pc, #20]	; (b7784 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   b7770:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   b7772:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   b7776:	a902      	add	r1, sp, #8
   b7778:	e9cd 2303 	strd	r2, r3, [sp, #12]
   b777c:	f7ff ff96 	bl	b76ac <_ZN17SystemSleepResultaSEOS_.isra.0>
   b7780:	e7cd      	b.n	b771e <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   b7782:	bf00      	nop
   b7784:	2003e68c 	.word	0x2003e68c
   b7788:	ffff0000 	.word	0xffff0000
   b778c:	000b9cab 	.word	0x000b9cab
   b7790:	000b9ca4 	.word	0x000b9ca4

000b7794 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7794:	4b05      	ldr	r3, [pc, #20]	; (b77ac <_GLOBAL__sub_I_System+0x18>)
   b7796:	2202      	movs	r2, #2
   b7798:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b779a:	4b05      	ldr	r3, [pc, #20]	; (b77b0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b779c:	4a05      	ldr	r2, [pc, #20]	; (b77b4 <_GLOBAL__sub_I_System+0x20>)
   b779e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b77a0:	2000      	movs	r0, #0
   b77a2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b77a6:	f7ff bd6d 	b.w	b7284 <set_system_mode>
   b77aa:	bf00      	nop
   b77ac:	2003e698 	.word	0x2003e698
   b77b0:	2003e68c 	.word	0x2003e68c
   b77b4:	ffff0000 	.word	0xffff0000

000b77b8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b77b8:	4802      	ldr	r0, [pc, #8]	; (b77c4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b77ba:	2300      	movs	r3, #0
   b77bc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b77be:	f7ff bc11 	b.w	b6fe4 <os_mutex_recursive_create>
   b77c2:	bf00      	nop
   b77c4:	2003e69c 	.word	0x2003e69c

000b77c8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b77c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b77ca:	4606      	mov	r6, r0
   b77cc:	460d      	mov	r5, r1
  size_t n = 0;
   b77ce:	188f      	adds	r7, r1, r2
   b77d0:	2400      	movs	r4, #0
  while (size--) {
   b77d2:	42bd      	cmp	r5, r7
   b77d4:	d00c      	beq.n	b77f0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b77d6:	6833      	ldr	r3, [r6, #0]
   b77d8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b77dc:	689b      	ldr	r3, [r3, #8]
   b77de:	4630      	mov	r0, r6
   b77e0:	4798      	blx	r3
     if (chunk>=0)
   b77e2:	1e03      	subs	r3, r0, #0
   b77e4:	db01      	blt.n	b77ea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b77e6:	441c      	add	r4, r3
  while (size--) {
   b77e8:	e7f3      	b.n	b77d2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b77ea:	2c00      	cmp	r4, #0
   b77ec:	bf08      	it	eq
   b77ee:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b77f0:	4620      	mov	r0, r4
   b77f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b77f4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b77f4:	b508      	push	{r3, lr}
  return write(str);
   b77f6:	f7fe fa73 	bl	b5ce0 <_ZN5Print5writeEPKc>
}
   b77fa:	bd08      	pop	{r3, pc}

000b77fc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b77fc:	6803      	ldr	r3, [r0, #0]
   b77fe:	689b      	ldr	r3, [r3, #8]
   b7800:	4718      	bx	r3

000b7802 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b7802:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b7804:	210d      	movs	r1, #13
{
   b7806:	4605      	mov	r5, r0
  size_t n = print('\r');
   b7808:	f7ff fff8 	bl	b77fc <_ZN5Print5printEc>
  n += print('\n');
   b780c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b780e:	4604      	mov	r4, r0
  n += print('\n');
   b7810:	4628      	mov	r0, r5
   b7812:	f7ff fff3 	bl	b77fc <_ZN5Print5printEc>
  return n;
}
   b7816:	4420      	add	r0, r4
   b7818:	bd38      	pop	{r3, r4, r5, pc}

000b781a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b781a:	b538      	push	{r3, r4, r5, lr}
   b781c:	4605      	mov	r5, r0
  return write(str);
   b781e:	f7fe fa5f 	bl	b5ce0 <_ZN5Print5writeEPKc>
   b7822:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b7824:	4628      	mov	r0, r5
   b7826:	f7ff ffec 	bl	b7802 <_ZN5Print7printlnEv>
  return n;
}
   b782a:	4420      	add	r0, r4
   b782c:	bd38      	pop	{r3, r4, r5, pc}

000b782e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b782e:	b530      	push	{r4, r5, lr}
   b7830:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b7832:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7834:	2a01      	cmp	r2, #1
  *str = '\0';
   b7836:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b783a:	bf98      	it	ls
   b783c:	220a      	movls	r2, #10
   b783e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7840:	460d      	mov	r5, r1
   b7842:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7846:	fb01 5312 	mls	r3, r1, r2, r5
   b784a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b784e:	2b09      	cmp	r3, #9
   b7850:	bf94      	ite	ls
   b7852:	3330      	addls	r3, #48	; 0x30
   b7854:	3337      	addhi	r3, #55	; 0x37
   b7856:	b2db      	uxtb	r3, r3
  } while(n);
   b7858:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b785a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b785e:	d9ef      	bls.n	b7840 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7860:	4621      	mov	r1, r4
   b7862:	f7fe fa3d 	bl	b5ce0 <_ZN5Print5writeEPKc>
}
   b7866:	b00b      	add	sp, #44	; 0x2c
   b7868:	bd30      	pop	{r4, r5, pc}
	...

000b786c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b786c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7870:	ec55 4b10 	vmov	r4, r5, d0
   b7874:	4606      	mov	r6, r0
   b7876:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b7878:	ee10 2a10 	vmov	r2, s0
   b787c:	ee10 0a10 	vmov	r0, s0
   b7880:	462b      	mov	r3, r5
   b7882:	4629      	mov	r1, r5
   b7884:	f001 fa6e 	bl	b8d64 <__aeabi_dcmpun>
   b7888:	b140      	cbz	r0, b789c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b788a:	4953      	ldr	r1, [pc, #332]	; (b79d8 <_ZN5Print10printFloatEdh+0x16c>)
   b788c:	4630      	mov	r0, r6
   b788e:	f7fe fa27 	bl	b5ce0 <_ZN5Print5writeEPKc>
   b7892:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b7894:	4650      	mov	r0, sl
   b7896:	b003      	add	sp, #12
   b7898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b789c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b78a0:	4b4e      	ldr	r3, [pc, #312]	; (b79dc <_ZN5Print10printFloatEdh+0x170>)
   b78a2:	f04f 32ff 	mov.w	r2, #4294967295
   b78a6:	4620      	mov	r0, r4
   b78a8:	4649      	mov	r1, r9
   b78aa:	f001 fa5b 	bl	b8d64 <__aeabi_dcmpun>
   b78ae:	b948      	cbnz	r0, b78c4 <_ZN5Print10printFloatEdh+0x58>
   b78b0:	4b4a      	ldr	r3, [pc, #296]	; (b79dc <_ZN5Print10printFloatEdh+0x170>)
   b78b2:	f04f 32ff 	mov.w	r2, #4294967295
   b78b6:	4620      	mov	r0, r4
   b78b8:	4649      	mov	r1, r9
   b78ba:	f001 fa35 	bl	b8d28 <__aeabi_dcmple>
   b78be:	b908      	cbnz	r0, b78c4 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b78c0:	4947      	ldr	r1, [pc, #284]	; (b79e0 <_ZN5Print10printFloatEdh+0x174>)
   b78c2:	e7e3      	b.n	b788c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b78c4:	4b47      	ldr	r3, [pc, #284]	; (b79e4 <_ZN5Print10printFloatEdh+0x178>)
   b78c6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b78ca:	4620      	mov	r0, r4
   b78cc:	4629      	mov	r1, r5
   b78ce:	f001 fa3f 	bl	b8d50 <__aeabi_dcmpgt>
   b78d2:	b108      	cbz	r0, b78d8 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b78d4:	4944      	ldr	r1, [pc, #272]	; (b79e8 <_ZN5Print10printFloatEdh+0x17c>)
   b78d6:	e7d9      	b.n	b788c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b78d8:	4b44      	ldr	r3, [pc, #272]	; (b79ec <_ZN5Print10printFloatEdh+0x180>)
   b78da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b78de:	4620      	mov	r0, r4
   b78e0:	4629      	mov	r1, r5
   b78e2:	f001 fa17 	bl	b8d14 <__aeabi_dcmplt>
   b78e6:	2800      	cmp	r0, #0
   b78e8:	d1f4      	bne.n	b78d4 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b78ea:	2200      	movs	r2, #0
   b78ec:	2300      	movs	r3, #0
   b78ee:	4620      	mov	r0, r4
   b78f0:	4629      	mov	r1, r5
   b78f2:	f001 fa0f 	bl	b8d14 <__aeabi_dcmplt>
   b78f6:	b1d0      	cbz	r0, b792e <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b78f8:	212d      	movs	r1, #45	; 0x2d
   b78fa:	4630      	mov	r0, r6
   b78fc:	f7ff ff7e 	bl	b77fc <_ZN5Print5printEc>
     number = -number;
   b7900:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b7904:	4682      	mov	sl, r0
     number = -number;
   b7906:	461d      	mov	r5, r3
  double rounding = 0.5;
   b7908:	4939      	ldr	r1, [pc, #228]	; (b79f0 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b790a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b79f8 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b790e:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b7912:	2000      	movs	r0, #0
    rounding /= 10.0;
   b7914:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b7918:	fa5f f38b 	uxtb.w	r3, fp
   b791c:	429f      	cmp	r7, r3
   b791e:	d908      	bls.n	b7932 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b7920:	4642      	mov	r2, r8
   b7922:	464b      	mov	r3, r9
   b7924:	f001 f8ae 	bl	b8a84 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b7928:	f10b 0b01 	add.w	fp, fp, #1
   b792c:	e7f4      	b.n	b7918 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b792e:	4682      	mov	sl, r0
   b7930:	e7ea      	b.n	b7908 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b7932:	4622      	mov	r2, r4
   b7934:	462b      	mov	r3, r5
   b7936:	f000 fdc5 	bl	b84c4 <__adddf3>
   b793a:	460d      	mov	r5, r1
   b793c:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b793e:	f001 fa4f 	bl	b8de0 <__aeabi_d2uiz>
   b7942:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b7944:	f000 fefa 	bl	b873c <__aeabi_ui2d>
   b7948:	4602      	mov	r2, r0
   b794a:	460b      	mov	r3, r1
   b794c:	4620      	mov	r0, r4
   b794e:	4629      	mov	r1, r5
   b7950:	f000 fdb6 	bl	b84c0 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7954:	220a      	movs	r2, #10
   b7956:	4604      	mov	r4, r0
   b7958:	460d      	mov	r5, r1
   b795a:	4630      	mov	r0, r6
   b795c:	4641      	mov	r1, r8
   b795e:	f7ff ff66 	bl	b782e <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b7962:	4482      	add	sl, r0
  if (digits > 0) {
   b7964:	2f00      	cmp	r7, #0
   b7966:	d095      	beq.n	b7894 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b7968:	4922      	ldr	r1, [pc, #136]	; (b79f4 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b796a:	f8df 908c 	ldr.w	r9, [pc, #140]	; b79f8 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b796e:	4630      	mov	r0, r6
   b7970:	f7fe f9b6 	bl	b5ce0 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b7974:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b7978:	4482      	add	sl, r0
  while (digits-- > 0)
   b797a:	2f00      	cmp	r7, #0
   b797c:	d08a      	beq.n	b7894 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b797e:	4642      	mov	r2, r8
   b7980:	464b      	mov	r3, r9
   b7982:	4620      	mov	r0, r4
   b7984:	4629      	mov	r1, r5
   b7986:	f000 ff53 	bl	b8830 <__aeabi_dmul>
   b798a:	4604      	mov	r4, r0
   b798c:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b798e:	f001 f9ff 	bl	b8d90 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b7992:	f1b0 0b00 	subs.w	fp, r0, #0
   b7996:	da1c      	bge.n	b79d2 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b7998:	212d      	movs	r1, #45	; 0x2d
   b799a:	4630      	mov	r0, r6
   b799c:	f7ff ff2e 	bl	b77fc <_ZN5Print5printEc>
            val = -n;
   b79a0:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b79a4:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b79a6:	220a      	movs	r2, #10
   b79a8:	4630      	mov	r0, r6
   b79aa:	9301      	str	r3, [sp, #4]
   b79ac:	f7ff ff3f 	bl	b782e <_ZN5Print11printNumberEmh>
   b79b0:	9b01      	ldr	r3, [sp, #4]
   b79b2:	4418      	add	r0, r3
    n += print(toPrint);
   b79b4:	4482      	add	sl, r0
    remainder -= toPrint;
   b79b6:	4658      	mov	r0, fp
   b79b8:	f000 fed0 	bl	b875c <__aeabi_i2d>
   b79bc:	4602      	mov	r2, r0
   b79be:	460b      	mov	r3, r1
   b79c0:	4620      	mov	r0, r4
   b79c2:	4629      	mov	r1, r5
   b79c4:	f000 fd7c 	bl	b84c0 <__aeabi_dsub>
   b79c8:	3f01      	subs	r7, #1
   b79ca:	4604      	mov	r4, r0
   b79cc:	460d      	mov	r5, r1
   b79ce:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b79d0:	e7d3      	b.n	b797a <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b79d2:	4659      	mov	r1, fp
        size_t t = 0;
   b79d4:	2300      	movs	r3, #0
   b79d6:	e7e6      	b.n	b79a6 <_ZN5Print10printFloatEdh+0x13a>
   b79d8:	000b9cd2 	.word	0x000b9cd2
   b79dc:	7fefffff 	.word	0x7fefffff
   b79e0:	000b9cd6 	.word	0x000b9cd6
   b79e4:	41efffff 	.word	0x41efffff
   b79e8:	000b9cda 	.word	0x000b9cda
   b79ec:	c1efffff 	.word	0xc1efffff
   b79f0:	3fe00000 	.word	0x3fe00000
   b79f4:	000b9cd0 	.word	0x000b9cd0
   b79f8:	40240000 	.word	0x40240000

000b79fc <_ZN5Print5printEfi>:
{
   b79fc:	b538      	push	{r3, r4, r5, lr}
   b79fe:	4604      	mov	r4, r0
   b7a00:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b7a04:	b2cd      	uxtb	r5, r1
   b7a06:	f000 febb 	bl	b8780 <__aeabi_f2d>
   b7a0a:	ec41 0b10 	vmov	d0, r0, r1
   b7a0e:	4629      	mov	r1, r5
   b7a10:	4620      	mov	r0, r4
}
   b7a12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b7a16:	f7ff bf29 	b.w	b786c <_ZN5Print10printFloatEdh>

000b7a1a <_ZN5Print7printlnEdi>:
{
   b7a1a:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b7a1c:	b2c9      	uxtb	r1, r1
{
   b7a1e:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b7a20:	f7ff ff24 	bl	b786c <_ZN5Print10printFloatEdh>
   b7a24:	4604      	mov	r4, r0
  n += println();
   b7a26:	4628      	mov	r0, r5
   b7a28:	f7ff feeb 	bl	b7802 <_ZN5Print7printlnEv>
}
   b7a2c:	4420      	add	r0, r4
   b7a2e:	bd38      	pop	{r3, r4, r5, pc}

000b7a30 <_ZN5Print7printlnEfi>:
{
   b7a30:	b538      	push	{r3, r4, r5, lr}
   b7a32:	4604      	mov	r4, r0
   b7a34:	ee10 0a10 	vmov	r0, s0
   b7a38:	460d      	mov	r5, r1
    return println((double)num, digits);
   b7a3a:	f000 fea1 	bl	b8780 <__aeabi_f2d>
   b7a3e:	ec41 0b10 	vmov	d0, r0, r1
   b7a42:	4629      	mov	r1, r5
   b7a44:	4620      	mov	r0, r4
}
   b7a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   b7a4a:	f7ff bfe6 	b.w	b7a1a <_ZN5Print7printlnEdi>

000b7a4e <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7a52:	b086      	sub	sp, #24
   b7a54:	af00      	add	r7, sp, #0
   b7a56:	4605      	mov	r5, r0
   b7a58:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b7a5a:	1d38      	adds	r0, r7, #4
   b7a5c:	2114      	movs	r1, #20
{
   b7a5e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7a60:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b7a62:	f7ff fcdd 	bl	b7420 <vsnprintf>

    if (n<bufsize)
   b7a66:	2813      	cmp	r0, #19
   b7a68:	d80e      	bhi.n	b7a88 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b7a6a:	1d39      	adds	r1, r7, #4
   b7a6c:	4628      	mov	r0, r5
   b7a6e:	f7fe f937 	bl	b5ce0 <_ZN5Print5writeEPKc>
   b7a72:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7a74:	b11e      	cbz	r6, b7a7e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b7a76:	4628      	mov	r0, r5
   b7a78:	f7ff fec3 	bl	b7802 <_ZN5Print7printlnEv>
   b7a7c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b7a7e:	4620      	mov	r0, r4
   b7a80:	3718      	adds	r7, #24
   b7a82:	46bd      	mov	sp, r7
   b7a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7a88:	f100 0308 	add.w	r3, r0, #8
   b7a8c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7a90:	46e8      	mov	r8, sp
        char bigger[n+1];
   b7a92:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b7a96:	4622      	mov	r2, r4
   b7a98:	1c41      	adds	r1, r0, #1
   b7a9a:	683b      	ldr	r3, [r7, #0]
   b7a9c:	4668      	mov	r0, sp
   b7a9e:	f7ff fcbf 	bl	b7420 <vsnprintf>
  return write(str);
   b7aa2:	4669      	mov	r1, sp
   b7aa4:	4628      	mov	r0, r5
   b7aa6:	f7fe f91b 	bl	b5ce0 <_ZN5Print5writeEPKc>
   b7aaa:	4604      	mov	r4, r0
   b7aac:	46c5      	mov	sp, r8
   b7aae:	e7e1      	b.n	b7a74 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b7ab0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7ab0:	4b01      	ldr	r3, [pc, #4]	; (b7ab8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7ab2:	4a02      	ldr	r2, [pc, #8]	; (b7abc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7ab4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7ab6:	4770      	bx	lr
   b7ab8:	2003e6a0 	.word	0x2003e6a0
   b7abc:	000b9cde 	.word	0x000b9cde

000b7ac0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b7ac0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7ac2:	2000      	movs	r0, #0
   b7ac4:	f7ff fc8c 	bl	b73e0 <spark_sync_time_pending>
   b7ac8:	b128      	cbz	r0, b7ad6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b7aca:	f7ff fc81 	bl	b73d0 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7ace:	f080 0001 	eor.w	r0, r0, #1
   b7ad2:	b2c0      	uxtb	r0, r0
    }
   b7ad4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7ad6:	2001      	movs	r0, #1
   b7ad8:	e7fc      	b.n	b7ad4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b7ada <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b7ada:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b7adc:	2000      	movs	r0, #0
   b7ade:	f7ff fa61 	bl	b6fa4 <hal_rtc_time_is_valid>
    if (rtcstate)
   b7ae2:	4604      	mov	r4, r0
   b7ae4:	b9a0      	cbnz	r0, b7b10 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b7ae6:	f7ff fbc5 	bl	b7274 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b7aea:	2801      	cmp	r0, #1
   b7aec:	d110      	bne.n	b7b10 <_ZN9TimeClass7isValidEv+0x36>
   b7aee:	4620      	mov	r0, r4
   b7af0:	f7ff fbe0 	bl	b72b4 <system_thread_get_state>
   b7af4:	b960      	cbnz	r0, b7b10 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b7af6:	f7ff ffe3 	bl	b7ac0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b7afa:	b910      	cbnz	r0, b7b02 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b7afc:	f7ff fc60 	bl	b73c0 <spark_process>
        while (_while() && !_condition()) {
   b7b00:	e7f9      	b.n	b7af6 <_ZN9TimeClass7isValidEv+0x1c>
   b7b02:	f7ff ffdd 	bl	b7ac0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b7b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b7b0a:	2000      	movs	r0, #0
   b7b0c:	f7ff ba4a 	b.w	b6fa4 <hal_rtc_time_is_valid>
}
   b7b10:	4620      	mov	r0, r4
   b7b12:	bd10      	pop	{r4, pc}

000b7b14 <_ZN9TimeClass3nowEv>:
{
   b7b14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b7b16:	f7ff ffe0 	bl	b7ada <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b7b1a:	2210      	movs	r2, #16
   b7b1c:	2100      	movs	r1, #0
   b7b1e:	4668      	mov	r0, sp
   b7b20:	f001 f9f2 	bl	b8f08 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b7b24:	2100      	movs	r1, #0
   b7b26:	4668      	mov	r0, sp
   b7b28:	f7ff fa44 	bl	b6fb4 <hal_rtc_get_time>
}
   b7b2c:	9800      	ldr	r0, [sp, #0]
   b7b2e:	b005      	add	sp, #20
   b7b30:	f85d fb04 	ldr.w	pc, [sp], #4

000b7b34 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7b34:	4b02      	ldr	r3, [pc, #8]	; (b7b40 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7b36:	681a      	ldr	r2, [r3, #0]
   b7b38:	4b02      	ldr	r3, [pc, #8]	; (b7b44 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7b3a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7b3c:	4770      	bx	lr
   b7b3e:	bf00      	nop
   b7b40:	2003e0c4 	.word	0x2003e0c4
   b7b44:	2003e6a4 	.word	0x2003e6a4

000b7b48 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b7b48:	2100      	movs	r1, #0
   b7b4a:	f7ff bba3 	b.w	b7294 <system_delay_ms>
	...

000b7b50 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b7b50:	4b01      	ldr	r3, [pc, #4]	; (b7b58 <_GLOBAL__sub_I_RGB+0x8>)
   b7b52:	2200      	movs	r2, #0
   b7b54:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7b56:	4770      	bx	lr
   b7b58:	2003e6a8 	.word	0x2003e6a8

000b7b5c <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b7b5c:	6800      	ldr	r0, [r0, #0]
   b7b5e:	f000 baa3 	b.w	b80a8 <_ZN7TwoWire4lockEv>

000b7b62 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b7b62:	b510      	push	{r4, lr}
   b7b64:	4604      	mov	r4, r0
      lock_(_lock) {
   b7b66:	6001      	str	r1, [r0, #0]
   b7b68:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b7b6a:	b10a      	cbz	r2, b7b70 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b7b6c:	f7ff fff6 	bl	b7b5c <_ZN9FuelGauge4lockEv>
}
   b7b70:	4620      	mov	r0, r4
   b7b72:	bd10      	pop	{r4, pc}

000b7b74 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b7b74:	b513      	push	{r0, r1, r4, lr}
   b7b76:	4604      	mov	r4, r0
   b7b78:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b7b7a:	f000 fc75 	bl	b8468 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b7b7e:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b7b80:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b7b82:	4620      	mov	r0, r4
   b7b84:	f7ff ffed 	bl	b7b62 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b7b88:	4620      	mov	r0, r4
   b7b8a:	b002      	add	sp, #8
   b7b8c:	bd10      	pop	{r4, pc}
	...

000b7b90 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7b90:	4b01      	ldr	r3, [pc, #4]	; (b7b98 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7b92:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7b94:	4770      	bx	lr
   b7b96:	bf00      	nop
   b7b98:	2003e0c8 	.word	0x2003e0c8

000b7b9c <serialEventRun>:
{
   b7b9c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7b9e:	4b0b      	ldr	r3, [pc, #44]	; (b7bcc <serialEventRun+0x30>)
   b7ba0:	b143      	cbz	r3, b7bb4 <serialEventRun+0x18>
   b7ba2:	f000 f967 	bl	b7e74 <_Z16_fetch_usbserialv>
   b7ba6:	6803      	ldr	r3, [r0, #0]
   b7ba8:	691b      	ldr	r3, [r3, #16]
   b7baa:	4798      	blx	r3
   b7bac:	2800      	cmp	r0, #0
   b7bae:	dd01      	ble.n	b7bb4 <serialEventRun+0x18>
        serialEvent();
   b7bb0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7bb4:	4b06      	ldr	r3, [pc, #24]	; (b7bd0 <serialEventRun+0x34>)
   b7bb6:	b143      	cbz	r3, b7bca <serialEventRun+0x2e>
   b7bb8:	f000 fbe0 	bl	b837c <_Z22__fetch_global_Serial1v>
   b7bbc:	6803      	ldr	r3, [r0, #0]
   b7bbe:	691b      	ldr	r3, [r3, #16]
   b7bc0:	4798      	blx	r3
   b7bc2:	2800      	cmp	r0, #0
   b7bc4:	dd01      	ble.n	b7bca <serialEventRun+0x2e>
        serialEvent1();
   b7bc6:	f3af 8000 	nop.w
}
   b7bca:	bd08      	pop	{r3, pc}
	...

000b7bd4 <_post_loop>:
{
   b7bd4:	b508      	push	{r3, lr}
	serialEventRun();
   b7bd6:	f7ff ffe1 	bl	b7b9c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7bda:	f7ff f9db 	bl	b6f94 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7bde:	4b01      	ldr	r3, [pc, #4]	; (b7be4 <_post_loop+0x10>)
   b7be0:	6018      	str	r0, [r3, #0]
}
   b7be2:	bd08      	pop	{r3, pc}
   b7be4:	2003e728 	.word	0x2003e728

000b7be8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7be8:	4805      	ldr	r0, [pc, #20]	; (b7c00 <_Z33system_initialize_user_backup_ramv+0x18>)
   b7bea:	4a06      	ldr	r2, [pc, #24]	; (b7c04 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7bec:	4906      	ldr	r1, [pc, #24]	; (b7c08 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7bee:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7bf0:	1a12      	subs	r2, r2, r0
   b7bf2:	f001 f97b 	bl	b8eec <memcpy>
    __backup_sram_signature = signature;
   b7bf6:	4b05      	ldr	r3, [pc, #20]	; (b7c0c <_Z33system_initialize_user_backup_ramv+0x24>)
   b7bf8:	4a05      	ldr	r2, [pc, #20]	; (b7c10 <_Z33system_initialize_user_backup_ramv+0x28>)
   b7bfa:	601a      	str	r2, [r3, #0]
}
   b7bfc:	bd08      	pop	{r3, pc}
   b7bfe:	bf00      	nop
   b7c00:	2003f400 	.word	0x2003f400
   b7c04:	2003f404 	.word	0x2003f404
   b7c08:	000b9ef4 	.word	0x000b9ef4
   b7c0c:	2003f400 	.word	0x2003f400
   b7c10:	9a271c1e 	.word	0x9a271c1e

000b7c14 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7c14:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7c16:	2300      	movs	r3, #0
   b7c18:	9300      	str	r3, [sp, #0]
   b7c1a:	461a      	mov	r2, r3
   b7c1c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7c20:	f7ff fb5a 	bl	b72d8 <system_ctrl_set_result>
}
   b7c24:	b003      	add	sp, #12
   b7c26:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7c2c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7c2c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7c2e:	8843      	ldrh	r3, [r0, #2]
   b7c30:	2b0a      	cmp	r3, #10
   b7c32:	d008      	beq.n	b7c46 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7c34:	2b50      	cmp	r3, #80	; 0x50
   b7c36:	d10b      	bne.n	b7c50 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7c38:	4b09      	ldr	r3, [pc, #36]	; (b7c60 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7c3a:	681b      	ldr	r3, [r3, #0]
   b7c3c:	b14b      	cbz	r3, b7c52 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7c3e:	b003      	add	sp, #12
   b7c40:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7c44:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7c46:	f7ff ffe5 	bl	b7c14 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7c4a:	b003      	add	sp, #12
   b7c4c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7c50:	2300      	movs	r3, #0
   b7c52:	9300      	str	r3, [sp, #0]
   b7c54:	461a      	mov	r2, r3
   b7c56:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7c5a:	f7ff fb3d 	bl	b72d8 <system_ctrl_set_result>
}
   b7c5e:	e7f4      	b.n	b7c4a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7c60:	2003e6bc 	.word	0x2003e6bc

000b7c64 <module_user_init_hook>:
{
   b7c64:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7c66:	4812      	ldr	r0, [pc, #72]	; (b7cb0 <module_user_init_hook+0x4c>)
   b7c68:	2100      	movs	r1, #0
   b7c6a:	f7ff fbe9 	bl	b7440 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7c6e:	4b11      	ldr	r3, [pc, #68]	; (b7cb4 <module_user_init_hook+0x50>)
   b7c70:	681a      	ldr	r2, [r3, #0]
   b7c72:	4b11      	ldr	r3, [pc, #68]	; (b7cb8 <module_user_init_hook+0x54>)
   b7c74:	429a      	cmp	r2, r3
   b7c76:	4b11      	ldr	r3, [pc, #68]	; (b7cbc <module_user_init_hook+0x58>)
   b7c78:	bf0c      	ite	eq
   b7c7a:	2201      	moveq	r2, #1
   b7c7c:	2200      	movne	r2, #0
   b7c7e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7c80:	d001      	beq.n	b7c86 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7c82:	f7ff ffb1 	bl	b7be8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7c86:	f7ff f96d 	bl	b6f64 <HAL_RNG_GetRandomNumber>
   b7c8a:	4604      	mov	r4, r0
    srand(seed);
   b7c8c:	f001 f944 	bl	b8f18 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7c90:	4b0b      	ldr	r3, [pc, #44]	; (b7cc0 <module_user_init_hook+0x5c>)
   b7c92:	b113      	cbz	r3, b7c9a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7c94:	4620      	mov	r0, r4
   b7c96:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7c9a:	2100      	movs	r1, #0
   b7c9c:	4808      	ldr	r0, [pc, #32]	; (b7cc0 <module_user_init_hook+0x5c>)
   b7c9e:	f7ff fba7 	bl	b73f0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7ca6:	4807      	ldr	r0, [pc, #28]	; (b7cc4 <module_user_init_hook+0x60>)
   b7ca8:	2100      	movs	r1, #0
   b7caa:	f7ff bb0b 	b.w	b72c4 <system_ctrl_set_app_request_handler>
   b7cae:	bf00      	nop
   b7cb0:	000b7b91 	.word	0x000b7b91
   b7cb4:	2003f400 	.word	0x2003f400
   b7cb8:	9a271c1e 	.word	0x9a271c1e
   b7cbc:	2003e6b8 	.word	0x2003e6b8
   b7cc0:	00000000 	.word	0x00000000
   b7cc4:	000b7c2d 	.word	0x000b7c2d

000b7cc8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7cc8:	4770      	bx	lr

000b7cca <_ZN9IPAddressD0Ev>:
   b7cca:	b510      	push	{r4, lr}
   b7ccc:	2118      	movs	r1, #24
   b7cce:	4604      	mov	r4, r0
   b7cd0:	f7fc f9e5 	bl	b409e <_ZdlPvj>
   b7cd4:	4620      	mov	r0, r4
   b7cd6:	bd10      	pop	{r4, pc}

000b7cd8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7cda:	7d03      	ldrb	r3, [r0, #20]
   b7cdc:	2b06      	cmp	r3, #6
{
   b7cde:	b08d      	sub	sp, #52	; 0x34
   b7ce0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7ce2:	f100 0704 	add.w	r7, r0, #4
   b7ce6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7cea:	d012      	beq.n	b7d12 <_ZNK9IPAddress7printToER5Print+0x3a>
   b7cec:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   b7cf0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7cf4:	220a      	movs	r2, #10
   b7cf6:	4630      	mov	r0, r6
   b7cf8:	f7ff fd99 	bl	b782e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7cfc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7cfe:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7d00:	d019      	beq.n	b7d36 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7d02:	2c00      	cmp	r4, #0
   b7d04:	d0f4      	beq.n	b7cf0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b7d06:	212e      	movs	r1, #46	; 0x2e
   b7d08:	4630      	mov	r0, r6
   b7d0a:	f7ff fd77 	bl	b77fc <_ZN5Print5printEc>
   b7d0e:	4404      	add	r4, r0
   b7d10:	e7ee      	b.n	b7cf0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7d12:	232f      	movs	r3, #47	; 0x2f
   b7d14:	466a      	mov	r2, sp
   b7d16:	4639      	mov	r1, r7
   b7d18:	200a      	movs	r0, #10
		buf[0] = 0;
   b7d1a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7d1e:	f7ff f969 	bl	b6ff4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7d22:	4668      	mov	r0, sp
   b7d24:	f001 f926 	bl	b8f74 <strlen>
   b7d28:	6833      	ldr	r3, [r6, #0]
   b7d2a:	4602      	mov	r2, r0
   b7d2c:	68db      	ldr	r3, [r3, #12]
   b7d2e:	4669      	mov	r1, sp
   b7d30:	4630      	mov	r0, r6
   b7d32:	4798      	blx	r3
   b7d34:	4604      	mov	r4, r0
    }
    return n;
}
   b7d36:	4620      	mov	r0, r4
   b7d38:	b00d      	add	sp, #52	; 0x34
   b7d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7d3c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7d3c:	b510      	push	{r4, lr}
   b7d3e:	4b05      	ldr	r3, [pc, #20]	; (b7d54 <_ZN9IPAddressC1Ev+0x18>)
   b7d40:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b7d42:	2211      	movs	r2, #17
   b7d44:	f840 3b04 	str.w	r3, [r0], #4
   b7d48:	2100      	movs	r1, #0
   b7d4a:	f001 f8dd 	bl	b8f08 <memset>
}
   b7d4e:	4620      	mov	r0, r4
   b7d50:	bd10      	pop	{r4, pc}
   b7d52:	bf00      	nop
   b7d54:	000b9d08 	.word	0x000b9d08

000b7d58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7d58:	4603      	mov	r3, r0
   b7d5a:	4a07      	ldr	r2, [pc, #28]	; (b7d78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7d5c:	b510      	push	{r4, lr}
   b7d5e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b7d62:	f101 0210 	add.w	r2, r1, #16
   b7d66:	f851 4b04 	ldr.w	r4, [r1], #4
   b7d6a:	f843 4b04 	str.w	r4, [r3], #4
   b7d6e:	4291      	cmp	r1, r2
   b7d70:	d1f9      	bne.n	b7d66 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b7d72:	780a      	ldrb	r2, [r1, #0]
   b7d74:	701a      	strb	r2, [r3, #0]
}
   b7d76:	bd10      	pop	{r4, pc}
   b7d78:	000b9d08 	.word	0x000b9d08

000b7d7c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7d7c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7d7e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7d82:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7d86:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7d8a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7d8e:	2304      	movs	r3, #4
   b7d90:	6041      	str	r1, [r0, #4]
   b7d92:	7503      	strb	r3, [r0, #20]
}
   b7d94:	bd10      	pop	{r4, pc}
	...

000b7d98 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7d98:	b507      	push	{r0, r1, r2, lr}
   b7d9a:	4b06      	ldr	r3, [pc, #24]	; (b7db4 <_ZN9IPAddressC1EPKh+0x1c>)
   b7d9c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7d9e:	78cb      	ldrb	r3, [r1, #3]
   b7da0:	9300      	str	r3, [sp, #0]
   b7da2:	788b      	ldrb	r3, [r1, #2]
   b7da4:	784a      	ldrb	r2, [r1, #1]
   b7da6:	7809      	ldrb	r1, [r1, #0]
   b7da8:	f7ff ffe8 	bl	b7d7c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7dac:	b003      	add	sp, #12
   b7dae:	f85d fb04 	ldr.w	pc, [sp], #4
   b7db2:	bf00      	nop
   b7db4:	000b9d08 	.word	0x000b9d08

000b7db8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7db8:	7441      	strb	r1, [r0, #17]
}
   b7dba:	4770      	bx	lr

000b7dbc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7dbc:	4770      	bx	lr

000b7dbe <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7dbe:	4770      	bx	lr

000b7dc0 <_ZN9USBSerial4readEv>:
{
   b7dc0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7dc2:	2100      	movs	r1, #0
   b7dc4:	7c00      	ldrb	r0, [r0, #16]
   b7dc6:	f7ff fa2d 	bl	b7224 <HAL_USB_USART_Receive_Data>
}
   b7dca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7dce:	bd08      	pop	{r3, pc}

000b7dd0 <_ZN9USBSerial4peekEv>:
{
   b7dd0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7dd2:	2101      	movs	r1, #1
   b7dd4:	7c00      	ldrb	r0, [r0, #16]
   b7dd6:	f7ff fa25 	bl	b7224 <HAL_USB_USART_Receive_Data>
}
   b7dda:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7dde:	bd08      	pop	{r3, pc}

000b7de0 <_ZN9USBSerial17availableForWriteEv>:
{
   b7de0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7de2:	7c00      	ldrb	r0, [r0, #16]
   b7de4:	f7ff fa16 	bl	b7214 <HAL_USB_USART_Available_Data_For_Write>
}
   b7de8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7dec:	bd08      	pop	{r3, pc}

000b7dee <_ZN9USBSerial9availableEv>:
{
   b7dee:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7df0:	7c00      	ldrb	r0, [r0, #16]
   b7df2:	f7ff fa07 	bl	b7204 <HAL_USB_USART_Available_Data>
}
   b7df6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7dfa:	bd08      	pop	{r3, pc}

000b7dfc <_ZN9USBSerial5writeEh>:
{
   b7dfc:	b513      	push	{r0, r1, r4, lr}
   b7dfe:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7e00:	7c00      	ldrb	r0, [r0, #16]
{
   b7e02:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7e04:	f7ff fa06 	bl	b7214 <HAL_USB_USART_Available_Data_For_Write>
   b7e08:	2800      	cmp	r0, #0
   b7e0a:	9901      	ldr	r1, [sp, #4]
   b7e0c:	dc01      	bgt.n	b7e12 <_ZN9USBSerial5writeEh+0x16>
   b7e0e:	7c60      	ldrb	r0, [r4, #17]
   b7e10:	b120      	cbz	r0, b7e1c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7e12:	7c20      	ldrb	r0, [r4, #16]
   b7e14:	f7ff fa0e 	bl	b7234 <HAL_USB_USART_Send_Data>
   b7e18:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7e1c:	b002      	add	sp, #8
   b7e1e:	bd10      	pop	{r4, pc}

000b7e20 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7e20:	7c00      	ldrb	r0, [r0, #16]
   b7e22:	f7ff ba0f 	b.w	b7244 <HAL_USB_USART_Flush_Data>

000b7e26 <_ZN9USBSerialD0Ev>:
   b7e26:	b510      	push	{r4, lr}
   b7e28:	2114      	movs	r1, #20
   b7e2a:	4604      	mov	r4, r0
   b7e2c:	f7fc f937 	bl	b409e <_ZdlPvj>
   b7e30:	4620      	mov	r0, r4
   b7e32:	bd10      	pop	{r4, pc}

000b7e34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7e34:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7e3a:	4604      	mov	r4, r0
   b7e3c:	4608      	mov	r0, r1
   b7e3e:	2100      	movs	r1, #0
   b7e40:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7e44:	4b04      	ldr	r3, [pc, #16]	; (b7e58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7e46:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7e48:	2301      	movs	r3, #1
  _serial = serial;
   b7e4a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7e4c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7e4e:	4611      	mov	r1, r2
   b7e50:	f7ff f9c8 	bl	b71e4 <HAL_USB_USART_Init>
}
   b7e54:	4620      	mov	r0, r4
   b7e56:	bd10      	pop	{r4, pc}
   b7e58:	000b9d1c 	.word	0x000b9d1c

000b7e5c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7e5c:	7c00      	ldrb	r0, [r0, #16]
   b7e5e:	2200      	movs	r2, #0
   b7e60:	f7ff b9c8 	b.w	b71f4 <HAL_USB_USART_Begin>

000b7e64 <_Z19acquireSerialBufferv>:
{
   b7e64:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7e66:	2214      	movs	r2, #20
{
   b7e68:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7e6a:	2100      	movs	r1, #0
   b7e6c:	f001 f84c 	bl	b8f08 <memset>
}
   b7e70:	4620      	mov	r0, r4
   b7e72:	bd10      	pop	{r4, pc}

000b7e74 <_Z16_fetch_usbserialv>:
{
   b7e74:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7e76:	4c0f      	ldr	r4, [pc, #60]	; (b7eb4 <_Z16_fetch_usbserialv+0x40>)
{
   b7e78:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7e7a:	a803      	add	r0, sp, #12
   b7e7c:	f7ff fff2 	bl	b7e64 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7e80:	7821      	ldrb	r1, [r4, #0]
   b7e82:	f3bf 8f5b 	dmb	ish
   b7e86:	f011 0101 	ands.w	r1, r1, #1
   b7e8a:	d10f      	bne.n	b7eac <_Z16_fetch_usbserialv+0x38>
   b7e8c:	4620      	mov	r0, r4
   b7e8e:	9101      	str	r1, [sp, #4]
   b7e90:	f7fc f914 	bl	b40bc <__cxa_guard_acquire>
   b7e94:	9901      	ldr	r1, [sp, #4]
   b7e96:	b148      	cbz	r0, b7eac <_Z16_fetch_usbserialv+0x38>
   b7e98:	aa03      	add	r2, sp, #12
   b7e9a:	4807      	ldr	r0, [pc, #28]	; (b7eb8 <_Z16_fetch_usbserialv+0x44>)
   b7e9c:	f7ff ffca 	bl	b7e34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7ea0:	4620      	mov	r0, r4
   b7ea2:	f7fc f910 	bl	b40c6 <__cxa_guard_release>
   b7ea6:	4805      	ldr	r0, [pc, #20]	; (b7ebc <_Z16_fetch_usbserialv+0x48>)
   b7ea8:	f001 f80a 	bl	b8ec0 <atexit>
	return _usbserial;
}
   b7eac:	4802      	ldr	r0, [pc, #8]	; (b7eb8 <_Z16_fetch_usbserialv+0x44>)
   b7eae:	b008      	add	sp, #32
   b7eb0:	bd10      	pop	{r4, pc}
   b7eb2:	bf00      	nop
   b7eb4:	2003e6c0 	.word	0x2003e6c0
   b7eb8:	2003e6c4 	.word	0x2003e6c4
   b7ebc:	000b7dbd 	.word	0x000b7dbd

000b7ec0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b7ec0:	2200      	movs	r2, #0
   b7ec2:	6840      	ldr	r0, [r0, #4]
   b7ec4:	4611      	mov	r1, r2
   b7ec6:	f7ff ba33 	b.w	b7330 <network_ready>

000b7eca <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b7eca:	2200      	movs	r2, #0
   b7ecc:	6840      	ldr	r0, [r0, #4]
   b7ece:	4611      	mov	r1, r2
   b7ed0:	f7ff ba4e 	b.w	b7370 <network_listening>

000b7ed4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7ed4:	2200      	movs	r2, #0
   b7ed6:	6840      	ldr	r0, [r0, #4]
   b7ed8:	4611      	mov	r1, r2
   b7eda:	f7ff ba59 	b.w	b7390 <network_get_listen_timeout>

000b7ede <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7ede:	6840      	ldr	r0, [r0, #4]
   b7ee0:	2200      	movs	r2, #0
   b7ee2:	f7ff ba4d 	b.w	b7380 <network_set_listen_timeout>

000b7ee6 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7ee6:	6840      	ldr	r0, [r0, #4]
   b7ee8:	2200      	movs	r2, #0
   b7eea:	f081 0101 	eor.w	r1, r1, #1
   b7eee:	f7ff ba37 	b.w	b7360 <network_listen>

000b7ef2 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7ef2:	2300      	movs	r3, #0
   b7ef4:	6840      	ldr	r0, [r0, #4]
   b7ef6:	461a      	mov	r2, r3
   b7ef8:	4619      	mov	r1, r3
   b7efa:	f7ff ba29 	b.w	b7350 <network_off>

000b7efe <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7efe:	2300      	movs	r3, #0
   b7f00:	6840      	ldr	r0, [r0, #4]
   b7f02:	461a      	mov	r2, r3
   b7f04:	4619      	mov	r1, r3
   b7f06:	f7ff ba1b 	b.w	b7340 <network_on>

000b7f0a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7f0a:	2200      	movs	r2, #0
   b7f0c:	6840      	ldr	r0, [r0, #4]
   b7f0e:	4611      	mov	r1, r2
   b7f10:	f7ff b9fe 	b.w	b7310 <network_connecting>

000b7f14 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7f14:	6840      	ldr	r0, [r0, #4]
   b7f16:	2200      	movs	r2, #0
   b7f18:	2102      	movs	r1, #2
   b7f1a:	f7ff ba01 	b.w	b7320 <network_disconnect>

000b7f1e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7f1e:	2300      	movs	r3, #0
   b7f20:	6840      	ldr	r0, [r0, #4]
   b7f22:	461a      	mov	r2, r3
   b7f24:	f7ff b9ec 	b.w	b7300 <network_connect>

000b7f28 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b7f28:	4b08      	ldr	r3, [pc, #32]	; (b7f4c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b7f2a:	b510      	push	{r4, lr}
   b7f2c:	2428      	movs	r4, #40	; 0x28
   b7f2e:	4622      	mov	r2, r4
   b7f30:	4618      	mov	r0, r3
   b7f32:	2100      	movs	r1, #0
   b7f34:	f000 ffe8 	bl	b8f08 <memset>
   b7f38:	4b05      	ldr	r3, [pc, #20]	; (b7f50 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b7f3a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b7f3c:	f04f 32ff 	mov.w	r2, #4294967295
   b7f40:	6042      	str	r2, [r0, #4]
   b7f42:	2204      	movs	r2, #4
   b7f44:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b7f46:	4a03      	ldr	r2, [pc, #12]	; (b7f54 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b7f48:	601a      	str	r2, [r3, #0]
   b7f4a:	bd10      	pop	{r4, pc}
   b7f4c:	2003e6e0 	.word	0x2003e6e0
   b7f50:	2003e6d8 	.word	0x2003e6d8
   b7f54:	000b9d4c 	.word	0x000b9d4c

000b7f58 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7f58:	4770      	bx	lr

000b7f5a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7f5a:	7441      	strb	r1, [r0, #17]
}
   b7f5c:	4770      	bx	lr

000b7f5e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7f5e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7f60:	7c00      	ldrb	r0, [r0, #16]
   b7f62:	f7ff f87f 	bl	b7064 <hal_usart_available_data_for_write>
}
   b7f66:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7f6a:	bd08      	pop	{r3, pc}

000b7f6c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7f6c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7f6e:	7c00      	ldrb	r0, [r0, #16]
   b7f70:	f7ff f850 	bl	b7014 <hal_usart_available>
}
   b7f74:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7f78:	bd08      	pop	{r3, pc}

000b7f7a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7f7a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7f7c:	7c00      	ldrb	r0, [r0, #16]
   b7f7e:	f7ff f859 	bl	b7034 <hal_usart_peek>
}
   b7f82:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7f86:	bd08      	pop	{r3, pc}

000b7f88 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7f88:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7f8a:	7c00      	ldrb	r0, [r0, #16]
   b7f8c:	f7ff f84a 	bl	b7024 <hal_usart_read>
}
   b7f90:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7f94:	bd08      	pop	{r3, pc}

000b7f96 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7f96:	7c00      	ldrb	r0, [r0, #16]
   b7f98:	f7ff b854 	b.w	b7044 <hal_usart_flush>

000b7f9c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7f9e:	7c45      	ldrb	r5, [r0, #17]
{
   b7fa0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7fa2:	b12d      	cbz	r5, b7fb0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7fa4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7fa6:	b003      	add	sp, #12
   b7fa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7fac:	f7ff b82a 	b.w	b7004 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7fb0:	7c00      	ldrb	r0, [r0, #16]
   b7fb2:	9101      	str	r1, [sp, #4]
   b7fb4:	f7ff f856 	bl	b7064 <hal_usart_available_data_for_write>
   b7fb8:	2800      	cmp	r0, #0
   b7fba:	9901      	ldr	r1, [sp, #4]
   b7fbc:	dcf2      	bgt.n	b7fa4 <_ZN11USARTSerial5writeEh+0x8>
}
   b7fbe:	4628      	mov	r0, r5
   b7fc0:	b003      	add	sp, #12
   b7fc2:	bd30      	pop	{r4, r5, pc}

000b7fc4 <_ZN11USARTSerialD0Ev>:
   b7fc4:	b510      	push	{r4, lr}
   b7fc6:	2114      	movs	r1, #20
   b7fc8:	4604      	mov	r4, r0
   b7fca:	f7fc f868 	bl	b409e <_ZdlPvj>
   b7fce:	4620      	mov	r0, r4
   b7fd0:	bd10      	pop	{r4, pc}
	...

000b7fd4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7fd4:	b510      	push	{r4, lr}
   b7fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7fda:	4604      	mov	r4, r0
   b7fdc:	4608      	mov	r0, r1
   b7fde:	4611      	mov	r1, r2
   b7fe0:	2200      	movs	r2, #0
   b7fe2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7fe6:	4b04      	ldr	r3, [pc, #16]	; (b7ff8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7fe8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7fea:	2301      	movs	r3, #1
  _serial = serial;
   b7fec:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7fee:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7ff0:	f7ff f840 	bl	b7074 <hal_usart_init_ex>
}
   b7ff4:	4620      	mov	r0, r4
   b7ff6:	bd10      	pop	{r4, pc}
   b7ff8:	000b9d88 	.word	0x000b9d88

000b7ffc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7ffc:	4770      	bx	lr

000b7ffe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8000:	4606      	mov	r6, r0
   b8002:	4615      	mov	r5, r2
   b8004:	460c      	mov	r4, r1
   b8006:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b8008:	42bc      	cmp	r4, r7
   b800a:	d006      	beq.n	b801a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b800c:	6833      	ldr	r3, [r6, #0]
   b800e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b8012:	689b      	ldr	r3, [r3, #8]
   b8014:	4630      	mov	r0, r6
   b8016:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b8018:	e7f6      	b.n	b8008 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b801a:	4628      	mov	r0, r5
   b801c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b801e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b801e:	7c00      	ldrb	r0, [r0, #16]
   b8020:	2200      	movs	r2, #0
   b8022:	f7ff b84f 	b.w	b70c4 <hal_i2c_write>

000b8026 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b8026:	7c00      	ldrb	r0, [r0, #16]
   b8028:	2100      	movs	r1, #0
   b802a:	f7ff b853 	b.w	b70d4 <hal_i2c_available>

000b802e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b802e:	7c00      	ldrb	r0, [r0, #16]
   b8030:	2100      	movs	r1, #0
   b8032:	f7ff b857 	b.w	b70e4 <hal_i2c_read>

000b8036 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8036:	7c00      	ldrb	r0, [r0, #16]
   b8038:	2100      	movs	r1, #0
   b803a:	f7ff b85b 	b.w	b70f4 <hal_i2c_peek>

000b803e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b803e:	7c00      	ldrb	r0, [r0, #16]
   b8040:	2100      	movs	r1, #0
   b8042:	f7ff b85f 	b.w	b7104 <hal_i2c_flush>

000b8046 <_ZN7TwoWireD0Ev>:
   b8046:	b510      	push	{r4, lr}
   b8048:	2114      	movs	r1, #20
   b804a:	4604      	mov	r4, r0
   b804c:	f7fc f827 	bl	b409e <_ZdlPvj>
   b8050:	4620      	mov	r0, r4
   b8052:	bd10      	pop	{r4, pc}

000b8054 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8054:	b510      	push	{r4, lr}
   b8056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b805a:	4604      	mov	r4, r0
   b805c:	4608      	mov	r0, r1
   b805e:	2100      	movs	r1, #0
   b8060:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8064:	4b03      	ldr	r3, [pc, #12]	; (b8074 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b8066:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b8068:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b806a:	4611      	mov	r1, r2
   b806c:	f7ff f85a 	bl	b7124 <hal_i2c_init>
}
   b8070:	4620      	mov	r0, r4
   b8072:	bd10      	pop	{r4, pc}
   b8074:	000b9db8 	.word	0x000b9db8

000b8078 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b8078:	7c00      	ldrb	r0, [r0, #16]
   b807a:	2200      	movs	r2, #0
   b807c:	f7ff b802 	b.w	b7084 <hal_i2c_set_speed>

000b8080 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b8080:	2300      	movs	r3, #0
   b8082:	7c00      	ldrb	r0, [r0, #16]
   b8084:	461a      	mov	r2, r3
   b8086:	4619      	mov	r1, r3
   b8088:	f7ff b804 	b.w	b7094 <hal_i2c_begin>

000b808c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b808c:	7c00      	ldrb	r0, [r0, #16]
   b808e:	2200      	movs	r2, #0
   b8090:	f7ff b808 	b.w	b70a4 <hal_i2c_begin_transmission>

000b8094 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b8094:	b2c9      	uxtb	r1, r1
   b8096:	f7ff bff9 	b.w	b808c <_ZN7TwoWire17beginTransmissionEh>

000b809a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b809a:	7c00      	ldrb	r0, [r0, #16]
   b809c:	2200      	movs	r2, #0
   b809e:	f7ff b809 	b.w	b70b4 <hal_i2c_end_transmission>

000b80a2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b80a2:	2101      	movs	r1, #1
   b80a4:	f7ff bff9 	b.w	b809a <_ZN7TwoWire15endTransmissionEh>

000b80a8 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b80a8:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b80aa:	2100      	movs	r1, #0
   b80ac:	7c00      	ldrb	r0, [r0, #16]
   b80ae:	f7ff f841 	bl	b7134 <hal_i2c_lock>
}
   b80b2:	fab0 f080 	clz	r0, r0
   b80b6:	0940      	lsrs	r0, r0, #5
   b80b8:	bd08      	pop	{r3, pc}

000b80ba <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b80ba:	2300      	movs	r3, #0
   b80bc:	6840      	ldr	r0, [r0, #4]
   b80be:	461a      	mov	r2, r3
   b80c0:	f7ff b91e 	b.w	b7300 <network_connect>

000b80c4 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b80c4:	6840      	ldr	r0, [r0, #4]
   b80c6:	2200      	movs	r2, #0
   b80c8:	2102      	movs	r1, #2
   b80ca:	f7ff b929 	b.w	b7320 <network_disconnect>

000b80ce <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b80ce:	2200      	movs	r2, #0
   b80d0:	6840      	ldr	r0, [r0, #4]
   b80d2:	4611      	mov	r1, r2
   b80d4:	f7ff b91c 	b.w	b7310 <network_connecting>

000b80d8 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b80d8:	2200      	movs	r2, #0
   b80da:	6840      	ldr	r0, [r0, #4]
   b80dc:	4611      	mov	r1, r2
   b80de:	f7ff b927 	b.w	b7330 <network_ready>

000b80e2 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b80e2:	2300      	movs	r3, #0
   b80e4:	6840      	ldr	r0, [r0, #4]
   b80e6:	461a      	mov	r2, r3
   b80e8:	4619      	mov	r1, r3
   b80ea:	f7ff b929 	b.w	b7340 <network_on>

000b80ee <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b80ee:	2300      	movs	r3, #0
   b80f0:	6840      	ldr	r0, [r0, #4]
   b80f2:	461a      	mov	r2, r3
   b80f4:	4619      	mov	r1, r3
   b80f6:	f7ff b92b 	b.w	b7350 <network_off>

000b80fa <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b80fa:	6840      	ldr	r0, [r0, #4]
   b80fc:	2100      	movs	r1, #0
   b80fe:	f7ff b94f 	b.w	b73a0 <network_is_on>

000b8102 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b8102:	6840      	ldr	r0, [r0, #4]
   b8104:	2100      	movs	r1, #0
   b8106:	f7ff b953 	b.w	b73b0 <network_is_off>

000b810a <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b810a:	6840      	ldr	r0, [r0, #4]
   b810c:	2200      	movs	r2, #0
   b810e:	f081 0101 	eor.w	r1, r1, #1
   b8112:	f7ff b925 	b.w	b7360 <network_listen>

000b8116 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b8116:	6840      	ldr	r0, [r0, #4]
   b8118:	2200      	movs	r2, #0
   b811a:	f7ff b931 	b.w	b7380 <network_set_listen_timeout>

000b811e <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b811e:	2200      	movs	r2, #0
   b8120:	6840      	ldr	r0, [r0, #4]
   b8122:	4611      	mov	r1, r2
   b8124:	f7ff b934 	b.w	b7390 <network_get_listen_timeout>

000b8128 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b8128:	2200      	movs	r2, #0
   b812a:	6840      	ldr	r0, [r0, #4]
   b812c:	4611      	mov	r1, r2
   b812e:	f7ff b91f 	b.w	b7370 <network_listening>

000b8132 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b8132:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8136:	b095      	sub	sp, #84	; 0x54
   b8138:	4614      	mov	r4, r2
   b813a:	460d      	mov	r5, r1
   b813c:	4607      	mov	r7, r0
    IPAddress addr;
   b813e:	f7ff fdfd 	bl	b7d3c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b8142:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b8144:	221c      	movs	r2, #28
   b8146:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b8148:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b814a:	f000 fedd 	bl	b8f08 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b814e:	2340      	movs	r3, #64	; 0x40
   b8150:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b8152:	4620      	mov	r0, r4
   b8154:	466b      	mov	r3, sp
   b8156:	aa0c      	add	r2, sp, #48	; 0x30
   b8158:	2100      	movs	r1, #0
   b815a:	f7fe fecb 	bl	b6ef4 <netdb_getaddrinfo>
    if (!r) {
   b815e:	4604      	mov	r4, r0
   b8160:	2800      	cmp	r0, #0
   b8162:	d14b      	bne.n	b81fc <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8164:	4602      	mov	r2, r0
   b8166:	2101      	movs	r1, #1
   b8168:	6868      	ldr	r0, [r5, #4]
   b816a:	f7ff f8e1 	bl	b7330 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b816e:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8170:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8172:	4622      	mov	r2, r4
   b8174:	6868      	ldr	r0, [r5, #4]
   b8176:	f7ff f8db 	bl	b7330 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b817a:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b817c:	4681      	mov	r9, r0
        bool ok = false;
   b817e:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8180:	2e00      	cmp	r6, #0
   b8182:	d03b      	beq.n	b81fc <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b8184:	2900      	cmp	r1, #0
   b8186:	d139      	bne.n	b81fc <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b8188:	6873      	ldr	r3, [r6, #4]
   b818a:	2b02      	cmp	r3, #2
   b818c:	d003      	beq.n	b8196 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b818e:	2b0a      	cmp	r3, #10
   b8190:	d011      	beq.n	b81b6 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8192:	69f6      	ldr	r6, [r6, #28]
   b8194:	e7f4      	b.n	b8180 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b8196:	f1b8 0f00 	cmp.w	r8, #0
   b819a:	d0fa      	beq.n	b8192 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b819c:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b819e:	a806      	add	r0, sp, #24
   b81a0:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b81a2:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b81a4:	f7ff fdf8 	bl	b7d98 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b81a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b81aa:	1d3c      	adds	r4, r7, #4
   b81ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b81ae:	682b      	ldr	r3, [r5, #0]
   b81b0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b81b2:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b81b4:	e7ed      	b.n	b8192 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b81b6:	f1b9 0f00 	cmp.w	r9, #0
   b81ba:	d0ea      	beq.n	b8192 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b81bc:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b81be:	2210      	movs	r2, #16
   b81c0:	a801      	add	r0, sp, #4
   b81c2:	f000 fea1 	bl	b8f08 <memset>
                    a.v = 6;
   b81c6:	2306      	movs	r3, #6
   b81c8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b81cc:	ad01      	add	r5, sp, #4
   b81ce:	f104 0308 	add.w	r3, r4, #8
   b81d2:	3418      	adds	r4, #24
   b81d4:	6818      	ldr	r0, [r3, #0]
   b81d6:	6859      	ldr	r1, [r3, #4]
   b81d8:	462a      	mov	r2, r5
   b81da:	c203      	stmia	r2!, {r0, r1}
   b81dc:	3308      	adds	r3, #8
   b81de:	42a3      	cmp	r3, r4
   b81e0:	4615      	mov	r5, r2
   b81e2:	d1f7      	bne.n	b81d4 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b81e4:	a901      	add	r1, sp, #4
   b81e6:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b81e8:	ad07      	add	r5, sp, #28
   b81ea:	f7ff fdb5 	bl	b7d58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b81ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b81f0:	1d3c      	adds	r4, r7, #4
   b81f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b81f4:	682b      	ldr	r3, [r5, #0]
   b81f6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b81f8:	4649      	mov	r1, r9
   b81fa:	e7ca      	b.n	b8192 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b81fc:	9800      	ldr	r0, [sp, #0]
   b81fe:	f7fe fe71 	bl	b6ee4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b8202:	4638      	mov	r0, r7
   b8204:	b015      	add	sp, #84	; 0x54
   b8206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000b820c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b820c:	4b02      	ldr	r3, [pc, #8]	; (b8218 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b820e:	4a03      	ldr	r2, [pc, #12]	; (b821c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b8210:	601a      	str	r2, [r3, #0]
   b8212:	2200      	movs	r2, #0
   b8214:	605a      	str	r2, [r3, #4]

} // spark
   b8216:	4770      	bx	lr
   b8218:	2003e708 	.word	0x2003e708
   b821c:	000b9de0 	.word	0x000b9de0

000b8220 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b8220:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b8222:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8224:	d902      	bls.n	b822c <pinAvailable+0xc>
    return false;
   b8226:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8228:	b002      	add	sp, #8
   b822a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b822c:	f1a0 030b 	sub.w	r3, r0, #11
   b8230:	2b02      	cmp	r3, #2
   b8232:	d81a      	bhi.n	b826a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b8234:	4c17      	ldr	r4, [pc, #92]	; (b8294 <pinAvailable+0x74>)
   b8236:	7821      	ldrb	r1, [r4, #0]
   b8238:	f3bf 8f5b 	dmb	ish
   b823c:	f011 0101 	ands.w	r1, r1, #1
   b8240:	d10b      	bne.n	b825a <pinAvailable+0x3a>
   b8242:	4620      	mov	r0, r4
   b8244:	9101      	str	r1, [sp, #4]
   b8246:	f7fb ff39 	bl	b40bc <__cxa_guard_acquire>
   b824a:	9901      	ldr	r1, [sp, #4]
   b824c:	b128      	cbz	r0, b825a <pinAvailable+0x3a>
   b824e:	4812      	ldr	r0, [pc, #72]	; (b8298 <pinAvailable+0x78>)
   b8250:	f7ff f952 	bl	b74f8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8254:	4620      	mov	r0, r4
   b8256:	f7fb ff36 	bl	b40c6 <__cxa_guard_release>
   b825a:	4b0f      	ldr	r3, [pc, #60]	; (b8298 <pinAvailable+0x78>)
   b825c:	7818      	ldrb	r0, [r3, #0]
   b825e:	f7fe ff89 	bl	b7174 <hal_spi_is_enabled>
   b8262:	2800      	cmp	r0, #0
   b8264:	d1df      	bne.n	b8226 <pinAvailable+0x6>
  return true; // 'pin' is available
   b8266:	2001      	movs	r0, #1
   b8268:	e7de      	b.n	b8228 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b826a:	2801      	cmp	r0, #1
   b826c:	d809      	bhi.n	b8282 <pinAvailable+0x62>
   b826e:	f000 f8d7 	bl	b8420 <_Z19__fetch_global_Wirev>
   b8272:	2100      	movs	r1, #0
   b8274:	7c00      	ldrb	r0, [r0, #16]
   b8276:	f7fe ff4d 	bl	b7114 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b827a:	f080 0001 	eor.w	r0, r0, #1
   b827e:	b2c0      	uxtb	r0, r0
   b8280:	e7d2      	b.n	b8228 <pinAvailable+0x8>
   b8282:	3809      	subs	r0, #9
   b8284:	2801      	cmp	r0, #1
   b8286:	d8ee      	bhi.n	b8266 <pinAvailable+0x46>
   b8288:	f000 f878 	bl	b837c <_Z22__fetch_global_Serial1v>
   b828c:	7c00      	ldrb	r0, [r0, #16]
   b828e:	f7fe fee1 	bl	b7054 <hal_usart_is_enabled>
   b8292:	e7f2      	b.n	b827a <pinAvailable+0x5a>
   b8294:	2003e130 	.word	0x2003e130
   b8298:	2003e134 	.word	0x2003e134

000b829c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b829c:	2823      	cmp	r0, #35	; 0x23
{
   b829e:	b538      	push	{r3, r4, r5, lr}
   b82a0:	4604      	mov	r4, r0
   b82a2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b82a4:	d80a      	bhi.n	b82bc <pinMode+0x20>
   b82a6:	29ff      	cmp	r1, #255	; 0xff
   b82a8:	d008      	beq.n	b82bc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b82aa:	f7ff ffb9 	bl	b8220 <pinAvailable>
   b82ae:	b128      	cbz	r0, b82bc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b82b0:	4629      	mov	r1, r5
   b82b2:	4620      	mov	r0, r4
}
   b82b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b82b8:	f7fe be2c 	b.w	b6f14 <HAL_Pin_Mode>
}
   b82bc:	bd38      	pop	{r3, r4, r5, pc}

000b82be <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b82be:	b538      	push	{r3, r4, r5, lr}
   b82c0:	4604      	mov	r4, r0
   b82c2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b82c4:	f7fe fe2e 	bl	b6f24 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b82c8:	28ff      	cmp	r0, #255	; 0xff
   b82ca:	d010      	beq.n	b82ee <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b82cc:	2806      	cmp	r0, #6
   b82ce:	d804      	bhi.n	b82da <digitalWrite+0x1c>
   b82d0:	234d      	movs	r3, #77	; 0x4d
   b82d2:	fa23 f000 	lsr.w	r0, r3, r0
   b82d6:	07c3      	lsls	r3, r0, #31
   b82d8:	d409      	bmi.n	b82ee <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b82da:	4620      	mov	r0, r4
   b82dc:	f7ff ffa0 	bl	b8220 <pinAvailable>
   b82e0:	b128      	cbz	r0, b82ee <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b82e2:	4629      	mov	r1, r5
   b82e4:	4620      	mov	r0, r4
}
   b82e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b82ea:	f7fe be23 	b.w	b6f34 <HAL_GPIO_Write>
}
   b82ee:	bd38      	pop	{r3, r4, r5, pc}

000b82f0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b82f0:	b510      	push	{r4, lr}
   b82f2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b82f4:	f7fe fe16 	bl	b6f24 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b82f8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b82fa:	b2db      	uxtb	r3, r3
   b82fc:	2b01      	cmp	r3, #1
   b82fe:	d908      	bls.n	b8312 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b8300:	4620      	mov	r0, r4
   b8302:	f7ff ff8d 	bl	b8220 <pinAvailable>
   b8306:	b120      	cbz	r0, b8312 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b8308:	4620      	mov	r0, r4
}
   b830a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b830e:	f7fe be19 	b.w	b6f44 <HAL_GPIO_Read>
}
   b8312:	2000      	movs	r0, #0
   b8314:	bd10      	pop	{r4, pc}

000b8316 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b8316:	280d      	cmp	r0, #13
{
   b8318:	b510      	push	{r4, lr}
   b831a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b831c:	bf9c      	itt	ls
   b831e:	340e      	addls	r4, #14
   b8320:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b8322:	4620      	mov	r0, r4
   b8324:	f7ff ff7c 	bl	b8220 <pinAvailable>
   b8328:	b150      	cbz	r0, b8340 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b832a:	2103      	movs	r1, #3
   b832c:	4620      	mov	r0, r4
   b832e:	f7fe fde9 	bl	b6f04 <HAL_Validate_Pin_Function>
   b8332:	2803      	cmp	r0, #3
   b8334:	d104      	bne.n	b8340 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b8336:	4620      	mov	r0, r4
}
   b8338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b833c:	f7fe be0a 	b.w	b6f54 <hal_adc_read>
}
   b8340:	2000      	movs	r0, #0
   b8342:	bd10      	pop	{r4, pc}

000b8344 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8344:	4770      	bx	lr
	...

000b8348 <_Z20acquireSerial1Bufferv>:
{
   b8348:	b538      	push	{r3, r4, r5, lr}
   b834a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b834c:	2514      	movs	r5, #20
   b834e:	462a      	mov	r2, r5
   b8350:	2100      	movs	r1, #0
   b8352:	f000 fdd9 	bl	b8f08 <memset>
   b8356:	8025      	strh	r5, [r4, #0]
   b8358:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b835a:	4907      	ldr	r1, [pc, #28]	; (b8378 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b835c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b835e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8360:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8362:	f000 f8a7 	bl	b84b4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8366:	4904      	ldr	r1, [pc, #16]	; (b8378 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8368:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b836a:	4628      	mov	r0, r5
   b836c:	f000 f8a2 	bl	b84b4 <_ZnajRKSt9nothrow_t>
    };
   b8370:	60e0      	str	r0, [r4, #12]
}
   b8372:	4620      	mov	r0, r4
   b8374:	bd38      	pop	{r3, r4, r5, pc}
   b8376:	bf00      	nop
   b8378:	000b9e14 	.word	0x000b9e14

000b837c <_Z22__fetch_global_Serial1v>:
{
   b837c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b837e:	4d0e      	ldr	r5, [pc, #56]	; (b83b8 <_Z22__fetch_global_Serial1v+0x3c>)
   b8380:	7829      	ldrb	r1, [r5, #0]
   b8382:	f3bf 8f5b 	dmb	ish
   b8386:	f011 0401 	ands.w	r4, r1, #1
{
   b838a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b838c:	d111      	bne.n	b83b2 <_Z22__fetch_global_Serial1v+0x36>
   b838e:	4628      	mov	r0, r5
   b8390:	f7fb fe94 	bl	b40bc <__cxa_guard_acquire>
   b8394:	b168      	cbz	r0, b83b2 <_Z22__fetch_global_Serial1v+0x36>
   b8396:	a801      	add	r0, sp, #4
   b8398:	f7ff ffd6 	bl	b8348 <_Z20acquireSerial1Bufferv>
   b839c:	aa01      	add	r2, sp, #4
   b839e:	4621      	mov	r1, r4
   b83a0:	4806      	ldr	r0, [pc, #24]	; (b83bc <_Z22__fetch_global_Serial1v+0x40>)
   b83a2:	f7ff fe17 	bl	b7fd4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b83a6:	4628      	mov	r0, r5
   b83a8:	f7fb fe8d 	bl	b40c6 <__cxa_guard_release>
   b83ac:	4804      	ldr	r0, [pc, #16]	; (b83c0 <_Z22__fetch_global_Serial1v+0x44>)
   b83ae:	f000 fd87 	bl	b8ec0 <atexit>
    return serial1;
}
   b83b2:	4802      	ldr	r0, [pc, #8]	; (b83bc <_Z22__fetch_global_Serial1v+0x40>)
   b83b4:	b007      	add	sp, #28
   b83b6:	bd30      	pop	{r4, r5, pc}
   b83b8:	2003e710 	.word	0x2003e710
   b83bc:	2003e714 	.word	0x2003e714
   b83c0:	000b8345 	.word	0x000b8345

000b83c4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b83c4:	4770      	bx	lr

000b83c6 <__tcf_1>:
   b83c6:	4770      	bx	lr

000b83c8 <_Z17acquireWireBufferv>:
{
   b83c8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b83ca:	2520      	movs	r5, #32
   b83cc:	2314      	movs	r3, #20
{
   b83ce:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b83d0:	6003      	str	r3, [r0, #0]
   b83d2:	6085      	str	r5, [r0, #8]
   b83d4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b83d6:	4906      	ldr	r1, [pc, #24]	; (b83f0 <_Z17acquireWireBufferv+0x28>)
   b83d8:	4628      	mov	r0, r5
   b83da:	f000 f86b 	bl	b84b4 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b83de:	4904      	ldr	r1, [pc, #16]	; (b83f0 <_Z17acquireWireBufferv+0x28>)
	};
   b83e0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b83e2:	4628      	mov	r0, r5
   b83e4:	f000 f866 	bl	b84b4 <_ZnajRKSt9nothrow_t>
	};
   b83e8:	60e0      	str	r0, [r4, #12]
}
   b83ea:	4620      	mov	r0, r4
   b83ec:	bd38      	pop	{r3, r4, r5, pc}
   b83ee:	bf00      	nop
   b83f0:	000b9e14 	.word	0x000b9e14

000b83f4 <_Z18acquireWire1Bufferv>:
   b83f4:	b538      	push	{r3, r4, r5, lr}
   b83f6:	2520      	movs	r5, #32
   b83f8:	2314      	movs	r3, #20
   b83fa:	4604      	mov	r4, r0
   b83fc:	6003      	str	r3, [r0, #0]
   b83fe:	6085      	str	r5, [r0, #8]
   b8400:	6105      	str	r5, [r0, #16]
   b8402:	4906      	ldr	r1, [pc, #24]	; (b841c <_Z18acquireWire1Bufferv+0x28>)
   b8404:	4628      	mov	r0, r5
   b8406:	f000 f855 	bl	b84b4 <_ZnajRKSt9nothrow_t>
   b840a:	4904      	ldr	r1, [pc, #16]	; (b841c <_Z18acquireWire1Bufferv+0x28>)
   b840c:	6060      	str	r0, [r4, #4]
   b840e:	4628      	mov	r0, r5
   b8410:	f000 f850 	bl	b84b4 <_ZnajRKSt9nothrow_t>
   b8414:	60e0      	str	r0, [r4, #12]
   b8416:	4620      	mov	r0, r4
   b8418:	bd38      	pop	{r3, r4, r5, pc}
   b841a:	bf00      	nop
   b841c:	000b9e14 	.word	0x000b9e14

000b8420 <_Z19__fetch_global_Wirev>:
{
   b8420:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8422:	4d0e      	ldr	r5, [pc, #56]	; (b845c <_Z19__fetch_global_Wirev+0x3c>)
   b8424:	7829      	ldrb	r1, [r5, #0]
   b8426:	f3bf 8f5b 	dmb	ish
   b842a:	f011 0401 	ands.w	r4, r1, #1
{
   b842e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8430:	d111      	bne.n	b8456 <_Z19__fetch_global_Wirev+0x36>
   b8432:	4628      	mov	r0, r5
   b8434:	f7fb fe42 	bl	b40bc <__cxa_guard_acquire>
   b8438:	b168      	cbz	r0, b8456 <_Z19__fetch_global_Wirev+0x36>
   b843a:	a801      	add	r0, sp, #4
   b843c:	f7ff ffc4 	bl	b83c8 <_Z17acquireWireBufferv>
   b8440:	aa01      	add	r2, sp, #4
   b8442:	4621      	mov	r1, r4
   b8444:	4806      	ldr	r0, [pc, #24]	; (b8460 <_Z19__fetch_global_Wirev+0x40>)
   b8446:	f7ff fe05 	bl	b8054 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b844a:	4628      	mov	r0, r5
   b844c:	f7fb fe3b 	bl	b40c6 <__cxa_guard_release>
   b8450:	4804      	ldr	r0, [pc, #16]	; (b8464 <_Z19__fetch_global_Wirev+0x44>)
   b8452:	f000 fd35 	bl	b8ec0 <atexit>
	return wire;
}
   b8456:	4802      	ldr	r0, [pc, #8]	; (b8460 <_Z19__fetch_global_Wirev+0x40>)
   b8458:	b007      	add	sp, #28
   b845a:	bd30      	pop	{r4, r5, pc}
   b845c:	2003e72c 	.word	0x2003e72c
   b8460:	2003e734 	.word	0x2003e734
   b8464:	000b83c5 	.word	0x000b83c5

000b8468 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   b8468:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b846a:	4c0e      	ldr	r4, [pc, #56]	; (b84a4 <_Z20__fetch_global_Wire1v+0x3c>)
   b846c:	7823      	ldrb	r3, [r4, #0]
   b846e:	f3bf 8f5b 	dmb	ish
   b8472:	07db      	lsls	r3, r3, #31
{
   b8474:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b8476:	d411      	bmi.n	b849c <_Z20__fetch_global_Wire1v+0x34>
   b8478:	4620      	mov	r0, r4
   b847a:	f7fb fe1f 	bl	b40bc <__cxa_guard_acquire>
   b847e:	b168      	cbz	r0, b849c <_Z20__fetch_global_Wire1v+0x34>
   b8480:	a801      	add	r0, sp, #4
   b8482:	f7ff ffb7 	bl	b83f4 <_Z18acquireWire1Bufferv>
   b8486:	aa01      	add	r2, sp, #4
   b8488:	2101      	movs	r1, #1
   b848a:	4807      	ldr	r0, [pc, #28]	; (b84a8 <_Z20__fetch_global_Wire1v+0x40>)
   b848c:	f7ff fde2 	bl	b8054 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8490:	4620      	mov	r0, r4
   b8492:	f7fb fe18 	bl	b40c6 <__cxa_guard_release>
   b8496:	4805      	ldr	r0, [pc, #20]	; (b84ac <_Z20__fetch_global_Wire1v+0x44>)
   b8498:	f000 fd12 	bl	b8ec0 <atexit>
	return wire;
}
   b849c:	4802      	ldr	r0, [pc, #8]	; (b84a8 <_Z20__fetch_global_Wire1v+0x40>)
   b849e:	b006      	add	sp, #24
   b84a0:	bd10      	pop	{r4, pc}
   b84a2:	bf00      	nop
   b84a4:	2003e730 	.word	0x2003e730
   b84a8:	2003e748 	.word	0x2003e748
   b84ac:	000b83c7 	.word	0x000b83c7

000b84b0 <_ZnwjRKSt9nothrow_t>:
   b84b0:	f7fb bdf1 	b.w	b4096 <_Znwj>

000b84b4 <_ZnajRKSt9nothrow_t>:
   b84b4:	f7fb bdf1 	b.w	b409a <_Znaj>

000b84b8 <__aeabi_drsub>:
   b84b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b84bc:	e002      	b.n	b84c4 <__adddf3>
   b84be:	bf00      	nop

000b84c0 <__aeabi_dsub>:
   b84c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b84c4 <__adddf3>:
   b84c4:	b530      	push	{r4, r5, lr}
   b84c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b84ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b84ce:	ea94 0f05 	teq	r4, r5
   b84d2:	bf08      	it	eq
   b84d4:	ea90 0f02 	teqeq	r0, r2
   b84d8:	bf1f      	itttt	ne
   b84da:	ea54 0c00 	orrsne.w	ip, r4, r0
   b84de:	ea55 0c02 	orrsne.w	ip, r5, r2
   b84e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b84e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b84ea:	f000 80e2 	beq.w	b86b2 <__adddf3+0x1ee>
   b84ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b84f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b84f6:	bfb8      	it	lt
   b84f8:	426d      	neglt	r5, r5
   b84fa:	dd0c      	ble.n	b8516 <__adddf3+0x52>
   b84fc:	442c      	add	r4, r5
   b84fe:	ea80 0202 	eor.w	r2, r0, r2
   b8502:	ea81 0303 	eor.w	r3, r1, r3
   b8506:	ea82 0000 	eor.w	r0, r2, r0
   b850a:	ea83 0101 	eor.w	r1, r3, r1
   b850e:	ea80 0202 	eor.w	r2, r0, r2
   b8512:	ea81 0303 	eor.w	r3, r1, r3
   b8516:	2d36      	cmp	r5, #54	; 0x36
   b8518:	bf88      	it	hi
   b851a:	bd30      	pophi	{r4, r5, pc}
   b851c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b8520:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8524:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b8528:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b852c:	d002      	beq.n	b8534 <__adddf3+0x70>
   b852e:	4240      	negs	r0, r0
   b8530:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8534:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b8538:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b853c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b8540:	d002      	beq.n	b8548 <__adddf3+0x84>
   b8542:	4252      	negs	r2, r2
   b8544:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b8548:	ea94 0f05 	teq	r4, r5
   b854c:	f000 80a7 	beq.w	b869e <__adddf3+0x1da>
   b8550:	f1a4 0401 	sub.w	r4, r4, #1
   b8554:	f1d5 0e20 	rsbs	lr, r5, #32
   b8558:	db0d      	blt.n	b8576 <__adddf3+0xb2>
   b855a:	fa02 fc0e 	lsl.w	ip, r2, lr
   b855e:	fa22 f205 	lsr.w	r2, r2, r5
   b8562:	1880      	adds	r0, r0, r2
   b8564:	f141 0100 	adc.w	r1, r1, #0
   b8568:	fa03 f20e 	lsl.w	r2, r3, lr
   b856c:	1880      	adds	r0, r0, r2
   b856e:	fa43 f305 	asr.w	r3, r3, r5
   b8572:	4159      	adcs	r1, r3
   b8574:	e00e      	b.n	b8594 <__adddf3+0xd0>
   b8576:	f1a5 0520 	sub.w	r5, r5, #32
   b857a:	f10e 0e20 	add.w	lr, lr, #32
   b857e:	2a01      	cmp	r2, #1
   b8580:	fa03 fc0e 	lsl.w	ip, r3, lr
   b8584:	bf28      	it	cs
   b8586:	f04c 0c02 	orrcs.w	ip, ip, #2
   b858a:	fa43 f305 	asr.w	r3, r3, r5
   b858e:	18c0      	adds	r0, r0, r3
   b8590:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b8594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8598:	d507      	bpl.n	b85aa <__adddf3+0xe6>
   b859a:	f04f 0e00 	mov.w	lr, #0
   b859e:	f1dc 0c00 	rsbs	ip, ip, #0
   b85a2:	eb7e 0000 	sbcs.w	r0, lr, r0
   b85a6:	eb6e 0101 	sbc.w	r1, lr, r1
   b85aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b85ae:	d31b      	bcc.n	b85e8 <__adddf3+0x124>
   b85b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b85b4:	d30c      	bcc.n	b85d0 <__adddf3+0x10c>
   b85b6:	0849      	lsrs	r1, r1, #1
   b85b8:	ea5f 0030 	movs.w	r0, r0, rrx
   b85bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b85c0:	f104 0401 	add.w	r4, r4, #1
   b85c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b85c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b85cc:	f080 809a 	bcs.w	b8704 <__adddf3+0x240>
   b85d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b85d4:	bf08      	it	eq
   b85d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b85da:	f150 0000 	adcs.w	r0, r0, #0
   b85de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b85e2:	ea41 0105 	orr.w	r1, r1, r5
   b85e6:	bd30      	pop	{r4, r5, pc}
   b85e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b85ec:	4140      	adcs	r0, r0
   b85ee:	eb41 0101 	adc.w	r1, r1, r1
   b85f2:	3c01      	subs	r4, #1
   b85f4:	bf28      	it	cs
   b85f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b85fa:	d2e9      	bcs.n	b85d0 <__adddf3+0x10c>
   b85fc:	f091 0f00 	teq	r1, #0
   b8600:	bf04      	itt	eq
   b8602:	4601      	moveq	r1, r0
   b8604:	2000      	moveq	r0, #0
   b8606:	fab1 f381 	clz	r3, r1
   b860a:	bf08      	it	eq
   b860c:	3320      	addeq	r3, #32
   b860e:	f1a3 030b 	sub.w	r3, r3, #11
   b8612:	f1b3 0220 	subs.w	r2, r3, #32
   b8616:	da0c      	bge.n	b8632 <__adddf3+0x16e>
   b8618:	320c      	adds	r2, #12
   b861a:	dd08      	ble.n	b862e <__adddf3+0x16a>
   b861c:	f102 0c14 	add.w	ip, r2, #20
   b8620:	f1c2 020c 	rsb	r2, r2, #12
   b8624:	fa01 f00c 	lsl.w	r0, r1, ip
   b8628:	fa21 f102 	lsr.w	r1, r1, r2
   b862c:	e00c      	b.n	b8648 <__adddf3+0x184>
   b862e:	f102 0214 	add.w	r2, r2, #20
   b8632:	bfd8      	it	le
   b8634:	f1c2 0c20 	rsble	ip, r2, #32
   b8638:	fa01 f102 	lsl.w	r1, r1, r2
   b863c:	fa20 fc0c 	lsr.w	ip, r0, ip
   b8640:	bfdc      	itt	le
   b8642:	ea41 010c 	orrle.w	r1, r1, ip
   b8646:	4090      	lslle	r0, r2
   b8648:	1ae4      	subs	r4, r4, r3
   b864a:	bfa2      	ittt	ge
   b864c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b8650:	4329      	orrge	r1, r5
   b8652:	bd30      	popge	{r4, r5, pc}
   b8654:	ea6f 0404 	mvn.w	r4, r4
   b8658:	3c1f      	subs	r4, #31
   b865a:	da1c      	bge.n	b8696 <__adddf3+0x1d2>
   b865c:	340c      	adds	r4, #12
   b865e:	dc0e      	bgt.n	b867e <__adddf3+0x1ba>
   b8660:	f104 0414 	add.w	r4, r4, #20
   b8664:	f1c4 0220 	rsb	r2, r4, #32
   b8668:	fa20 f004 	lsr.w	r0, r0, r4
   b866c:	fa01 f302 	lsl.w	r3, r1, r2
   b8670:	ea40 0003 	orr.w	r0, r0, r3
   b8674:	fa21 f304 	lsr.w	r3, r1, r4
   b8678:	ea45 0103 	orr.w	r1, r5, r3
   b867c:	bd30      	pop	{r4, r5, pc}
   b867e:	f1c4 040c 	rsb	r4, r4, #12
   b8682:	f1c4 0220 	rsb	r2, r4, #32
   b8686:	fa20 f002 	lsr.w	r0, r0, r2
   b868a:	fa01 f304 	lsl.w	r3, r1, r4
   b868e:	ea40 0003 	orr.w	r0, r0, r3
   b8692:	4629      	mov	r1, r5
   b8694:	bd30      	pop	{r4, r5, pc}
   b8696:	fa21 f004 	lsr.w	r0, r1, r4
   b869a:	4629      	mov	r1, r5
   b869c:	bd30      	pop	{r4, r5, pc}
   b869e:	f094 0f00 	teq	r4, #0
   b86a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b86a6:	bf06      	itte	eq
   b86a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b86ac:	3401      	addeq	r4, #1
   b86ae:	3d01      	subne	r5, #1
   b86b0:	e74e      	b.n	b8550 <__adddf3+0x8c>
   b86b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b86b6:	bf18      	it	ne
   b86b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b86bc:	d029      	beq.n	b8712 <__adddf3+0x24e>
   b86be:	ea94 0f05 	teq	r4, r5
   b86c2:	bf08      	it	eq
   b86c4:	ea90 0f02 	teqeq	r0, r2
   b86c8:	d005      	beq.n	b86d6 <__adddf3+0x212>
   b86ca:	ea54 0c00 	orrs.w	ip, r4, r0
   b86ce:	bf04      	itt	eq
   b86d0:	4619      	moveq	r1, r3
   b86d2:	4610      	moveq	r0, r2
   b86d4:	bd30      	pop	{r4, r5, pc}
   b86d6:	ea91 0f03 	teq	r1, r3
   b86da:	bf1e      	ittt	ne
   b86dc:	2100      	movne	r1, #0
   b86de:	2000      	movne	r0, #0
   b86e0:	bd30      	popne	{r4, r5, pc}
   b86e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b86e6:	d105      	bne.n	b86f4 <__adddf3+0x230>
   b86e8:	0040      	lsls	r0, r0, #1
   b86ea:	4149      	adcs	r1, r1
   b86ec:	bf28      	it	cs
   b86ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b86f2:	bd30      	pop	{r4, r5, pc}
   b86f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b86f8:	bf3c      	itt	cc
   b86fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b86fe:	bd30      	popcc	{r4, r5, pc}
   b8700:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8704:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b8708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b870c:	f04f 0000 	mov.w	r0, #0
   b8710:	bd30      	pop	{r4, r5, pc}
   b8712:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b8716:	bf1a      	itte	ne
   b8718:	4619      	movne	r1, r3
   b871a:	4610      	movne	r0, r2
   b871c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b8720:	bf1c      	itt	ne
   b8722:	460b      	movne	r3, r1
   b8724:	4602      	movne	r2, r0
   b8726:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b872a:	bf06      	itte	eq
   b872c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b8730:	ea91 0f03 	teqeq	r1, r3
   b8734:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b8738:	bd30      	pop	{r4, r5, pc}
   b873a:	bf00      	nop

000b873c <__aeabi_ui2d>:
   b873c:	f090 0f00 	teq	r0, #0
   b8740:	bf04      	itt	eq
   b8742:	2100      	moveq	r1, #0
   b8744:	4770      	bxeq	lr
   b8746:	b530      	push	{r4, r5, lr}
   b8748:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b874c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8750:	f04f 0500 	mov.w	r5, #0
   b8754:	f04f 0100 	mov.w	r1, #0
   b8758:	e750      	b.n	b85fc <__adddf3+0x138>
   b875a:	bf00      	nop

000b875c <__aeabi_i2d>:
   b875c:	f090 0f00 	teq	r0, #0
   b8760:	bf04      	itt	eq
   b8762:	2100      	moveq	r1, #0
   b8764:	4770      	bxeq	lr
   b8766:	b530      	push	{r4, r5, lr}
   b8768:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b876c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8770:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b8774:	bf48      	it	mi
   b8776:	4240      	negmi	r0, r0
   b8778:	f04f 0100 	mov.w	r1, #0
   b877c:	e73e      	b.n	b85fc <__adddf3+0x138>
   b877e:	bf00      	nop

000b8780 <__aeabi_f2d>:
   b8780:	0042      	lsls	r2, r0, #1
   b8782:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b8786:	ea4f 0131 	mov.w	r1, r1, rrx
   b878a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b878e:	bf1f      	itttt	ne
   b8790:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b8794:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b8798:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b879c:	4770      	bxne	lr
   b879e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b87a2:	bf08      	it	eq
   b87a4:	4770      	bxeq	lr
   b87a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b87aa:	bf04      	itt	eq
   b87ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b87b0:	4770      	bxeq	lr
   b87b2:	b530      	push	{r4, r5, lr}
   b87b4:	f44f 7460 	mov.w	r4, #896	; 0x380
   b87b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b87bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b87c0:	e71c      	b.n	b85fc <__adddf3+0x138>
   b87c2:	bf00      	nop

000b87c4 <__aeabi_ul2d>:
   b87c4:	ea50 0201 	orrs.w	r2, r0, r1
   b87c8:	bf08      	it	eq
   b87ca:	4770      	bxeq	lr
   b87cc:	b530      	push	{r4, r5, lr}
   b87ce:	f04f 0500 	mov.w	r5, #0
   b87d2:	e00a      	b.n	b87ea <__aeabi_l2d+0x16>

000b87d4 <__aeabi_l2d>:
   b87d4:	ea50 0201 	orrs.w	r2, r0, r1
   b87d8:	bf08      	it	eq
   b87da:	4770      	bxeq	lr
   b87dc:	b530      	push	{r4, r5, lr}
   b87de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b87e2:	d502      	bpl.n	b87ea <__aeabi_l2d+0x16>
   b87e4:	4240      	negs	r0, r0
   b87e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b87ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b87ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b87f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b87f6:	f43f aed8 	beq.w	b85aa <__adddf3+0xe6>
   b87fa:	f04f 0203 	mov.w	r2, #3
   b87fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b8802:	bf18      	it	ne
   b8804:	3203      	addne	r2, #3
   b8806:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b880a:	bf18      	it	ne
   b880c:	3203      	addne	r2, #3
   b880e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b8812:	f1c2 0320 	rsb	r3, r2, #32
   b8816:	fa00 fc03 	lsl.w	ip, r0, r3
   b881a:	fa20 f002 	lsr.w	r0, r0, r2
   b881e:	fa01 fe03 	lsl.w	lr, r1, r3
   b8822:	ea40 000e 	orr.w	r0, r0, lr
   b8826:	fa21 f102 	lsr.w	r1, r1, r2
   b882a:	4414      	add	r4, r2
   b882c:	e6bd      	b.n	b85aa <__adddf3+0xe6>
   b882e:	bf00      	nop

000b8830 <__aeabi_dmul>:
   b8830:	b570      	push	{r4, r5, r6, lr}
   b8832:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b8836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b883a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b883e:	bf1d      	ittte	ne
   b8840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8844:	ea94 0f0c 	teqne	r4, ip
   b8848:	ea95 0f0c 	teqne	r5, ip
   b884c:	f000 f8de 	bleq	b8a0c <__aeabi_dmul+0x1dc>
   b8850:	442c      	add	r4, r5
   b8852:	ea81 0603 	eor.w	r6, r1, r3
   b8856:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b885a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b885e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b8862:	bf18      	it	ne
   b8864:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b8868:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b886c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b8870:	d038      	beq.n	b88e4 <__aeabi_dmul+0xb4>
   b8872:	fba0 ce02 	umull	ip, lr, r0, r2
   b8876:	f04f 0500 	mov.w	r5, #0
   b887a:	fbe1 e502 	umlal	lr, r5, r1, r2
   b887e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b8882:	fbe0 e503 	umlal	lr, r5, r0, r3
   b8886:	f04f 0600 	mov.w	r6, #0
   b888a:	fbe1 5603 	umlal	r5, r6, r1, r3
   b888e:	f09c 0f00 	teq	ip, #0
   b8892:	bf18      	it	ne
   b8894:	f04e 0e01 	orrne.w	lr, lr, #1
   b8898:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b889c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b88a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b88a4:	d204      	bcs.n	b88b0 <__aeabi_dmul+0x80>
   b88a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b88aa:	416d      	adcs	r5, r5
   b88ac:	eb46 0606 	adc.w	r6, r6, r6
   b88b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b88b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b88b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b88bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b88c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b88c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b88c8:	bf88      	it	hi
   b88ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b88ce:	d81e      	bhi.n	b890e <__aeabi_dmul+0xde>
   b88d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b88d4:	bf08      	it	eq
   b88d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b88da:	f150 0000 	adcs.w	r0, r0, #0
   b88de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b88e2:	bd70      	pop	{r4, r5, r6, pc}
   b88e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b88e8:	ea46 0101 	orr.w	r1, r6, r1
   b88ec:	ea40 0002 	orr.w	r0, r0, r2
   b88f0:	ea81 0103 	eor.w	r1, r1, r3
   b88f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b88f8:	bfc2      	ittt	gt
   b88fa:	ebd4 050c 	rsbsgt	r5, r4, ip
   b88fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8902:	bd70      	popgt	{r4, r5, r6, pc}
   b8904:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8908:	f04f 0e00 	mov.w	lr, #0
   b890c:	3c01      	subs	r4, #1
   b890e:	f300 80ab 	bgt.w	b8a68 <__aeabi_dmul+0x238>
   b8912:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b8916:	bfde      	ittt	le
   b8918:	2000      	movle	r0, #0
   b891a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b891e:	bd70      	pople	{r4, r5, r6, pc}
   b8920:	f1c4 0400 	rsb	r4, r4, #0
   b8924:	3c20      	subs	r4, #32
   b8926:	da35      	bge.n	b8994 <__aeabi_dmul+0x164>
   b8928:	340c      	adds	r4, #12
   b892a:	dc1b      	bgt.n	b8964 <__aeabi_dmul+0x134>
   b892c:	f104 0414 	add.w	r4, r4, #20
   b8930:	f1c4 0520 	rsb	r5, r4, #32
   b8934:	fa00 f305 	lsl.w	r3, r0, r5
   b8938:	fa20 f004 	lsr.w	r0, r0, r4
   b893c:	fa01 f205 	lsl.w	r2, r1, r5
   b8940:	ea40 0002 	orr.w	r0, r0, r2
   b8944:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b8948:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b894c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8950:	fa21 f604 	lsr.w	r6, r1, r4
   b8954:	eb42 0106 	adc.w	r1, r2, r6
   b8958:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b895c:	bf08      	it	eq
   b895e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8962:	bd70      	pop	{r4, r5, r6, pc}
   b8964:	f1c4 040c 	rsb	r4, r4, #12
   b8968:	f1c4 0520 	rsb	r5, r4, #32
   b896c:	fa00 f304 	lsl.w	r3, r0, r4
   b8970:	fa20 f005 	lsr.w	r0, r0, r5
   b8974:	fa01 f204 	lsl.w	r2, r1, r4
   b8978:	ea40 0002 	orr.w	r0, r0, r2
   b897c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8980:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8984:	f141 0100 	adc.w	r1, r1, #0
   b8988:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b898c:	bf08      	it	eq
   b898e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8992:	bd70      	pop	{r4, r5, r6, pc}
   b8994:	f1c4 0520 	rsb	r5, r4, #32
   b8998:	fa00 f205 	lsl.w	r2, r0, r5
   b899c:	ea4e 0e02 	orr.w	lr, lr, r2
   b89a0:	fa20 f304 	lsr.w	r3, r0, r4
   b89a4:	fa01 f205 	lsl.w	r2, r1, r5
   b89a8:	ea43 0302 	orr.w	r3, r3, r2
   b89ac:	fa21 f004 	lsr.w	r0, r1, r4
   b89b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b89b4:	fa21 f204 	lsr.w	r2, r1, r4
   b89b8:	ea20 0002 	bic.w	r0, r0, r2
   b89bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b89c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b89c4:	bf08      	it	eq
   b89c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b89ca:	bd70      	pop	{r4, r5, r6, pc}
   b89cc:	f094 0f00 	teq	r4, #0
   b89d0:	d10f      	bne.n	b89f2 <__aeabi_dmul+0x1c2>
   b89d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b89d6:	0040      	lsls	r0, r0, #1
   b89d8:	eb41 0101 	adc.w	r1, r1, r1
   b89dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b89e0:	bf08      	it	eq
   b89e2:	3c01      	subeq	r4, #1
   b89e4:	d0f7      	beq.n	b89d6 <__aeabi_dmul+0x1a6>
   b89e6:	ea41 0106 	orr.w	r1, r1, r6
   b89ea:	f095 0f00 	teq	r5, #0
   b89ee:	bf18      	it	ne
   b89f0:	4770      	bxne	lr
   b89f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b89f6:	0052      	lsls	r2, r2, #1
   b89f8:	eb43 0303 	adc.w	r3, r3, r3
   b89fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b8a00:	bf08      	it	eq
   b8a02:	3d01      	subeq	r5, #1
   b8a04:	d0f7      	beq.n	b89f6 <__aeabi_dmul+0x1c6>
   b8a06:	ea43 0306 	orr.w	r3, r3, r6
   b8a0a:	4770      	bx	lr
   b8a0c:	ea94 0f0c 	teq	r4, ip
   b8a10:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8a14:	bf18      	it	ne
   b8a16:	ea95 0f0c 	teqne	r5, ip
   b8a1a:	d00c      	beq.n	b8a36 <__aeabi_dmul+0x206>
   b8a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8a20:	bf18      	it	ne
   b8a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8a26:	d1d1      	bne.n	b89cc <__aeabi_dmul+0x19c>
   b8a28:	ea81 0103 	eor.w	r1, r1, r3
   b8a2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8a30:	f04f 0000 	mov.w	r0, #0
   b8a34:	bd70      	pop	{r4, r5, r6, pc}
   b8a36:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8a3a:	bf06      	itte	eq
   b8a3c:	4610      	moveq	r0, r2
   b8a3e:	4619      	moveq	r1, r3
   b8a40:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8a44:	d019      	beq.n	b8a7a <__aeabi_dmul+0x24a>
   b8a46:	ea94 0f0c 	teq	r4, ip
   b8a4a:	d102      	bne.n	b8a52 <__aeabi_dmul+0x222>
   b8a4c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b8a50:	d113      	bne.n	b8a7a <__aeabi_dmul+0x24a>
   b8a52:	ea95 0f0c 	teq	r5, ip
   b8a56:	d105      	bne.n	b8a64 <__aeabi_dmul+0x234>
   b8a58:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b8a5c:	bf1c      	itt	ne
   b8a5e:	4610      	movne	r0, r2
   b8a60:	4619      	movne	r1, r3
   b8a62:	d10a      	bne.n	b8a7a <__aeabi_dmul+0x24a>
   b8a64:	ea81 0103 	eor.w	r1, r1, r3
   b8a68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8a6c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b8a70:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8a74:	f04f 0000 	mov.w	r0, #0
   b8a78:	bd70      	pop	{r4, r5, r6, pc}
   b8a7a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b8a7e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b8a82:	bd70      	pop	{r4, r5, r6, pc}

000b8a84 <__aeabi_ddiv>:
   b8a84:	b570      	push	{r4, r5, r6, lr}
   b8a86:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b8a8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b8a8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b8a92:	bf1d      	ittte	ne
   b8a94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8a98:	ea94 0f0c 	teqne	r4, ip
   b8a9c:	ea95 0f0c 	teqne	r5, ip
   b8aa0:	f000 f8a7 	bleq	b8bf2 <__aeabi_ddiv+0x16e>
   b8aa4:	eba4 0405 	sub.w	r4, r4, r5
   b8aa8:	ea81 0e03 	eor.w	lr, r1, r3
   b8aac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8ab0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8ab4:	f000 8088 	beq.w	b8bc8 <__aeabi_ddiv+0x144>
   b8ab8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8abc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b8ac0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b8ac4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b8ac8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b8acc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b8ad0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b8ad4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b8ad8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b8adc:	429d      	cmp	r5, r3
   b8ade:	bf08      	it	eq
   b8ae0:	4296      	cmpeq	r6, r2
   b8ae2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b8ae6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b8aea:	d202      	bcs.n	b8af2 <__aeabi_ddiv+0x6e>
   b8aec:	085b      	lsrs	r3, r3, #1
   b8aee:	ea4f 0232 	mov.w	r2, r2, rrx
   b8af2:	1ab6      	subs	r6, r6, r2
   b8af4:	eb65 0503 	sbc.w	r5, r5, r3
   b8af8:	085b      	lsrs	r3, r3, #1
   b8afa:	ea4f 0232 	mov.w	r2, r2, rrx
   b8afe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b8b02:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b8b06:	ebb6 0e02 	subs.w	lr, r6, r2
   b8b0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8b0e:	bf22      	ittt	cs
   b8b10:	1ab6      	subcs	r6, r6, r2
   b8b12:	4675      	movcs	r5, lr
   b8b14:	ea40 000c 	orrcs.w	r0, r0, ip
   b8b18:	085b      	lsrs	r3, r3, #1
   b8b1a:	ea4f 0232 	mov.w	r2, r2, rrx
   b8b1e:	ebb6 0e02 	subs.w	lr, r6, r2
   b8b22:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8b26:	bf22      	ittt	cs
   b8b28:	1ab6      	subcs	r6, r6, r2
   b8b2a:	4675      	movcs	r5, lr
   b8b2c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b8b30:	085b      	lsrs	r3, r3, #1
   b8b32:	ea4f 0232 	mov.w	r2, r2, rrx
   b8b36:	ebb6 0e02 	subs.w	lr, r6, r2
   b8b3a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8b3e:	bf22      	ittt	cs
   b8b40:	1ab6      	subcs	r6, r6, r2
   b8b42:	4675      	movcs	r5, lr
   b8b44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b8b48:	085b      	lsrs	r3, r3, #1
   b8b4a:	ea4f 0232 	mov.w	r2, r2, rrx
   b8b4e:	ebb6 0e02 	subs.w	lr, r6, r2
   b8b52:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8b56:	bf22      	ittt	cs
   b8b58:	1ab6      	subcs	r6, r6, r2
   b8b5a:	4675      	movcs	r5, lr
   b8b5c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b8b60:	ea55 0e06 	orrs.w	lr, r5, r6
   b8b64:	d018      	beq.n	b8b98 <__aeabi_ddiv+0x114>
   b8b66:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b8b6a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b8b6e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b8b72:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b8b76:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b8b7a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b8b7e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b8b82:	d1c0      	bne.n	b8b06 <__aeabi_ddiv+0x82>
   b8b84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8b88:	d10b      	bne.n	b8ba2 <__aeabi_ddiv+0x11e>
   b8b8a:	ea41 0100 	orr.w	r1, r1, r0
   b8b8e:	f04f 0000 	mov.w	r0, #0
   b8b92:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b8b96:	e7b6      	b.n	b8b06 <__aeabi_ddiv+0x82>
   b8b98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8b9c:	bf04      	itt	eq
   b8b9e:	4301      	orreq	r1, r0
   b8ba0:	2000      	moveq	r0, #0
   b8ba2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b8ba6:	bf88      	it	hi
   b8ba8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b8bac:	f63f aeaf 	bhi.w	b890e <__aeabi_dmul+0xde>
   b8bb0:	ebb5 0c03 	subs.w	ip, r5, r3
   b8bb4:	bf04      	itt	eq
   b8bb6:	ebb6 0c02 	subseq.w	ip, r6, r2
   b8bba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8bbe:	f150 0000 	adcs.w	r0, r0, #0
   b8bc2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8bc6:	bd70      	pop	{r4, r5, r6, pc}
   b8bc8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b8bcc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b8bd0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b8bd4:	bfc2      	ittt	gt
   b8bd6:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8bda:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8bde:	bd70      	popgt	{r4, r5, r6, pc}
   b8be0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8be4:	f04f 0e00 	mov.w	lr, #0
   b8be8:	3c01      	subs	r4, #1
   b8bea:	e690      	b.n	b890e <__aeabi_dmul+0xde>
   b8bec:	ea45 0e06 	orr.w	lr, r5, r6
   b8bf0:	e68d      	b.n	b890e <__aeabi_dmul+0xde>
   b8bf2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8bf6:	ea94 0f0c 	teq	r4, ip
   b8bfa:	bf08      	it	eq
   b8bfc:	ea95 0f0c 	teqeq	r5, ip
   b8c00:	f43f af3b 	beq.w	b8a7a <__aeabi_dmul+0x24a>
   b8c04:	ea94 0f0c 	teq	r4, ip
   b8c08:	d10a      	bne.n	b8c20 <__aeabi_ddiv+0x19c>
   b8c0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8c0e:	f47f af34 	bne.w	b8a7a <__aeabi_dmul+0x24a>
   b8c12:	ea95 0f0c 	teq	r5, ip
   b8c16:	f47f af25 	bne.w	b8a64 <__aeabi_dmul+0x234>
   b8c1a:	4610      	mov	r0, r2
   b8c1c:	4619      	mov	r1, r3
   b8c1e:	e72c      	b.n	b8a7a <__aeabi_dmul+0x24a>
   b8c20:	ea95 0f0c 	teq	r5, ip
   b8c24:	d106      	bne.n	b8c34 <__aeabi_ddiv+0x1b0>
   b8c26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8c2a:	f43f aefd 	beq.w	b8a28 <__aeabi_dmul+0x1f8>
   b8c2e:	4610      	mov	r0, r2
   b8c30:	4619      	mov	r1, r3
   b8c32:	e722      	b.n	b8a7a <__aeabi_dmul+0x24a>
   b8c34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8c38:	bf18      	it	ne
   b8c3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8c3e:	f47f aec5 	bne.w	b89cc <__aeabi_dmul+0x19c>
   b8c42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b8c46:	f47f af0d 	bne.w	b8a64 <__aeabi_dmul+0x234>
   b8c4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b8c4e:	f47f aeeb 	bne.w	b8a28 <__aeabi_dmul+0x1f8>
   b8c52:	e712      	b.n	b8a7a <__aeabi_dmul+0x24a>

000b8c54 <__gedf2>:
   b8c54:	f04f 3cff 	mov.w	ip, #4294967295
   b8c58:	e006      	b.n	b8c68 <__cmpdf2+0x4>
   b8c5a:	bf00      	nop

000b8c5c <__ledf2>:
   b8c5c:	f04f 0c01 	mov.w	ip, #1
   b8c60:	e002      	b.n	b8c68 <__cmpdf2+0x4>
   b8c62:	bf00      	nop

000b8c64 <__cmpdf2>:
   b8c64:	f04f 0c01 	mov.w	ip, #1
   b8c68:	f84d cd04 	str.w	ip, [sp, #-4]!
   b8c6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8c70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8c74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8c78:	bf18      	it	ne
   b8c7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b8c7e:	d01b      	beq.n	b8cb8 <__cmpdf2+0x54>
   b8c80:	b001      	add	sp, #4
   b8c82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b8c86:	bf0c      	ite	eq
   b8c88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b8c8c:	ea91 0f03 	teqne	r1, r3
   b8c90:	bf02      	ittt	eq
   b8c92:	ea90 0f02 	teqeq	r0, r2
   b8c96:	2000      	moveq	r0, #0
   b8c98:	4770      	bxeq	lr
   b8c9a:	f110 0f00 	cmn.w	r0, #0
   b8c9e:	ea91 0f03 	teq	r1, r3
   b8ca2:	bf58      	it	pl
   b8ca4:	4299      	cmppl	r1, r3
   b8ca6:	bf08      	it	eq
   b8ca8:	4290      	cmpeq	r0, r2
   b8caa:	bf2c      	ite	cs
   b8cac:	17d8      	asrcs	r0, r3, #31
   b8cae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b8cb2:	f040 0001 	orr.w	r0, r0, #1
   b8cb6:	4770      	bx	lr
   b8cb8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8cbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8cc0:	d102      	bne.n	b8cc8 <__cmpdf2+0x64>
   b8cc2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b8cc6:	d107      	bne.n	b8cd8 <__cmpdf2+0x74>
   b8cc8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8ccc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8cd0:	d1d6      	bne.n	b8c80 <__cmpdf2+0x1c>
   b8cd2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b8cd6:	d0d3      	beq.n	b8c80 <__cmpdf2+0x1c>
   b8cd8:	f85d 0b04 	ldr.w	r0, [sp], #4
   b8cdc:	4770      	bx	lr
   b8cde:	bf00      	nop

000b8ce0 <__aeabi_cdrcmple>:
   b8ce0:	4684      	mov	ip, r0
   b8ce2:	4610      	mov	r0, r2
   b8ce4:	4662      	mov	r2, ip
   b8ce6:	468c      	mov	ip, r1
   b8ce8:	4619      	mov	r1, r3
   b8cea:	4663      	mov	r3, ip
   b8cec:	e000      	b.n	b8cf0 <__aeabi_cdcmpeq>
   b8cee:	bf00      	nop

000b8cf0 <__aeabi_cdcmpeq>:
   b8cf0:	b501      	push	{r0, lr}
   b8cf2:	f7ff ffb7 	bl	b8c64 <__cmpdf2>
   b8cf6:	2800      	cmp	r0, #0
   b8cf8:	bf48      	it	mi
   b8cfa:	f110 0f00 	cmnmi.w	r0, #0
   b8cfe:	bd01      	pop	{r0, pc}

000b8d00 <__aeabi_dcmpeq>:
   b8d00:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8d04:	f7ff fff4 	bl	b8cf0 <__aeabi_cdcmpeq>
   b8d08:	bf0c      	ite	eq
   b8d0a:	2001      	moveq	r0, #1
   b8d0c:	2000      	movne	r0, #0
   b8d0e:	f85d fb08 	ldr.w	pc, [sp], #8
   b8d12:	bf00      	nop

000b8d14 <__aeabi_dcmplt>:
   b8d14:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8d18:	f7ff ffea 	bl	b8cf0 <__aeabi_cdcmpeq>
   b8d1c:	bf34      	ite	cc
   b8d1e:	2001      	movcc	r0, #1
   b8d20:	2000      	movcs	r0, #0
   b8d22:	f85d fb08 	ldr.w	pc, [sp], #8
   b8d26:	bf00      	nop

000b8d28 <__aeabi_dcmple>:
   b8d28:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8d2c:	f7ff ffe0 	bl	b8cf0 <__aeabi_cdcmpeq>
   b8d30:	bf94      	ite	ls
   b8d32:	2001      	movls	r0, #1
   b8d34:	2000      	movhi	r0, #0
   b8d36:	f85d fb08 	ldr.w	pc, [sp], #8
   b8d3a:	bf00      	nop

000b8d3c <__aeabi_dcmpge>:
   b8d3c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8d40:	f7ff ffce 	bl	b8ce0 <__aeabi_cdrcmple>
   b8d44:	bf94      	ite	ls
   b8d46:	2001      	movls	r0, #1
   b8d48:	2000      	movhi	r0, #0
   b8d4a:	f85d fb08 	ldr.w	pc, [sp], #8
   b8d4e:	bf00      	nop

000b8d50 <__aeabi_dcmpgt>:
   b8d50:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8d54:	f7ff ffc4 	bl	b8ce0 <__aeabi_cdrcmple>
   b8d58:	bf34      	ite	cc
   b8d5a:	2001      	movcc	r0, #1
   b8d5c:	2000      	movcs	r0, #0
   b8d5e:	f85d fb08 	ldr.w	pc, [sp], #8
   b8d62:	bf00      	nop

000b8d64 <__aeabi_dcmpun>:
   b8d64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8d68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8d6c:	d102      	bne.n	b8d74 <__aeabi_dcmpun+0x10>
   b8d6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b8d72:	d10a      	bne.n	b8d8a <__aeabi_dcmpun+0x26>
   b8d74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8d78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8d7c:	d102      	bne.n	b8d84 <__aeabi_dcmpun+0x20>
   b8d7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b8d82:	d102      	bne.n	b8d8a <__aeabi_dcmpun+0x26>
   b8d84:	f04f 0000 	mov.w	r0, #0
   b8d88:	4770      	bx	lr
   b8d8a:	f04f 0001 	mov.w	r0, #1
   b8d8e:	4770      	bx	lr

000b8d90 <__aeabi_d2iz>:
   b8d90:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b8d94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b8d98:	d215      	bcs.n	b8dc6 <__aeabi_d2iz+0x36>
   b8d9a:	d511      	bpl.n	b8dc0 <__aeabi_d2iz+0x30>
   b8d9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b8da0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b8da4:	d912      	bls.n	b8dcc <__aeabi_d2iz+0x3c>
   b8da6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8daa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b8dae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b8db2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b8db6:	fa23 f002 	lsr.w	r0, r3, r2
   b8dba:	bf18      	it	ne
   b8dbc:	4240      	negne	r0, r0
   b8dbe:	4770      	bx	lr
   b8dc0:	f04f 0000 	mov.w	r0, #0
   b8dc4:	4770      	bx	lr
   b8dc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b8dca:	d105      	bne.n	b8dd8 <__aeabi_d2iz+0x48>
   b8dcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b8dd0:	bf08      	it	eq
   b8dd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b8dd6:	4770      	bx	lr
   b8dd8:	f04f 0000 	mov.w	r0, #0
   b8ddc:	4770      	bx	lr
   b8dde:	bf00      	nop

000b8de0 <__aeabi_d2uiz>:
   b8de0:	004a      	lsls	r2, r1, #1
   b8de2:	d211      	bcs.n	b8e08 <__aeabi_d2uiz+0x28>
   b8de4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b8de8:	d211      	bcs.n	b8e0e <__aeabi_d2uiz+0x2e>
   b8dea:	d50d      	bpl.n	b8e08 <__aeabi_d2uiz+0x28>
   b8dec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b8df0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b8df4:	d40e      	bmi.n	b8e14 <__aeabi_d2uiz+0x34>
   b8df6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8dfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b8dfe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b8e02:	fa23 f002 	lsr.w	r0, r3, r2
   b8e06:	4770      	bx	lr
   b8e08:	f04f 0000 	mov.w	r0, #0
   b8e0c:	4770      	bx	lr
   b8e0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b8e12:	d102      	bne.n	b8e1a <__aeabi_d2uiz+0x3a>
   b8e14:	f04f 30ff 	mov.w	r0, #4294967295
   b8e18:	4770      	bx	lr
   b8e1a:	f04f 0000 	mov.w	r0, #0
   b8e1e:	4770      	bx	lr

000b8e20 <__aeabi_d2f>:
   b8e20:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b8e24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b8e28:	bf24      	itt	cs
   b8e2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b8e2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b8e32:	d90d      	bls.n	b8e50 <__aeabi_d2f+0x30>
   b8e34:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b8e38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b8e3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b8e40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b8e44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b8e48:	bf08      	it	eq
   b8e4a:	f020 0001 	biceq.w	r0, r0, #1
   b8e4e:	4770      	bx	lr
   b8e50:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b8e54:	d121      	bne.n	b8e9a <__aeabi_d2f+0x7a>
   b8e56:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b8e5a:	bfbc      	itt	lt
   b8e5c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b8e60:	4770      	bxlt	lr
   b8e62:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8e66:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b8e6a:	f1c2 0218 	rsb	r2, r2, #24
   b8e6e:	f1c2 0c20 	rsb	ip, r2, #32
   b8e72:	fa10 f30c 	lsls.w	r3, r0, ip
   b8e76:	fa20 f002 	lsr.w	r0, r0, r2
   b8e7a:	bf18      	it	ne
   b8e7c:	f040 0001 	orrne.w	r0, r0, #1
   b8e80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8e84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b8e88:	fa03 fc0c 	lsl.w	ip, r3, ip
   b8e8c:	ea40 000c 	orr.w	r0, r0, ip
   b8e90:	fa23 f302 	lsr.w	r3, r3, r2
   b8e94:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b8e98:	e7cc      	b.n	b8e34 <__aeabi_d2f+0x14>
   b8e9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b8e9e:	d107      	bne.n	b8eb0 <__aeabi_d2f+0x90>
   b8ea0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b8ea4:	bf1e      	ittt	ne
   b8ea6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b8eaa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b8eae:	4770      	bxne	lr
   b8eb0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b8eb4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b8eb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b8ebc:	4770      	bx	lr
   b8ebe:	bf00      	nop

000b8ec0 <atexit>:
   b8ec0:	2300      	movs	r3, #0
   b8ec2:	4601      	mov	r1, r0
   b8ec4:	461a      	mov	r2, r3
   b8ec6:	4618      	mov	r0, r3
   b8ec8:	f000 b85c 	b.w	b8f84 <__register_exitproc>

000b8ecc <memcmp>:
   b8ecc:	b510      	push	{r4, lr}
   b8ece:	3901      	subs	r1, #1
   b8ed0:	4402      	add	r2, r0
   b8ed2:	4290      	cmp	r0, r2
   b8ed4:	d101      	bne.n	b8eda <memcmp+0xe>
   b8ed6:	2000      	movs	r0, #0
   b8ed8:	e005      	b.n	b8ee6 <memcmp+0x1a>
   b8eda:	7803      	ldrb	r3, [r0, #0]
   b8edc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8ee0:	42a3      	cmp	r3, r4
   b8ee2:	d001      	beq.n	b8ee8 <memcmp+0x1c>
   b8ee4:	1b18      	subs	r0, r3, r4
   b8ee6:	bd10      	pop	{r4, pc}
   b8ee8:	3001      	adds	r0, #1
   b8eea:	e7f2      	b.n	b8ed2 <memcmp+0x6>

000b8eec <memcpy>:
   b8eec:	440a      	add	r2, r1
   b8eee:	4291      	cmp	r1, r2
   b8ef0:	f100 33ff 	add.w	r3, r0, #4294967295
   b8ef4:	d100      	bne.n	b8ef8 <memcpy+0xc>
   b8ef6:	4770      	bx	lr
   b8ef8:	b510      	push	{r4, lr}
   b8efa:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8efe:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8f02:	4291      	cmp	r1, r2
   b8f04:	d1f9      	bne.n	b8efa <memcpy+0xe>
   b8f06:	bd10      	pop	{r4, pc}

000b8f08 <memset>:
   b8f08:	4402      	add	r2, r0
   b8f0a:	4603      	mov	r3, r0
   b8f0c:	4293      	cmp	r3, r2
   b8f0e:	d100      	bne.n	b8f12 <memset+0xa>
   b8f10:	4770      	bx	lr
   b8f12:	f803 1b01 	strb.w	r1, [r3], #1
   b8f16:	e7f9      	b.n	b8f0c <memset+0x4>

000b8f18 <srand>:
   b8f18:	b538      	push	{r3, r4, r5, lr}
   b8f1a:	4b10      	ldr	r3, [pc, #64]	; (b8f5c <srand+0x44>)
   b8f1c:	681d      	ldr	r5, [r3, #0]
   b8f1e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8f20:	4604      	mov	r4, r0
   b8f22:	b9b3      	cbnz	r3, b8f52 <srand+0x3a>
   b8f24:	2018      	movs	r0, #24
   b8f26:	f7fe fa6b 	bl	b7400 <malloc>
   b8f2a:	4602      	mov	r2, r0
   b8f2c:	63a8      	str	r0, [r5, #56]	; 0x38
   b8f2e:	b920      	cbnz	r0, b8f3a <srand+0x22>
   b8f30:	4b0b      	ldr	r3, [pc, #44]	; (b8f60 <srand+0x48>)
   b8f32:	480c      	ldr	r0, [pc, #48]	; (b8f64 <srand+0x4c>)
   b8f34:	2142      	movs	r1, #66	; 0x42
   b8f36:	f7fe fa7b 	bl	b7430 <__assert_func>
   b8f3a:	490b      	ldr	r1, [pc, #44]	; (b8f68 <srand+0x50>)
   b8f3c:	4b0b      	ldr	r3, [pc, #44]	; (b8f6c <srand+0x54>)
   b8f3e:	e9c0 1300 	strd	r1, r3, [r0]
   b8f42:	4b0b      	ldr	r3, [pc, #44]	; (b8f70 <srand+0x58>)
   b8f44:	6083      	str	r3, [r0, #8]
   b8f46:	230b      	movs	r3, #11
   b8f48:	8183      	strh	r3, [r0, #12]
   b8f4a:	2100      	movs	r1, #0
   b8f4c:	2001      	movs	r0, #1
   b8f4e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8f52:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8f54:	2200      	movs	r2, #0
   b8f56:	611c      	str	r4, [r3, #16]
   b8f58:	615a      	str	r2, [r3, #20]
   b8f5a:	bd38      	pop	{r3, r4, r5, pc}
   b8f5c:	2003e0c8 	.word	0x2003e0c8
   b8f60:	000b9e15 	.word	0x000b9e15
   b8f64:	000b9e2c 	.word	0x000b9e2c
   b8f68:	abcd330e 	.word	0xabcd330e
   b8f6c:	e66d1234 	.word	0xe66d1234
   b8f70:	0005deec 	.word	0x0005deec

000b8f74 <strlen>:
   b8f74:	4603      	mov	r3, r0
   b8f76:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8f7a:	2a00      	cmp	r2, #0
   b8f7c:	d1fb      	bne.n	b8f76 <strlen+0x2>
   b8f7e:	1a18      	subs	r0, r3, r0
   b8f80:	3801      	subs	r0, #1
   b8f82:	4770      	bx	lr

000b8f84 <__register_exitproc>:
   b8f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8f88:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9044 <__register_exitproc+0xc0>
   b8f8c:	4606      	mov	r6, r0
   b8f8e:	f8d8 0000 	ldr.w	r0, [r8]
   b8f92:	461f      	mov	r7, r3
   b8f94:	460d      	mov	r5, r1
   b8f96:	4691      	mov	r9, r2
   b8f98:	f000 f856 	bl	b9048 <__retarget_lock_acquire_recursive>
   b8f9c:	4b25      	ldr	r3, [pc, #148]	; (b9034 <__register_exitproc+0xb0>)
   b8f9e:	681c      	ldr	r4, [r3, #0]
   b8fa0:	b934      	cbnz	r4, b8fb0 <__register_exitproc+0x2c>
   b8fa2:	4c25      	ldr	r4, [pc, #148]	; (b9038 <__register_exitproc+0xb4>)
   b8fa4:	601c      	str	r4, [r3, #0]
   b8fa6:	4b25      	ldr	r3, [pc, #148]	; (b903c <__register_exitproc+0xb8>)
   b8fa8:	b113      	cbz	r3, b8fb0 <__register_exitproc+0x2c>
   b8faa:	681b      	ldr	r3, [r3, #0]
   b8fac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8fb0:	6863      	ldr	r3, [r4, #4]
   b8fb2:	2b1f      	cmp	r3, #31
   b8fb4:	dd07      	ble.n	b8fc6 <__register_exitproc+0x42>
   b8fb6:	f8d8 0000 	ldr.w	r0, [r8]
   b8fba:	f000 f847 	bl	b904c <__retarget_lock_release_recursive>
   b8fbe:	f04f 30ff 	mov.w	r0, #4294967295
   b8fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8fc6:	b34e      	cbz	r6, b901c <__register_exitproc+0x98>
   b8fc8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8fcc:	b988      	cbnz	r0, b8ff2 <__register_exitproc+0x6e>
   b8fce:	4b1c      	ldr	r3, [pc, #112]	; (b9040 <__register_exitproc+0xbc>)
   b8fd0:	b923      	cbnz	r3, b8fdc <__register_exitproc+0x58>
   b8fd2:	f8d8 0000 	ldr.w	r0, [r8]
   b8fd6:	f000 f838 	bl	b904a <__retarget_lock_release>
   b8fda:	e7f0      	b.n	b8fbe <__register_exitproc+0x3a>
   b8fdc:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8fe0:	f7fe fa0e 	bl	b7400 <malloc>
   b8fe4:	2800      	cmp	r0, #0
   b8fe6:	d0f4      	beq.n	b8fd2 <__register_exitproc+0x4e>
   b8fe8:	2300      	movs	r3, #0
   b8fea:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8fee:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8ff2:	6863      	ldr	r3, [r4, #4]
   b8ff4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8ff8:	2201      	movs	r2, #1
   b8ffa:	409a      	lsls	r2, r3
   b8ffc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9000:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9004:	4313      	orrs	r3, r2
   b9006:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b900a:	2e02      	cmp	r6, #2
   b900c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9010:	bf02      	ittt	eq
   b9012:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9016:	4313      	orreq	r3, r2
   b9018:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b901c:	6863      	ldr	r3, [r4, #4]
   b901e:	f8d8 0000 	ldr.w	r0, [r8]
   b9022:	1c5a      	adds	r2, r3, #1
   b9024:	3302      	adds	r3, #2
   b9026:	6062      	str	r2, [r4, #4]
   b9028:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b902c:	f000 f80e 	bl	b904c <__retarget_lock_release_recursive>
   b9030:	2000      	movs	r0, #0
   b9032:	e7c6      	b.n	b8fc2 <__register_exitproc+0x3e>
   b9034:	2003e7e8 	.word	0x2003e7e8
   b9038:	2003e75c 	.word	0x2003e75c
   b903c:	00000000 	.word	0x00000000
   b9040:	000b7401 	.word	0x000b7401
   b9044:	2003e12c 	.word	0x2003e12c

000b9048 <__retarget_lock_acquire_recursive>:
   b9048:	4770      	bx	lr

000b904a <__retarget_lock_release>:
   b904a:	4770      	bx	lr

000b904c <__retarget_lock_release_recursive>:
   b904c:	4770      	bx	lr

000b904e <link_code_end>:
	...

000b9050 <dynalib_user>:
   b9050:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b9060:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b9070:	7620 7269 7574 6c61 6400 6665 7561 746c      virtual.default
   b9080:	0020 534d 0042 534c 0042 533c 4950 6553      .MSB.LSB.<SPISe
   b9090:	7474 6e69 7367 6420 6665 7561 746c 003e     ttings default>.
   b90a0:	533c 4950 6553 7474 6e69 7367 2520 2573     <SPISettings %s%
   b90b0:	2075 7325 4d20 444f 2545 3e75 4d00 7861     u %s MODE%u>.Max
   b90c0:	6f62 6974 2078 6554 7473 5400 6d69 3a65     botix Test.Time:
   b90d0:	0020 6944 7473 6e61 6563 6928 296e 203a      .Distance(in): 
   b90e0:	6400 7369 6174 636e 2e65 7874 0074 6166     .distance.txt.fa
   b90f0:	6c69 6465 7420 206f 706f 6e65 6320 7261     iled to open car
   b9100:	0064 706f 6e65 6e69 2067 6574 7473 742e     d.opening test.t
   b9110:	7478 6620 726f 7720 6972 6574 6620 6961     xt for write fai
   b9120:	656c 0064 002c 6f67 6e69 2067 6f74 7320     led.,.going to s
   b9130:	656c 7065 4600 6565 696c 676e 7220 7365     leep.Feeling res
   b9140:	6c74 7365 0073 0000                         tless...

000b9148 <_ZTVN8particle11SPISettingsE>:
	...
   b9150:	4195 000b 40cd 000b 411d 000b               .A...@...A..

000b915c <_ZTV4File>:
	...
   b9164:	40e9 000b 412b 000b 415f 000b 4117 000b     .@..+A.._A...A..
   b9174:	40cf 000b 40f7 000b 40f1 000b 40eb 000b     .@...@...@...@..

000b9184 <_ZL4font>:
   b9184:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b9194:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b91a4:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b91b4:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b91c4:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b91d4:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b91e4:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b91f4:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b9204:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b9214:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b9224:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b9234:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b9244:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b9254:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b9264:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b9274:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b9284:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b9294:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b92a4:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b92b4:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b92c4:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b92d4:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b92e4:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b92f4:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b9304:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b9314:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b9324:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b9334:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b9344:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b9354:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b9364:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b9374:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b9384:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b9394:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b93a4:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b93b4:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b93c4:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b93d4:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b93e4:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b93f4:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b9404:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b9414:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b9424:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b9434:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b9444:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b9454:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b9464:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b9474:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b9484:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b9494:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b94a4:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b94b4:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b94c4:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b94d4:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b94e4:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b94f4:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b9504:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b9514:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b9524:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b9534:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b9544:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b9554:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b9564:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b9574:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b9584:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b9594:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b95a4:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b95b4:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b95c4:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b95d4:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b95e4:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b95f4:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b9604:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b9614:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b9624:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b9634:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b9644:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b9654:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b9664:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b9674:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000b9684 <_ZTV12Adafruit_GFX>:
	...
   b9694:	4d45 000b 77c9 000b 40a5 000b 474b 000b     EM...w...@..KG..
   b96a4:	474d 000b 477f 000b 475b 000b 476d 000b     MG...G..[G..mG..
   b96b4:	468d 000b 474b 000b 4977 000b 4975 000b     .F..KG..wI..uI..
   b96c4:	4797 000b 47d5 000b 480f 000b 4855 000b     .G...G...H..UH..
   b96d4:	4871 000b 48f5 000b                         qH...H..

000b96dc <_ZTV16OledWingAdafruit>:
	...
   b96e4:	4e55 000b 4e75 000b 4d45 000b 77c9 000b     UN..uN..EM...w..
   b96f4:	661d 000b 474b 000b 474d 000b 477f 000b     .f..KG..MG...G..
   b9704:	475b 000b 476d 000b 468d 000b 474b 000b     [G..mG...F..KG..
   b9714:	4977 000b 67bb 000b 6d63 000b 6d15 000b     wI...g..cm...m..
   b9724:	480f 000b 4855 000b 4871 000b 48f5 000b     .H..UH..qH...H..

000b9734 <_ZL12splash1_data>:
   b9734:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   b9744:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   b9754:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   b9764:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   b9774:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   b9784:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   b979c:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   b97ac:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   b97bc:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   b97cc:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   b97dc:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   b97ec:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   b97fc:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   b980c:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   b981c:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   b982c:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   b983c:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   b984c:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   b985c:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   b986c:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   b987c:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   b988c:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   b989c:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   b98ac:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   b98c4:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   b98dc:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   b98ec:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   b98fc:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   b990c:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   b991c:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   b992c:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   b993c:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   b994c:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   b995c:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   b996c:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   b997c:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   b998c:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   b999c:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   b99ac:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   b99bc:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   b99cc:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   b99dc:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   b99ec:	fdff 5b6b 6adb c0fd                         ..k[.j..

000b99f4 <_ZL12splash2_data>:
   b99f4:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   b9a04:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   b9a14:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   b9a30:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   b9a40:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   b9a50:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   b9a60:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   b9a70:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   b9a80:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   b9a90:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   b9aa0:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   b9ab0:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   b9ac0:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   b9ad0:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   b9ae0:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   b9af0:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   b9b00:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   b9b10:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   b9b20:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   b9b30:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   b9b40:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   b9b50:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   b9b60:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   b9b70:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   b9b88:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   b9b98:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   b9ba8:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   b9bb8:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   b9bc8:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000b9bd4 <_ZTV16Adafruit_SSD1306>:
	...
   b9bdc:	65f1 000b 6609 000b 4d45 000b 77c9 000b     .e...f..EM...w..
   b9bec:	661d 000b 474b 000b 474d 000b 477f 000b     .f..KG..MG...G..
   b9bfc:	475b 000b 476d 000b 468d 000b 474b 000b     [G..mG...F..KG..
   b9c0c:	4977 000b 67bb 000b 6d63 000b 6d15 000b     wI...g..cm...m..
   b9c1c:	480f 000b 4855 000b 4871 000b 48f5 000b     .H..UH..qH...H..

000b9c2c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b9c2c:	8000 e0c0 f8f0 fefc                         ........

000b9c34 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b9c34:	0100 0703 1f0f 7f3f                         ......?.

000b9c3c <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b9c3c:	d5ae a880                                   ....

000b9c40 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b9c40:	00d3 8d40                                   ..@.

000b9c44 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b9c44:	0020 c8a1                                    ...

000b9c48 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b9c48:	40db a6a4 af2e                              .@....

000b9c4e <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b9c4e:	02da 8f81                                   ....

000b9c52 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b9c52:	12da                                         ...

000b9c55 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b9c55:	02da                                         ...

000b9c58 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   b9c58:	0022 21ff 0000 0000                         "..!....

000b9c60 <_ZTVN5spark13EthernetClassE>:
	...
   b9c68:	74cd 000b 74c3 000b 74b9 000b 74af 000b     .t...t...t...t..
   b9c78:	74a3 000b 7497 000b 80fb 000b 8103 000b     .t...t..........
   b9c88:	748b 000b 7483 000b 7479 000b 746f 000b     .t...t..yt..ot..
   b9c98:	8133 000b                                   3...

000b9c9c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b9c9c:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   b9cac:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   b9cbc:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   b9ccc:	6c61 6469 002e 616e 006e 6e69 0066 766f     alid..nan.inf.ov
   b9cdc:	0066 7061 0070 5925 252d 2d6d 6425 2554     f.app.%Y-%m-%dT%
   b9cec:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   b9cfc:	0065 0000                                   e...

000b9d00 <_ZTV9IPAddress>:
	...
   b9d08:	7cd9 000b 7cc9 000b 7ccb 000b               .|...|...|..

000b9d14 <_ZTV9USBSerial>:
	...
   b9d1c:	7dbf 000b 7e27 000b 7dfd 000b 77c9 000b     .}..'~...}...w..
   b9d2c:	7def 000b 7dc1 000b 7dd1 000b 7e21 000b     .}...}...}..!~..
   b9d3c:	7de1 000b 7db9 000b                         .}...}..

000b9d44 <_ZTVN5spark13CellularClassE>:
	...
   b9d4c:	7f1f 000b 7f15 000b 7f0b 000b 7ec1 000b     .............~..
   b9d5c:	7eff 000b 7ef3 000b 80fb 000b 8103 000b     .~...~..........
   b9d6c:	7ee7 000b 7edf 000b 7ed5 000b 7ecb 000b     .~...~...~...~..
   b9d7c:	8133 000b                                   3...

000b9d80 <_ZTV11USARTSerial>:
	...
   b9d88:	7f59 000b 7fc5 000b 7f9d 000b 77c9 000b     Y............w..
   b9d98:	7f6d 000b 7f89 000b 7f7b 000b 7f97 000b     m.......{.......
   b9da8:	7f5b 000b 7f5f 000b                         [..._...

000b9db0 <_ZTV7TwoWire>:
	...
   b9db8:	7ffd 000b 8047 000b 801f 000b 7fff 000b     ....G...........
   b9dc8:	8027 000b 802f 000b 8037 000b 803f 000b     '.../...7...?...

000b9dd8 <_ZTVN5spark12NetworkClassE>:
	...
   b9de0:	80bb 000b 80c5 000b 80cf 000b 80d9 000b     ................
   b9df0:	80e3 000b 80ef 000b 80fb 000b 8103 000b     ................
   b9e00:	810b 000b 8117 000b 811f 000b 8129 000b     ............)...
   b9e10:	8133 000b                                   3...

000b9e14 <_ZSt7nothrow>:
   b9e14:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b9e24:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b9e34:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b9e44:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b9e54:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b9e64:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b9e74:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b9e84:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b9e94:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b9ea4:	646e 632e                                    nd.c.

000b9ea9 <link_const_variable_data_end>:
   b9ea9:	00          	.byte	0x00
	...

000b9eac <link_constructors_location>:
   b9eac:	000b45c1 	.word	0x000b45c1
   b9eb0:	000b74d9 	.word	0x000b74d9
   b9eb4:	000b7795 	.word	0x000b7795
   b9eb8:	000b77b9 	.word	0x000b77b9
   b9ebc:	000b7ab1 	.word	0x000b7ab1
   b9ec0:	000b7b35 	.word	0x000b7b35
   b9ec4:	000b7b51 	.word	0x000b7b51
   b9ec8:	000b7f29 	.word	0x000b7f29
   b9ecc:	000b820d 	.word	0x000b820d
